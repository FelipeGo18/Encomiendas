<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    // Safe Args es OPCIONAL (solo si quieres clases Directions):&#10;    // id(&quot;androidx.navigation.safeargs&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.hfad.encomiendas&quot;&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.hfad.encomiendas&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        val mapsKey = (project.findProperty(&quot;MAPS_API_KEY&quot;) as String?) ?: &quot;&quot;&#10;        buildConfigField(&quot;String&quot;, &quot;MAPS_API_KEY&quot;, &quot;\&quot;$mapsKey\&quot;&quot;)&#10;        manifestPlaceholders[&quot;MAPS_API_KEY&quot;] = mapsKey&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // --- AndroidX UI ---&#10;    implementation(&quot;androidx.core:core:1.13.1&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.7.0&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.12.0&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#10;&#10;    // --- Navigation (¡clave para los atributos app:startDestination, app:destination, app:argType!) ---&#10;    val nav = &quot;2.7.7&quot;&#10;    implementation(&quot;androidx.navigation:navigation-fragment:$nav&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui:$nav&quot;)&#10;    // explícito para evitar el error de aapt en algunos setups&#10;    implementation(&quot;androidx.navigation:navigation-runtime:$nav&quot;)&#10;&#10;    // --- Google Maps / Places ---&#10;    implementation(&quot;com.google.android.gms:play-services-maps:18.2.0&quot;)&#10;    implementation(&quot;com.google.android.gms:play-services-location:21.3.0&quot;)&#10;    implementation(&quot;com.google.android.libraries.places:places:3.5.0&quot;)&#10;&#10;    // --- Room ---&#10;    implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;    annotationProcessor(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;&#10;    // --- Tests ---&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    // Safe Args es OPCIONAL (solo si quieres clases Directions):&#10;    // id(&quot;androidx.navigation.safeargs&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.hfad.encomiendas&quot;&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.hfad.encomiendas&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;        val mapsKey = (project.findProperty(&quot;MAPS_API_KEY&quot;) as String?) ?: &quot;&quot;&#10;        buildConfigField(&quot;String&quot;, &quot;MAPS_API_KEY&quot;, &quot;\&quot;$mapsKey\&quot;&quot;)&#10;        manifestPlaceholders[&quot;MAPS_API_KEY&quot;] = mapsKey&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // --- AndroidX UI ---&#10;    implementation(&quot;androidx.core:core:1.13.1&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.7.0&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.12.0&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#10;&#10;    // --- Navigation (¡clave para los atributos app:startDestination, app:destination, app:argType!) ---&#10;    val nav = &quot;2.7.7&quot;&#10;    implementation(&quot;androidx.navigation:navigation-fragment:$nav&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui:$nav&quot;)&#10;    // explícito para evitar el error de aapt en algunos setups&#10;    implementation(&quot;androidx.navigation:navigation-runtime:$nav&quot;)&#10;&#10;    // --- Google Maps / Places ---&#10;    implementation(&quot;com.google.android.gms:play-services-maps:18.2.0&quot;)&#10;    implementation(&quot;com.google.android.gms:play-services-location:21.3.0&quot;)&#10;    implementation(&quot;com.google.android.libraries.places:places:3.5.0&quot;)&#10;&#10;    // --- Room ---&#10;    implementation(&quot;androidx.room:room-runtime:2.6.1&quot;)&#10;    annotationProcessor(&quot;androidx.room:room-compiler:2.6.1&quot;)&#10;&#10;    // --- Glide ---&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;&#10;    // --- Tests ---&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.2.1&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.6.1&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleEntregaFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleEntregaFragment.java" />
              <option name="originalContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.pm.PackageManager;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.chip.Chip;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.DeliveryDispatcherService;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Asignacion;&#10;import com.hfad.encomiendas.data.AsignacionDao;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;public class DetalleEntregaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;    private int asignacionId;&#10;&#10;    private TextView tvTitulo, tvEstado, tvEta;&#10;    private Chip chipDistance;&#10;    private MaterialButton btnIniciarRuta, btnEntregado;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;&#10;    private TrackingService tracking;&#10;    private FusedLocationProviderClient fused;&#10;&#10;    private GoogleMap gmap;&#10;    private Marker markerCourier, markerDestino;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat, destinoLon;&#10;    private String estadoAsignacion = &quot;&quot;;&#10;&#10;    private String lastEtaIso = null;&#10;    private Double lastDistanceKm = null;&#10;    private Double lastLat = null, lastLon = null;&#10;&#10;    private boolean locationUpdatesStarted = false;&#10;    private com.google.android.gms.location.LocationCallback locationCallback;&#10;&#10;    public DetalleEntregaFragment() {}&#10;&#10;    @Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_entrega, container, false);&#10;    }&#10;&#10;    @Override public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;    }&#10;&#10;    @Override public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        chipDistance = v.findViewById(R.id.chipDistance);&#10;        btnIniciarRuta = v.findViewById(R.id.btnIniciarRuta);&#10;        btnEntregado = v.findViewById(R.id.btnMarcarEntregado);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        rvTimeline.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        trackingAdapter = new TrackingAdapter();&#10;        rvTimeline.setAdapter(trackingAdapter);&#10;&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map_container_entrega);&#10;        if (mapFragment == null) {&#10;            mapFragment = SupportMapFragment.newInstance();&#10;            getChildFragmentManager().beginTransaction().replace(R.id.map_container_entrega, mapFragment).commit();&#10;        }&#10;        mapFragment.getMapAsync(this);&#10;&#10;        btnIniciarRuta.setOnClickListener(v1 -&gt; iniciarRuta());&#10;        btnEntregado.setOnClickListener(v12 -&gt; marcarEntregado());&#10;&#10;        cargar();&#10;    }&#10;&#10;    private void cargar() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;                if (a == null) { runOnUi(() -&gt; toast(&quot;Asignación no encontrada&quot;)); return; }&#10;                solicitudId = a.solicitudId;&#10;                estadoAsignacion = a.estado;&#10;&#10;                Solicitud s = db.solicitudDao().byId(solicitudId);&#10;                if (s != null) { destinoLat = s.lat; destinoLon = s.lon; }&#10;&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(&quot;Entrega #&quot; + asignacionId);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    refreshTimeline();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void refreshTimeline() {&#10;        if (solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (ev, eta) -&gt; {&#10;            if (trackingAdapter != null) trackingAdapter.submit(ev);&#10;            if (eta != null &amp;&amp; eta.eta != null) {&#10;                lastEtaIso = eta.eta;&#10;                tvEta.setText(&quot;ETA: &quot; + eta.eta);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void iniciarRuta() {&#10;        if (estadoAsignacion.startsWith(&quot;OUT_FOR_DELIVERY&quot;)) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().marcarOutForDelivery(asignacionId);&#10;                db.solicitudDao().marcarEnRutaEntrega(solicitudId);&#10;                estadoAsignacion = &quot;OUT_FOR_DELIVERY&quot;;&#10;                // Evento&#10;                tracking.logEvent(solicitudId, &quot;OUT_FOR_DELIVERY&quot;, &quot;Repartidor en ruta&quot;, null, null, null);&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Ruta iniciada&quot;);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    startLocationUpdates();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void marcarEntregado() {&#10;        if (!&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) &amp;&amp; !&quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) return;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar entrega&quot;)&#10;                .setMessage(&quot;¿Marcar como ENTREGADO?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                    try {&#10;                        AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                        db.asignacionDao().marcarEntregada(asignacionId);&#10;                        db.solicitudDao().marcarEntregada(solicitudId);&#10;                        tracking.logEvent(solicitudId, &quot;DELIVERED&quot;, &quot;Entrega confirmada&quot;, null, null, null);&#10;                        estadoAsignacion = &quot;DELIVERED&quot;;&#10;                        runOnUi(() -&gt; {&#10;                            toast(&quot;Entregado&quot;);&#10;                            tvEstado.setText(estadoAsignacion);&#10;                            stopLocationUpdates();&#10;                            actualizarBotones();&#10;                        });&#10;                    } catch (Exception ex) {&#10;                        runOnUi(() -&gt; toast(&quot;Error: &quot; + ex.getMessage()));&#10;                    }&#10;                }))&#10;                .show();&#10;    }&#10;&#10;    private void actualizarBotones() {&#10;        boolean delivered = &quot;DELIVERED&quot;.equals(estadoAsignacion);&#10;        boolean out = &quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion);&#10;        btnIniciarRuta.setEnabled(!delivered &amp;&amp; !out);&#10;        btnEntregado.setEnabled(out || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion));&#10;        float a1 = btnIniciarRuta.isEnabled()?1f:0.4f; btnIniciarRuta.setAlpha(a1);&#10;        float a2 = btnEntregado.isEnabled()?1f:0.4f; btnEntregado.setAlpha(a2);&#10;    }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        gmap = googleMap;&#10;        gmap.getUiSettings().setZoomControlsEnabled(true);&#10;        addDestinoMarker();&#10;        if (&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion)) startLocationUpdates();&#10;    }&#10;&#10;    private void addDestinoMarker() {&#10;        if (gmap == null || destinoLat == null || destinoLon == null) return;&#10;        if (markerDestino == null) {&#10;            markerDestino = gmap.addMarker(new MarkerOptions().position(new LatLng(destinoLat, destinoLon)).title(&quot;Destino&quot;));&#10;        }&#10;    }&#10;&#10;    private void startLocationUpdates() {&#10;        if (locationUpdatesStarted) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        locationCallback = new com.google.android.gms.location.LocationCallback() {&#10;            @Override public void onLocationResult(@NonNull com.google.android.gms.location.LocationResult result) {&#10;                if (result.getLastLocation()==null) return;&#10;                double lat = result.getLastLocation().getLatitude();&#10;                double lon = result.getLastLocation().getLongitude();&#10;                lastLat = lat; lastLon = lon;&#10;                updateCourierMarker(new LatLng(lat, lon));&#10;                recalcEta(lat, lon);&#10;            }&#10;        };&#10;        com.google.android.gms.location.LocationRequest req = new com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_BALANCED_POWER_ACCURACY, 15000)&#10;                .setMinUpdateIntervalMillis(8000)&#10;                .build();&#10;        fused.requestLocationUpdates(req, locationCallback, requireActivity().getMainLooper());&#10;        locationUpdatesStarted = true;&#10;    }ayu&#10;&#10;    private void stopLocationUpdates() {&#10;        if (!locationUpdatesStarted || locationCallback==null) return;&#10;        fused.removeLocationUpdates(locationCallback);&#10;        locationUpdatesStarted = false;&#10;    }&#10;&#10;    private void updateCourierMarker(LatLng p) {&#10;        if (gmap == null) return;&#10;        if (markerCourier == null) {&#10;            markerCourier = gmap.addMarker(new MarkerOptions().position(p).title(&quot;Repartidor&quot;).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));&#10;            gmap.animateCamera(CameraUpdateFactory.newLatLngZoom(p, 15f));&#10;        } else {&#10;            markerCourier.setPosition(p);&#10;        }&#10;    }&#10;&#10;    private void recalcEta(double olat, double olon) {&#10;        if (destinoLat == null || destinoLon == null) return;&#10;        double km;&#10;        try { km = TrackingService.haversine(olat, olon, destinoLat, destinoLon); } catch (Exception e) { km = 5; }&#10;        if (km &lt; 0) km = 0;&#10;        lastDistanceKm = km;&#10;        if (km &lt;= 0.05) {&#10;            tvEta.setText(&quot;ETA: Arribo&quot;);&#10;            chipDistance.setText(&quot;&lt;50m&quot;);&#10;            return;&#10;        }&#10;        String etaIso = TrackingService.calcEtaIso(Math.max(0.3, km), 25);&#10;        lastEtaIso = etaIso;&#10;        String distStr = km &gt;=1 ? String.format(Locale.getDefault(),&quot;%.1f km&quot;, km) : ((int)Math.round(km*1000))+&quot; m&quot;;&#10;        tvEta.setText(&quot;ETA: &quot; + shortTime(etaIso) + &quot; (&quot; + distStr + &quot;)&quot;);&#10;        chipDistance.setText(distStr);&#10;    }&#10;&#10;    private String shortTime(String iso) {&#10;        if (iso == null) return &quot;—&quot;;&#10;        try {&#10;            SimpleDateFormat in = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;, Locale.getDefault());&#10;            Date d = in.parse(iso);&#10;            if (d == null) return iso;&#10;            return android.text.format.DateFormat.getTimeFormat(requireContext()).format(d);&#10;        } catch (Exception e) { return iso; }&#10;    }&#10;&#10;    private void runOnUi(Runnable r){ if(!isAdded())return; requireActivity().runOnUiThread(r);}    private void toast(String s){ if(!isAdded())return; Toast.makeText(requireContext(), s, Toast.LENGTH_SHORT).show(); }&#10;&#10;    @Override public void onPause(){ super.onPause(); stopLocationUpdates(); }&#10;    @Override public void onDestroyView(){ stopLocationUpdates(); gmap=null; super.onDestroyView(); }&#10;}&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.pm.PackageManager;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.gms.maps.model.MapStyleOptions;&#10;import com.google.android.gms.maps.model.Polyline;&#10;import com.google.android.gms.maps.model.PolylineOptions;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.chip.Chip;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.Request;&#10;import okhttp3.Response;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;import com.hfad.encomiendas.BuildConfig;&#10;&#10;public class DetalleEntregaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;    private int asignacionId;&#10;&#10;    private TextView tvTitulo, tvEstado, tvEta;&#10;    private Chip chipDistance;&#10;    private MaterialButton btnIniciarRuta, btnEntregado;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;&#10;    private TrackingService tracking;&#10;    private FusedLocationProviderClient fused;&#10;&#10;    private GoogleMap gmap;&#10;    private Marker markerCourier, markerDestino;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat, destinoLon;&#10;    private String estadoAsignacion = &quot;&quot;;&#10;&#10;    private String lastEtaIso = null;&#10;    private Double lastDistanceKm = null;&#10;    private Double lastLat = null, lastLon = null;&#10;&#10;    private boolean locationUpdatesStarted = false;&#10;    private com.google.android.gms.location.LocationCallback locationCallback;&#10;&#10;    // --- Campos añadidos para ruta/estilo ---&#10;    private Polyline rutaPolyline;&#10;    private java.util.List&lt;Polyline&gt; routeSegments = new java.util.ArrayList&lt;&gt;();&#10;    private boolean directionsRequested = false;&#10;    private Double lastRouteOriginLat = null, lastRouteOriginLon = null;&#10;    private long lastCameraFollow = 0L;&#10;    private static final long CAMERA_FOLLOW_INTERVAL_MS = 5000L;&#10;    private static final double ROUTE_REFRESH_MIN_MOVEMENT_KM = 0.5; // 500 m&#10;    private static final double CLOSE_DISTANCE_KM = 0.2; // 200 m&#10;    private boolean markerCloseApplied = false;&#10;    private final OkHttpClient httpClient = new OkHttpClient();&#10;&#10;    public DetalleEntregaFragment() {}&#10;&#10;    @Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_entrega, container, false);&#10;    }&#10;&#10;    @Override public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;    }&#10;&#10;    @Override public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        chipDistance = v.findViewById(R.id.chipDistance);&#10;        btnIniciarRuta = v.findViewById(R.id.btnIniciarRuta);&#10;        btnEntregado = v.findViewById(R.id.btnMarcarEntregado);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        rvTimeline.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        trackingAdapter = new TrackingAdapter();&#10;        rvTimeline.setAdapter(trackingAdapter);&#10;&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map_container_entrega);&#10;        if (mapFragment == null) {&#10;            mapFragment = SupportMapFragment.newInstance();&#10;            getChildFragmentManager().beginTransaction().replace(R.id.map_container_entrega, mapFragment).commit();&#10;        }&#10;        mapFragment.getMapAsync(this);&#10;&#10;        btnIniciarRuta.setOnClickListener(v1 -&gt; iniciarRuta());&#10;        btnEntregado.setOnClickListener(v12 -&gt; marcarEntregado());&#10;&#10;        cargar();&#10;    }&#10;&#10;    private void cargar() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                // Recuperar asignación principal&#10;                com.hfad.encomiendas.data.Asignacion a = db.asignacionDao().getById(asignacionId);&#10;                if (a != null) {&#10;                    solicitudId = a.solicitudId;&#10;                    estadoAsignacion = a.estado != null ? a.estado : &quot;&quot;;&#10;                }&#10;                // Recuperar solicitud para coords&#10;                if (solicitudId &gt; 0) {&#10;                    Solicitud s = db.solicitudDao().byId(solicitudId);&#10;                    if (s != null) { destinoLat = s.lat; destinoLon = s.lon; }&#10;                }&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(getString(R.string.title_format, asignacionId, estadoAsignacion));&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    refreshTimeline();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void refreshTimeline() {&#10;        if (solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (ev, eta) -&gt; {&#10;            if (trackingAdapter != null) trackingAdapter.submit(ev);&#10;            if (eta != null &amp;&amp; eta.eta != null) {&#10;                lastEtaIso = eta.eta;&#10;                String shortT = shortTime(eta.eta);&#10;                tvEta.setText(getString(R.string.eta_format_only, shortT));&#10;            } else {&#10;                tvEta.setText(getString(R.string.eta_unknown));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void iniciarRuta() {&#10;        if (estadoAsignacion.startsWith(&quot;OUT_FOR_DELIVERY&quot;)) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().marcarOutForDelivery(asignacionId);&#10;                db.solicitudDao().marcarEnRutaEntrega(solicitudId);&#10;                estadoAsignacion = &quot;OUT_FOR_DELIVERY&quot;;&#10;                // Evento&#10;                tracking.logEvent(solicitudId, &quot;OUT_FOR_DELIVERY&quot;, &quot;Repartidor en ruta&quot;, null, null, null);&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Ruta iniciada&quot;);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    startLocationUpdates();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void marcarEntregado() {&#10;        if (!&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) &amp;&amp; !&quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) return;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar entrega&quot;)&#10;                .setMessage(&quot;¿Marcar como ENTREGADO?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                    try {&#10;                        AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                        db.asignacionDao().marcarEntregada(asignacionId);&#10;                        db.solicitudDao().marcarEntregada(solicitudId);&#10;                        tracking.logEvent(solicitudId, &quot;DELIVERED&quot;, &quot;Entrega confirmada&quot;, null, null, null);&#10;                        estadoAsignacion = &quot;DELIVERED&quot;;&#10;                        runOnUi(() -&gt; {&#10;                            toast(&quot;Entregado&quot;); // reutilizamos literal para evitar nuevos resources&#10;                            tvEstado.setText(estadoAsignacion);&#10;                            stopLocationUpdates();&#10;                            actualizarBotones();&#10;                        });&#10;                    } catch (Exception ex) {&#10;                        runOnUi(() -&gt; toast(&quot;Error: &quot; + ex.getMessage()));&#10;                    }&#10;                }))&#10;                .show();&#10;    }&#10;&#10;    private void actualizarBotones() {&#10;        boolean delivered = &quot;DELIVERED&quot;.equals(estadoAsignacion);&#10;        boolean out = &quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion);&#10;        btnIniciarRuta.setEnabled(!delivered &amp;&amp; !out);&#10;        btnEntregado.setEnabled(out || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion));&#10;        float a1 = btnIniciarRuta.isEnabled()?1f:0.4f; btnIniciarRuta.setAlpha(a1);&#10;        float a2 = btnEntregado.isEnabled()?1f:0.4f; btnEntregado.setAlpha(a2);&#10;    }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        gmap = googleMap;&#10;        gmap.getUiSettings().setZoomControlsEnabled(true);&#10;        gmap.getUiSettings().setCompassEnabled(true);&#10;        applyDarkStyleIfNeeded();&#10;        addDestinoMarker();&#10;        requestSingleCourierLocationAndCenter();&#10;        if (&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) startLocationUpdates();&#10;    }&#10;&#10;    // --- Estilo nocturno ---&#10;    private void applyDarkStyleIfNeeded(){&#10;        if (gmap==null) return;&#10;        int nightMask = getResources().getConfiguration().uiMode &amp; android.content.res.Configuration.UI_MODE_NIGHT_MASK;&#10;        if (nightMask == android.content.res.Configuration.UI_MODE_NIGHT_YES) {&#10;            try { gmap.setMapStyle(MapStyleOptions.loadRawResourceStyle(requireContext(), R.raw.map_dark)); } catch (Exception ignore) {}&#10;        }&#10;    }&#10;&#10;    // --- Ubicación única para centrar cámara y dibujar línea simple inicial ---&#10;    private void requestSingleCourierLocationAndCenter(){&#10;        if (fused==null || gmap==null) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        fused.getCurrentLocation(Priority.PRIORITY_BALANCED_POWER_ACCURACY, null)&#10;                .addOnSuccessListener(loc -&gt; {&#10;                    if (loc==null) return;&#10;                    double lat = loc.getLatitude(); double lon = loc.getLongitude();&#10;                    lastLat = lat; lastLon = lon;&#10;                    LatLng courier = new LatLng(lat, lon);&#10;                    updateCourierMarker(courier);&#10;                    if (destinoLat!=null &amp;&amp; destinoLon!=null){&#10;                        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;                        try {&#10;                            gmap.moveCamera(CameraUpdateFactory.newLatLngBounds(new com.google.android.gms.maps.model.LatLngBounds.Builder().include(courier).include(dest).build(), 120));&#10;                        } catch (Exception ex){&#10;                            gmap.moveCamera(CameraUpdateFactory.newLatLngZoom(courier, 15f));&#10;                        }&#10;                        updateRoutePolylineSimple(courier);&#10;                        tryFetchDirectionsIfNeeded(lat, lon); // precargar ruta si hay API KEY&#10;                    } else {&#10;                        gmap.moveCamera(CameraUpdateFactory.newLatLngZoom(courier, 15f));&#10;                    }&#10;                });&#10;    }&#10;&#10;    // --- Cámara sigue al repartidor cada cierto tiempo ---&#10;    private void followCameraIfNeeded(LatLng pos){&#10;        if (gmap==null || pos==null) return;&#10;        long now = System.currentTimeMillis();&#10;        if (now - lastCameraFollow &lt; CAMERA_FOLLOW_INTERVAL_MS) return;&#10;        lastCameraFollow = now;&#10;        float zoom = gmap.getCameraPosition()!=null? gmap.getCameraPosition().zoom : 15f;&#10;        try { gmap.animateCamera(CameraUpdateFactory.newLatLngZoom(pos, zoom)); } catch (Exception ignore) {}&#10;    }&#10;&#10;    private void startLocationUpdates() {&#10;        if (locationUpdatesStarted) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        locationCallback = new com.google.android.gms.location.LocationCallback() {&#10;            @Override public void onLocationResult(@NonNull com.google.android.gms.location.LocationResult result) {&#10;                if (result.getLastLocation()==null) return;&#10;                double lat = result.getLastLocation().getLatitude();&#10;                double lon = result.getLastLocation().getLongitude();&#10;                lastLat = lat; lastLon = lon;&#10;                LatLng p = new LatLng(lat, lon);&#10;                updateCourierMarker(p);&#10;                recalcEta(lat, lon);&#10;                tryFetchDirectionsIfNeeded(lat, lon);&#10;            }&#10;        };&#10;        com.google.android.gms.location.LocationRequest req = new com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_BALANCED_POWER_ACCURACY, 12000)&#10;                .setMinUpdateIntervalMillis(6000)&#10;                .build();&#10;        fused.requestLocationUpdates(req, locationCallback, requireActivity().getMainLooper());&#10;        locationUpdatesStarted = true;&#10;    }&#10;&#10;    private void stopLocationUpdates(){&#10;        if (!locationUpdatesStarted || fused==null || locationCallback==null) return;&#10;        try { fused.removeLocationUpdates(locationCallback); } catch (Exception ignore) {}&#10;        locationUpdatesStarted = false;&#10;        locationCallback = null;&#10;    }&#10;&#10;    private void updateCourierMarker(LatLng p) {&#10;        if (gmap == null) return;&#10;        if (markerCourier == null) {&#10;            markerCourier = gmap.addMarker(new MarkerOptions().position(p).title(&quot;Repartidor&quot;).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));&#10;        } else {&#10;            markerCourier.setPosition(p);&#10;        }&#10;        followCameraIfNeeded(p);&#10;        updateRoutePolylineSimple(p);&#10;    }&#10;&#10;    private void addDestinoMarker(){&#10;        if (gmap==null || destinoLat==null || destinoLon==null) return;&#10;        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;        if (markerDestino==null){&#10;            markerDestino = gmap.addMarker(new MarkerOptions()&#10;                    .position(dest)&#10;                    .title(getString(R.string.destination_label))&#10;                    .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED))&#10;            );&#10;        } else {&#10;            markerDestino.setPosition(dest);&#10;        }&#10;    }&#10;&#10;    // --- Línea simple mientras no haya ruta real ---&#10;    private void updateRoutePolylineSimple(LatLng courier){&#10;        if (gmap==null || destinoLat==null || destinoLon==null || courier==null) return;&#10;        if (directionsRequested) return; // ya se mostró ruta detallada&#10;        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;        if (rutaPolyline==null){&#10;            rutaPolyline = gmap.addPolyline(new PolylineOptions().add(courier, dest).color(0xFF1565C0).width(8f));&#10;        } else {&#10;            rutaPolyline.setPoints(java.util.Arrays.asList(courier, dest));&#10;        }&#10;    }&#10;&#10;    // --- Descarga ruta de Directions con gradiente ---&#10;    private void tryFetchDirectionsIfNeeded(double origenLat, double origenLon){&#10;        if (destinoLat==null || destinoLon==null) return;&#10;        String apiKey = BuildConfig.MAPS_API_KEY;&#10;        if (TextUtils.isEmpty(apiKey)) return; // sin API KEY mantenemos línea simple&#10;        double moved = (lastRouteOriginLat!=null &amp;&amp; lastRouteOriginLon!=null) ? TrackingService.haversine(lastRouteOriginLat, lastRouteOriginLon, origenLat, origenLon) : Double.MAX_VALUE;&#10;        if (directionsRequested &amp;&amp; moved &lt; ROUTE_REFRESH_MIN_MOVEMENT_KM) return;&#10;        directionsRequested = true;&#10;        lastRouteOriginLat = origenLat; lastRouteOriginLon = origenLon;&#10;        final String url = &quot;https://maps.googleapis.com/maps/api/directions/json?origin=&quot;+origenLat+&quot;,&quot;+origenLon+&quot;&amp;destination=&quot;+destinoLat+&quot;,&quot;+destinoLon+&quot;&amp;mode=driving&amp;key=&quot;+apiKey;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                Request rq = new Request.Builder().url(url).build();&#10;                try (Response resp = httpClient.newCall(rq).execute()) {&#10;                    if (!resp.isSuccessful()) throw new RuntimeException(&quot;HTTP &quot;+resp.code());&#10;                    String body = resp.body()!=null? resp.body().string():null;&#10;                    if (body==null) throw new RuntimeException(&quot;Sin body&quot;);&#10;                    JSONObject json = new JSONObject(body);&#10;                    JSONArray routes = json.optJSONArray(&quot;routes&quot;);&#10;                    if (routes!=null &amp;&amp; routes.length()&gt;0){&#10;                        JSONObject r0 = routes.getJSONObject(0);&#10;                        JSONObject overview = r0.optJSONObject(&quot;overview_polyline&quot;);&#10;                        if (overview!=null){&#10;                            String pts = overview.optString(&quot;points&quot;);&#10;                            java.util.List&lt;LatLng&gt; decoded = decodePoly(pts);&#10;                            runOnUi(() -&gt; drawGradientRoute(decoded));&#10;                        }&#10;                    }&#10;                }&#10;            } catch (Exception ex){&#10;                runOnUi(() -&gt; directionsRequested = false); // permitir reintento&#10;            }&#10;        });&#10;    }&#10;&#10;    private void clearRouteSegments(){&#10;        for (Polyline p : routeSegments) try { p.remove(); } catch (Exception ignore) {}&#10;        routeSegments.clear();&#10;        if (rutaPolyline!=null){ try { rutaPolyline.remove(); } catch (Exception ignore) {} rutaPolyline=null; }&#10;    }&#10;&#10;    private void drawGradientRoute(java.util.List&lt;LatLng&gt; points){&#10;        if (gmap==null || points==null || points.size()&lt;2) return;&#10;        clearRouteSegments();&#10;        int maxPts=120;&#10;        if (points.size()&gt;maxPts){&#10;            java.util.List&lt;LatLng&gt; reduced = new java.util.ArrayList&lt;&gt;();&#10;            double step = (double)(points.size()-1)/(maxPts-1);&#10;            for (int i=0;i&lt;maxPts;i++) reduced.add(points.get((int)Math.round(i*step)));&#10;            points = reduced;&#10;        }&#10;        int n = points.size();&#10;        int startColor=0xFF1565C0, endColor=0xFF2E7D32;&#10;        for (int i=0;i&lt;n-1;i++){&#10;            LatLng a = points.get(i), b = points.get(i+1);&#10;            float f = (float)i/(float)(n-2);&#10;            int c = interpolateColor(startColor, endColor, f);&#10;            Polyline seg = gmap.addPolyline(new PolylineOptions().add(a,b).color(c).width(12f).zIndex(10f));&#10;            routeSegments.add(seg);&#10;        }&#10;    }&#10;&#10;    private int interpolateColor(int c1, int c2, float f){&#10;        int a1=(c1&gt;&gt;24)&amp;0xFF,r1=(c1&gt;&gt;16)&amp;0xFF,g1=(c1&gt;&gt;8)&amp;0xFF,b1=c1&amp;0xFF;&#10;        int a2=(c2&gt;&gt;24)&amp;0xFF,r2=(c2&gt;&gt;16)&amp;0xFF,g2=(c2&gt;&gt;8)&amp;0xFF,b2=c2&amp;0xFF;&#10;        int a=(int)(a1+(a2-a1)*f), r=(int)(r1+(r2-r1)*f), g=(int)(g1+(g2-g1)*f), b=(int)(b1+(b2-b1)*f);&#10;        return (a&lt;&lt;24)|(r&lt;&lt;16)|(g&lt;&lt;8)|b;&#10;    }&#10;&#10;    private java.util.List&lt;LatLng&gt; decodePoly(String encoded){&#10;        java.util.List&lt;LatLng&gt; poly = new java.util.ArrayList&lt;&gt;();&#10;        if (encoded==null) return poly;&#10;        int len=encoded.length(), index=0, lat=0, lng=0;&#10;        while (index &lt; len){&#10;            int b, shift=0, result=0;&#10;            do { b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20 &amp;&amp; index &lt; len);&#10;            int dlat = ((result &amp; 1)!=0 ? ~(result&gt;&gt;1) : (result&gt;&gt;1)); lat += dlat;&#10;            shift=0; result=0;&#10;            do { if (index&gt;=len) break; b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20 &amp;&amp; index &lt; len);&#10;            int dlng = ((result &amp; 1)!=0 ? ~(result&gt;&gt;1) : (result&gt;&gt;1)); lng += dlng;&#10;            double latD = lat/1E5; double lonD = lng/1E5; poly.add(new LatLng(latD, lonD));&#10;        }&#10;        return poly;&#10;    }&#10;&#10;    // === Método ETA restaurado ===&#10;    private void recalcEta(double olat, double olon) {&#10;        if (destinoLat == null || destinoLon == null) return;&#10;        double km;&#10;        try { km = TrackingService.haversine(olat, olon, destinoLat, destinoLon); } catch (Exception e) { km = 5; }&#10;        if (km &lt; 0) km = 0;&#10;        lastDistanceKm = km;&#10;        boolean isClose = km &lt;= CLOSE_DISTANCE_KM;&#10;        if (markerCourier != null) {&#10;            if (isClose &amp;&amp; !markerCloseApplied) {&#10;                markerCourier.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));&#10;                markerCloseApplied = true;&#10;            } else if (!isClose &amp;&amp; markerCloseApplied) {&#10;                markerCourier.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));&#10;                markerCloseApplied = false;&#10;            }&#10;        }&#10;        if (km &lt;= 0.05) { // llegada muy cercana&#10;            if (tvEta != null)&#10;                tvEta.setText(getString(R.string.eta_format_only, getString(R.string.minutes_sub_min)));&#10;            if (chipDistance != null) chipDistance.setText(&quot;&lt;50m&quot;);&#10;            return;&#10;        }&#10;        String etaIso = TrackingService.calcEtaIso(Math.max(0.3, km), 25);&#10;        lastEtaIso = etaIso;&#10;        String etaShort = shortTime(etaIso);&#10;        java.text.DecimalFormat df = new java.text.DecimalFormat(&quot;0.0&quot;);&#10;        if (tvEta != null)&#10;            tvEta.setText(getString(R.string.eta_with_distance_format, etaShort, df.format(km)));&#10;        if (chipDistance != null) {&#10;            if (km &gt;= 1) chipDistance.setText(String.format(Locale.getDefault(), &quot;%.1f km&quot;, km));&#10;            else chipDistance.setText(String.format(Locale.getDefault(), &quot;%d m&quot;, (int) Math.round(km * 1000)));&#10;        }&#10;    }&#10;&#10;    private String shortTime(String iso) {&#10;        if (iso == null) return &quot;—&quot;;&#10;        try {&#10;            SimpleDateFormat in = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;, Locale.getDefault());&#10;            Date d = in.parse(iso);&#10;            if (d == null) return iso;&#10;            return android.text.format.DateFormat.getTimeFormat(requireContext()).format(d);&#10;        } catch (Exception e) {&#10;            return iso;&#10;        }&#10;    }&#10;&#10;    // Helpers UI restaurados&#10;    private void runOnUi(Runnable r){ if(!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;    private void toast(String s){ if(!isAdded()) return; Toast.makeText(requireContext(), s, Toast.LENGTH_SHORT).show(); }&#10;&#10;    @Override public void onPause(){ super.onPause(); stopLocationUpdates(); }&#10;    @Override public void onDestroyView(){ stopLocationUpdates(); gmap=null; super.onDestroyView(); }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleRecoleccionFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleRecoleccionFragment.java" />
              <option name="originalContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.pm.PackageManager;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.os.Environment;&#10;import android.text.TextUtils;&#10;import android.util.Base64;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.core.content.FileProvider;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Asignacion;&#10;import com.hfad.encomiendas.data.AsignacionDao;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;import com.hfad.encomiendas.ui.widgets.SignatureView;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;&#10;public class DetalleRecoleccionFragment extends Fragment {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;&#10;    private int asignacionId;&#10;&#10;    // UI encabezado&#10;    private TextView tvTitulo, tvSub, tvEstado;&#10;&#10;    // UI seguimiento (US-08)&#10;    private TextView tvEta;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;    private TrackingService tracking;&#10;&#10;    // UI foto / firma&#10;    private ImageView ivFoto;&#10;    private MaterialButton btnTomarFoto, btnEditarFoto, btnConfirmarFoto, btnSoloEditar;&#10;    private View llEditarConfirmar, llSoloEditar;&#10;&#10;    private ImageView ivFirmaPreview;&#10;    private SignatureView signView;&#10;    private MaterialButton btnGuardarFirma, btnLimpiar;&#10;&#10;    // Estado&#10;    private boolean guiaActiva = false;&#10;    private Integer ordenRuta = null;&#10;    private String estado = &quot;&quot;;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat = null, destinoLon = null; // opcional si tu Solicitud tiene coords&#10;&#10;    // Foto&#10;    private Uri pendingPhotoUri = null;    // tomada pero no confirmada&#10;    private String savedPhotoUri = null;   // confirmada (DB)&#10;&#10;    // Firma&#10;    private String firmaB64 = null;&#10;&#10;    // Permisos/cámara&#10;    private ActivityResultLauncher&lt;String&gt; reqPermission;&#10;    private ActivityResultLauncher&lt;Uri&gt; takePicture;&#10;&#10;    // Ubicación&#10;    private FusedLocationProviderClient fused;&#10;&#10;    public DetalleRecoleccionFragment() {}&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_recoleccion, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;&#10;        reqPermission = registerForActivityResult(&#10;                new ActivityResultContracts.RequestPermission(),&#10;                granted -&gt; { if (granted) lanzarCamara(); else toast(&quot;Permiso de cámara denegado&quot;); }&#10;        );&#10;&#10;        takePicture = registerForActivityResult(new ActivityResultContracts.TakePicture(), ok -&gt; {&#10;            if (ok &amp;&amp; pendingPhotoUri != null) {&#10;                ivFoto.setImageURI(pendingPhotoUri);&#10;                updatePhotoButtons();&#10;            } else {&#10;                pendingPhotoUri = null;&#10;                toast(&quot;No se tomó la foto&quot;);&#10;                updatePhotoButtons();&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;&#10;        // Encabezado&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvSub    = v.findViewById(R.id.tvSub);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;&#10;        // Seguimiento (ETA + timeline)&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        if (rvTimeline != null) {&#10;            rvTimeline.setLayoutManager(new LinearLayoutManager(getContext()));&#10;            trackingAdapter = new TrackingAdapter();&#10;            rvTimeline.setAdapter(trackingAdapter);&#10;        }&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        // Foto&#10;        ivFoto = v.findViewById(R.id.ivFoto);&#10;        btnTomarFoto      = v.findViewById(R.id.btnTomarFoto);&#10;        llEditarConfirmar = v.findViewById(R.id.llEditarConfirmar);&#10;        btnEditarFoto     = v.findViewById(R.id.btnEditarFoto);&#10;        btnConfirmarFoto  = v.findViewById(R.id.btnConfirmarFoto);&#10;        llSoloEditar      = v.findViewById(R.id.llSoloEditar);&#10;        btnSoloEditar     = v.findViewById(R.id.btnSoloEditar);&#10;&#10;        // Firma&#10;        ivFirmaPreview  = v.findViewById(R.id.ivFirmaPreview);&#10;        signView        = v.findViewById(R.id.signView);&#10;        btnGuardarFirma = v.findViewById(R.id.btnGuardarFirma);&#10;        btnLimpiar      = v.findViewById(R.id.btnLimpiar);&#10;&#10;        // Listeners&#10;        ivFoto.setOnClickListener(view -&gt; showPreview());&#10;        btnTomarFoto.setOnClickListener(view -&gt; onTomarFoto());&#10;        btnEditarFoto.setOnClickListener(view -&gt; onTomarFoto());&#10;        btnSoloEditar.setOnClickListener(view -&gt; onTomarFoto());&#10;        btnEditarFoto.setOnLongClickListener(v1 -&gt; { borrarFoto(); return true; });&#10;        btnSoloEditar.setOnLongClickListener(v12 -&gt; { borrarFoto(); return true; });&#10;        btnGuardarFirma.setOnClickListener(view -&gt; onGuardarFirma());&#10;        btnLimpiar.setOnClickListener(view -&gt; signView.clear());&#10;        btnConfirmarFoto.setOnClickListener(view -&gt; onConfirmarFoto());&#10;&#10;        cargarDetalle();&#10;    }&#10;&#10;    /* ================== Carga de datos ================== */&#10;    private void cargarDetalle() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                AsignacionDao.AsignacionDetalle d = db.asignacionDao().getDetalleById(asignacionId);&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;&#10;                ordenRuta  = (d != null) ? d.ordenRuta : null;&#10;                estado     = (a != null &amp;&amp; !TextUtils.isEmpty(a.estado)) ? a.estado : &quot;—&quot;;&#10;                guiaActiva = (a != null &amp;&amp; a.guiaActiva);&#10;&#10;                savedPhotoUri = (a != null) ? a.evidenciaFotoUri : null;&#10;                pendingPhotoUri = (savedPhotoUri == null) ? null : Uri.parse(savedPhotoUri);&#10;                firmaB64 = (a != null) ? a.firmaBase64 : null;&#10;&#10;                // Resolver solicitudId y (opcional) coords destino&#10;                solicitudId = -1;&#10;                if (a != null &amp;&amp; a.solicitudId &gt; 0) {&#10;                    solicitudId = a.solicitudId;&#10;                } else {&#10;                    try {&#10;                        Solicitud sX = db.solicitudDao().byAsignacionId(asignacionId);&#10;                        if (sX != null) solicitudId = sX.id;&#10;                    } catch (Exception ignore) {}&#10;                }&#10;&#10;                Solicitud s = null;&#10;                if (solicitudId &gt; 0) {&#10;                    s = db.solicitudDao().byId(solicitudId);&#10;                }&#10;                if (s != null) {&#10;                    try { destinoLat = s.lat; destinoLon = s.lon; } catch (Throwable ignore) {}&#10;                }&#10;&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(&quot;#&quot; + asignacionId + &quot; • &quot; + estado);&#10;                    tvSub.setText(&quot;Orden: &quot; + (ordenRuta == null ? &quot;—&quot; : ordenRuta));&#10;                    tvEstado.setText(guiaActiva ? &quot;GUÍA ACTIVADA (RECOLECTADA)&quot; : &quot;&quot;);&#10;&#10;                    if (!TextUtils.isEmpty(savedPhotoUri)) {&#10;                        try { ivFoto.setImageURI(Uri.parse(savedPhotoUri)); } catch (Exception ignore) {}&#10;                    }&#10;&#10;                    updatePhotoButtons();&#10;                    updateSignatureSection();&#10;                    updateUiEnabled();&#10;&#10;                    refreshTimelineAndEta();&#10;                });&#10;&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error cargando: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    /* ================== Seguimiento (US-08) ================== */&#10;    private void refreshTimelineAndEta() {&#10;        if (tracking == null || solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (events, eta) -&gt; {&#10;            if (tvEta != null) tvEta.setText(&quot;ETA: &quot; + (eta != null &amp;&amp; eta.eta != null ? eta.eta : &quot;—&quot;));&#10;            if (trackingAdapter != null) trackingAdapter.submit(events);&#10;        });&#10;    }&#10;&#10;    /* ================== Foto ================== */&#10;    private void onTomarFoto() {&#10;        if (guiaActiva) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.CAMERA)&#10;                != PackageManager.PERMISSION_GRANTED) {&#10;            reqPermission.launch(Manifest.permission.CAMERA);&#10;        } else {&#10;            lanzarCamara();&#10;        }&#10;    }&#10;&#10;    private void lanzarCamara() {&#10;        try {&#10;            File dir = requireContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES);&#10;            if (dir == null) dir = requireContext().getFilesDir();&#10;            String ts = new SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.getDefault()).format(new Date());&#10;            File photo = new File(dir, &quot;evid_&quot; + asignacionId + &quot;_&quot; + ts + &quot;.jpg&quot;);&#10;            if (!photo.exists()) photo.createNewFile();&#10;&#10;            pendingPhotoUri = FileProvider.getUriForFile(&#10;                    requireContext(),&#10;                    BuildConfig.APPLICATION_ID + &quot;.fileprovider&quot;,&#10;                    photo&#10;            );&#10;            takePicture.launch(pendingPhotoUri);&#10;        } catch (IOException e) {&#10;            toast(&quot;No se pudo crear la foto: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void onConfirmarFoto() {&#10;        if (pendingPhotoUri == null) { toast(&quot;Toma una foto primero&quot;); return; }&#10;        savedPhotoUri = pendingPhotoUri.toString();&#10;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase.getInstance(requireContext())&#10;                        .asignacionDao().guardarFoto(asignacionId, savedPhotoUri);&#10;&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Foto confirmada&quot;);&#10;                    updatePhotoButtons();&#10;&#10;                    // Evento con ubicación (si hay permiso)&#10;                    if (solicitudId &gt; 0) {&#10;                        logEventWithLocation(solicitudId, &quot;EVIDENCE_PHOTO&quot;, &quot;Foto confirmada&quot;,&#10;                                () -&gt; tracking.loadEvents(solicitudId, evs -&gt; {&#10;                                    if (trackingAdapter != null) trackingAdapter.submit(evs);&#10;                                }));&#10;                    }&#10;&#10;                    verificarYActivarGuia();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error guardando foto: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void borrarFoto() {&#10;        if (guiaActiva) return;&#10;        pendingPhotoUri = null;&#10;        savedPhotoUri = null;&#10;        ivFoto.setImageDrawable(null);&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase.getInstance(requireContext())&#10;                        .asignacionDao().guardarFoto(asignacionId, null);&#10;            } catch (Exception ignore) {}&#10;        });&#10;        updatePhotoButtons();&#10;    }&#10;&#10;    private void updatePhotoButtons() {&#10;        boolean hayPendiente = (pendingPhotoUri != null) &amp;&amp;&#10;                (savedPhotoUri == null || !pendingPhotoUri.toString().equals(savedPhotoUri));&#10;        boolean hayConfirmada = !TextUtils.isEmpty(savedPhotoUri);&#10;&#10;        btnTomarFoto.setVisibility((!hayPendiente &amp;&amp; !hayConfirmada) ? View.VISIBLE : View.GONE);&#10;        llEditarConfirmar.setVisibility(hayPendiente ? View.VISIBLE : View.GONE);&#10;        llSoloEditar.setVisibility((!hayPendiente &amp;&amp; hayConfirmada) ? View.VISIBLE : View.GONE);&#10;    }&#10;&#10;    private void showPreview() {&#10;        Uri toShow = (pendingPhotoUri != null) ? pendingPhotoUri :&#10;                (!TextUtils.isEmpty(savedPhotoUri) ? Uri.parse(savedPhotoUri) : null);&#10;        if (toShow == null) return;&#10;&#10;        ImageView iv = new ImageView(requireContext());&#10;        iv.setAdjustViewBounds(true);&#10;        iv.setScaleType(ImageView.ScaleType.FIT_CENTER);&#10;        iv.setImageURI(toShow);&#10;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setView(iv)&#10;                .setPositiveButton(&quot;Cerrar&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    /* ================== Firma &amp; Guía ================== */&#10;    private void onGuardarFirma() {&#10;        if (guiaActiva) return;&#10;        if (signView.isEmpty()) { toast(&quot;Dibuja la firma primero&quot;); return; }&#10;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar firma&quot;)&#10;                .setMessage(&quot;¿Deseas guardar esta firma como evidencia de recolección?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Guardar&quot;, (d, w) -&gt; guardarFirmaDefinitiva())&#10;                .show();&#10;    }&#10;&#10;    private void guardarFirmaDefinitiva() {&#10;        final String b64 = signView.getBitmapBase64();&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().guardarFirma(asignacionId, b64);&#10;                runOnUi(() -&gt; {&#10;                    firmaB64 = b64;&#10;                    toast(&quot;Firma guardada&quot;);&#10;                    updateSignatureSection();&#10;&#10;                    // Evento con ubicación (si hay permiso)&#10;                    if (solicitudId &gt; 0) {&#10;                        logEventWithLocation(solicitudId, &quot;SIGNATURE_SAVED&quot;, &quot;Firma guardada&quot;,&#10;                                () -&gt; tracking.loadEvents(solicitudId, evs -&gt; {&#10;                                    if (trackingAdapter != null) trackingAdapter.submit(evs);&#10;                                }));&#10;                    }&#10;                });&#10;                verificarYActivarGuia();&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error guardando firma: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void verificarYActivarGuia() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;&#10;                boolean hayFoto  = (a != null &amp;&amp; !TextUtils.isEmpty(a.evidenciaFotoUri));&#10;                boolean hayFirma = (a != null &amp;&amp; !TextUtils.isEmpty(a.firmaBase64));&#10;                if (hayFoto &amp;&amp; hayFirma &amp;&amp; (a != null) &amp;&amp; !a.guiaActiva) {&#10;                    runOnUi(() -&gt; new AlertDialog.Builder(requireContext())&#10;                            .setTitle(&quot;Activar guía&quot;)&#10;                            .setMessage(&quot;Se detectó foto y firma. ¿Activar guía y marcar RECOLECTADA?&quot;)&#10;                            .setNegativeButton(&quot;No&quot;, null)&#10;                            .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                                db.asignacionDao().activarGuia(asignacionId);&#10;                                db.solicitudDao().marcarRecolectadaPorAsignacion(asignacionId);&#10;&#10;                                runOnUi(() -&gt; {&#10;                                    guiaActiva = true;&#10;                                    tvEstado.setText(&quot;GUÍA ACTIVADA (RECOLECTADA)&quot;);&#10;                                    updateUiEnabled();&#10;                                    updateSignatureSection();&#10;                                });&#10;&#10;                                long sid = solicitudId;&#10;                                if (sid &lt;= 0) {&#10;                                    Asignacion ax = db.asignacionDao().getById(asignacionId);&#10;                                    if (ax != null &amp;&amp; ax.solicitudId &gt; 0) sid = ax.solicitudId;&#10;                                    if (sid &lt;= 0) {&#10;                                        try {&#10;                                            Solicitud sx = db.solicitudDao().byAsignacionId(asignacionId);&#10;                                            if (sx != null) sid = sx.id;&#10;                                            if (sx != null) { destinoLat = sx.lat; destinoLon = sx.lon; }&#10;                                        } catch (Exception ignore) {}&#10;                                    }&#10;                                }&#10;&#10;                                if (sid &gt; 0) {&#10;                                    // Evento con ubicación&#10;                                    logEventWithLocation(sid, &quot;PICKED_UP&quot;, &quot;Guía activada y recolectada&quot;, null);&#10;&#10;                                    // ETA (cálculo local simple)&#10;                                    String etaIso;&#10;                                    if (destinoLat != null &amp;&amp; destinoLon != null) {&#10;                                        // En demo: usa mismas coords para no fallar; ajusta si tienes origen real.&#10;                                        double origenLat = destinoLat;&#10;                                        double origenLon = destinoLon;&#10;                                        double km;&#10;                                        try {&#10;                                            km = TrackingService.haversine(origenLat, origenLon, destinoLat, destinoLon);&#10;                                            if (km &lt;= 0) km = 5.0;&#10;                                        } catch (Exception ex) { km = 5.0; }&#10;                                        etaIso = TrackingService.calcEtaIso(km, 22);&#10;                                    } else {&#10;                                        etaIso = TrackingService.calcEtaIso(5.0, 20);&#10;                                    }&#10;&#10;                                    final long fsid = sid;&#10;                                    tracking.upsertEta(sid, etaIso, &quot;calc&quot;,&#10;                                            () -&gt; {&#10;                                                if (tvEta != null) tvEta.setText(&quot;ETA: &quot; + etaIso);&#10;                                                tracking.loadEvents(fsid, evs -&gt; {&#10;                                                    if (trackingAdapter != null) trackingAdapter.submit(evs);&#10;                                                });&#10;                                            });&#10;                                }&#10;                            }))&#10;                            .show());&#10;                }&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error activando guía: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    /* ================== Helper: firma UI ================== */&#10;    private void updateSignatureSection() {&#10;        boolean hasFirma = !TextUtils.isEmpty(firmaB64);&#10;&#10;        if (hasFirma) {&#10;            Bitmap bmp = decodeB64(firmaB64);&#10;            ivFirmaPreview.setImageBitmap(bmp);&#10;            ivFirmaPreview.setVisibility(View.VISIBLE);&#10;&#10;            signView.setVisibility(View.GONE);&#10;            btnGuardarFirma.setVisibility(View.GONE);&#10;            btnLimpiar.setVisibility(View.GONE);&#10;        } else {&#10;            ivFirmaPreview.setVisibility(View.GONE);&#10;&#10;            signView.setVisibility(View.VISIBLE);&#10;            btnGuardarFirma.setVisibility(View.VISIBLE);&#10;            btnLimpiar.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        boolean enableDrawing = !guiaActiva &amp;&amp; !hasFirma;&#10;        signView.setEnabled(enableDrawing);&#10;        btnGuardarFirma.setEnabled(enableDrawing);&#10;        btnLimpiar.setEnabled(enableDrawing);&#10;        float a = enableDrawing ? 1f : 0.5f;&#10;        signView.setAlpha(a); btnGuardarFirma.setAlpha(a); btnLimpiar.setAlpha(a);&#10;    }&#10;&#10;    private Bitmap decodeB64(String b64) {&#10;        try {&#10;            byte[] data = Base64.decode(b64, Base64.DEFAULT);&#10;            return BitmapFactory.decodeByteArray(data, 0, data.length);&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private void updateUiEnabled() {&#10;        boolean enabled = !guiaActiva;&#10;&#10;        ivFoto.setClickable(true);&#10;        btnTomarFoto.setEnabled(enabled);&#10;        btnEditarFoto.setEnabled(enabled);&#10;        btnConfirmarFoto.setEnabled(enabled);&#10;        btnSoloEditar.setEnabled(enabled);&#10;&#10;        float alpha = enabled ? 1f : 0.5f;&#10;        btnTomarFoto.setAlpha(alpha);&#10;        btnEditarFoto.setAlpha(alpha);&#10;        btnConfirmarFoto.setAlpha(alpha);&#10;        btnSoloEditar.setAlpha(alpha);&#10;    }&#10;&#10;    /* ================== Helper: tracking con ubicación ================== */&#10;    private void logEventWithLocation(long sid, String type, String detail, @Nullable Runnable afterUi) {&#10;        if (tracking == null) return;&#10;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION)&#10;                == PackageManager.PERMISSION_GRANTED) {&#10;            fused.getCurrentLocation(Priority.PRIORITY_BALANCED_POWER_ACCURACY, null)&#10;                    .addOnSuccessListener(loc -&gt; {&#10;                        Double lat = (loc != null) ? loc.getLatitude() : null;&#10;                        Double lon = (loc != null) ? loc.getLongitude() : null;&#10;                        tracking.logEvent(sid, type, detail, lat, lon,&#10;                                () -&gt; { if (afterUi != null) runOnUi(afterUi); });&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        tracking.logEvent(sid, type, detail, null, null,&#10;                                () -&gt; { if (afterUi != null) runOnUi(afterUi); });&#10;                    });&#10;        } else {&#10;            // sin permiso → registramos sin coordenadas&#10;            tracking.logEvent(sid, type, detail, null, null,&#10;                    () -&gt; { if (afterUi != null) runOnUi(afterUi); });&#10;        }&#10;    }&#10;&#10;    /* ================== Utiles ================== */&#10;    private void runOnUi(Runnable r) { if (!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;    private void toast(String s) { if (!isAdded()) return; Toast.makeText(requireContext(), s, Toast.LENGTH_SHORT).show(); }&#10;}&#10;" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.ActivityNotFoundException;&#10;import android.content.Intent;&#10;import android.content.pm.PackageManager;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.location.LocationManager;&#10;import android.net.Uri;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.os.Environment;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.provider.Settings;&#10;import android.text.TextUtils;&#10;import android.util.Base64;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.core.content.FileProvider;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.navigation.fragment.NavHostFragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.gms.maps.MapView;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.gms.maps.model.Polyline;&#10;import com.google.android.gms.maps.model.PolylineOptions;&#10;import com.hfad.encomiendas.BuildConfig; // para MAPS_API_KEY&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.io.InputStream;&#10;import java.io.BufferedReader;&#10;import java.io.InputStreamReader;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Asignacion;&#10;import com.hfad.encomiendas.data.AsignacionDao;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.data.TrackingEventDao; // para LastLoc&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;import com.hfad.encomiendas.ui.widgets.SignatureView;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;&#10;public class DetalleRecoleccionFragment extends Fragment {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;&#10;    private int asignacionId;&#10;&#10;    // UI encabezado&#10;    private TextView tvTitulo, tvSub, tvEstado;&#10;&#10;    // UI seguimiento (US-08)&#10;    private TextView tvEta;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;    private TrackingService tracking;&#10;&#10;    // UI foto / firma&#10;    private ImageView ivFoto;&#10;    private MaterialButton btnTomarFoto, btnEditarFoto, btnConfirmarFoto, btnSoloEditar;&#10;    private View llEditarConfirmar, llSoloEditar;&#10;&#10;    private ImageView ivFirmaPreview;&#10;    private SignatureView signView;&#10;    private MaterialButton btnGuardarFirma, btnLimpiar;&#10;&#10;    // Mapa recolector&#10;    private MapView mapViewRecolector;&#10;    private GoogleMap googleMap;&#10;    private Marker markerRecolector;&#10;    private Marker markerDestino;&#10;    private Double lastRecolectorLat = null, lastRecolectorLon = null;&#10;    private Handler mapHandler = new Handler(Looper.getMainLooper());&#10;    private final long MAP_REFRESH_MS = 30_000; // 30s&#10;    private final Runnable mapRefreshTask = new Runnable() {&#10;        @Override public void run() {&#10;            cargarUltimaUbicacionRecolector(false);&#10;            mapHandler.postDelayed(this, MAP_REFRESH_MS);&#10;        }&#10;    };&#10;&#10;    // Estado&#10;    private boolean guiaActiva = false;&#10;    private Integer ordenRuta = null;&#10;    private String estado = &quot;&quot;;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat = null, destinoLon = null; // opcional si tu Solicitud tiene coords&#10;&#10;    // Foto&#10;    private Uri pendingPhotoUri = null;    // tomada pero no confirmada&#10;    private String savedPhotoUri = null;   // confirmada (DB)&#10;&#10;    // Firma&#10;    private String firmaB64 = null;&#10;&#10;    // Permisos/cámara&#10;    private ActivityResultLauncher&lt;String&gt; reqPermission;&#10;    private ActivityResultLauncher&lt;Uri&gt; takePicture;&#10;&#10;    // Ubicación&#10;    private FusedLocationProviderClient fused;&#10;&#10;    // --- Ruta ---&#10;    private Polyline routePolyline;&#10;    private boolean routeRequested = false; // evita múltiples fetch seguidos&#10;    private Double routeFromLat = null, routeFromLon = null; // para detectar cambios&#10;&#10;    private static final double BOGOTA_LAT = 4.7110;&#10;    private static final double BOGOTA_LON = -74.0721;&#10;    private boolean initialCameraSet = false;&#10;&#10;    private ActivityResultLauncher&lt;String&gt; locationPermLauncher;&#10;    private ActivityResultLauncher&lt;Intent&gt; locationSettingsLauncher;&#10;    private ActivityResultLauncher&lt;String&gt; notifPermLauncher;&#10;    private Runnable pendingLocationAction; // se ejecuta tras obtener permisos y GPS activo&#10;&#10;    private boolean navigatingFullMap = false; // evita múltiples intents&#10;&#10;    public DetalleRecoleccionFragment() {}&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_recoleccion, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;&#10;        reqPermission = registerForActivityResult(&#10;                new ActivityResultContracts.RequestPermission(),&#10;                granted -&gt; { if (granted) lanzarCamara(); else toast(&quot;Permiso de cámara denegado&quot;); }&#10;        );&#10;&#10;        takePicture = registerForActivityResult(new ActivityResultContracts.TakePicture(), ok -&gt; {&#10;            if (ok &amp;&amp; pendingPhotoUri != null) {&#10;                ivFoto.setImageURI(pendingPhotoUri);&#10;                updatePhotoButtons();&#10;            } else {&#10;                pendingPhotoUri = null;&#10;                toast(&quot;No se tomó la foto&quot;);&#10;                updatePhotoButtons();&#10;            }&#10;        });&#10;&#10;        locationPermLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), granted -&gt; {&#10;            if (granted) {&#10;                if (!isLocationEnabled()) {&#10;                    promptEnableLocationServices();&#10;                } else {&#10;                    runPendingLocationAction();&#10;                }&#10;            } else {&#10;                if (shouldShowRequestPermissionRationale(Manifest.permission.ACCESS_FINE_LOCATION)) {&#10;                    showRationaleUbicacion();&#10;                } else {&#10;                    showIrAjustesAppDialog();&#10;                }&#10;            }&#10;        });&#10;        locationSettingsLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), res -&gt; {&#10;            // Al volver de ajustes GPS&#10;            if (isLocationEnabled()) runPendingLocationAction();&#10;            else toast(&quot;La ubicación sigue desactivada&quot;);&#10;        });&#10;        if (Build.VERSION.SDK_INT &gt;= 33) {&#10;            notifPermLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), granted -&gt; {&#10;                if (!granted &amp;&amp; shouldShowRequestPermissionRationale(Manifest.permission.POST_NOTIFICATIONS)) {&#10;                    new AlertDialog.Builder(requireContext())&#10;                            .setTitle(&quot;Notificaciones&quot;)&#10;                            .setMessage(&quot;Necesitas habilitar notificaciones para recibir actualizaciones. ¿Intentar de nuevo?&quot;)&#10;                            .setPositiveButton(&quot;Solicitar&quot;, (d,w)-&gt; notifPermLauncher.launch(Manifest.permission.POST_NOTIFICATIONS))&#10;                            .setNegativeButton(&quot;Ahora no&quot;, null)&#10;                            .show();&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;&#10;        // Encabezado&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvSub    = v.findViewById(R.id.tvSub);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;&#10;        // Seguimiento (ETA + timeline)&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        if (rvTimeline != null) {&#10;            rvTimeline.setLayoutManager(new LinearLayoutManager(getContext()));&#10;            trackingAdapter = new TrackingAdapter();&#10;            rvTimeline.setAdapter(trackingAdapter);&#10;        }&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        // Foto&#10;        ivFoto = v.findViewById(R.id.ivFoto);&#10;        btnTomarFoto      = v.findViewById(R.id.btnTomarFoto);&#10;        llEditarConfirmar = v.findViewById(R.id.llEditarConfirmar);&#10;        btnEditarFoto     = v.findViewById(R.id.btnEditarFoto);&#10;        btnConfirmarFoto  = v.findViewById(R.id.btnConfirmarFoto);&#10;        llSoloEditar      = v.findViewById(R.id.llSoloEditar);&#10;        btnSoloEditar     = v.findViewById(R.id.btnSoloEditar);&#10;&#10;        // Firma&#10;        ivFirmaPreview  = v.findViewById(R.id.ivFirmaPreview);&#10;        signView        = v.findViewById(R.id.signView);&#10;        btnGuardarFirma = v.findViewById(R.id.btnGuardarFirma);&#10;        btnLimpiar      = v.findViewById(R.id.btnLimpiar);&#10;&#10;        // Mapa recolector&#10;        mapViewRecolector = v.findViewById(R.id.map_recolector);&#10;        if (mapViewRecolector != null) {&#10;            mapViewRecolector.onCreate(savedInstanceState);&#10;            mapViewRecolector.getMapAsync(gMap -&gt; {&#10;                googleMap = gMap;&#10;                // Mapa mini: sin gestos ni controles para evitar scroll accidental&#10;                googleMap.getUiSettings().setAllGesturesEnabled(false);&#10;                googleMap.getUiSettings().setZoomControlsEnabled(false);&#10;                googleMap.getUiSettings().setMapToolbarEnabled(false);&#10;                // Cámara inicial Bogotá&#10;                if (!initialCameraSet) {&#10;                    googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(BOGOTA_LAT, BOGOTA_LON), 11f));&#10;                    initialCameraSet = true;&#10;                }&#10;                if (lastRecolectorLat != null &amp;&amp; lastRecolectorLon != null) {&#10;                    pintarMarcadores(true);&#10;                } else {&#10;                    cargarUltimaUbicacionRecolector(true);&#10;                    // Intentar obtener ubicación del dispositivo para trazar ruta temprana&#10;                    intentarUbicacionDispositivoComoRecolector();&#10;                }&#10;            });&#10;            // Listener sobre el propio MapView&#10;            mapViewRecolector.setOnClickListener(view -&gt; openMapaCompleto());&#10;        }&#10;        // Listener adicional sobre el contenedor para garantizar el click&#10;        View frameMapaMini = v.findViewById(R.id.frameMapaMini);&#10;        if (frameMapaMini != null) {&#10;            frameMapaMini.setOnClickListener(view -&gt; openMapaCompleto());&#10;        }&#10;&#10;        // Listeners&#10;        ivFoto.setOnClickListener(view -&gt; showPreview());&#10;        btnTomarFoto.setOnClickListener(view -&gt; onTomarFoto());&#10;        btnEditarFoto.setOnClickListener(view -&gt; onTomarFoto());&#10;        btnSoloEditar.setOnClickListener(view -&gt; onTomarFoto());&#10;        btnEditarFoto.setOnLongClickListener(v1 -&gt; { borrarFoto(); return true; });&#10;        btnSoloEditar.setOnLongClickListener(v12 -&gt; { borrarFoto(); return true; });&#10;        btnGuardarFirma.setOnClickListener(view -&gt; onGuardarFirma());&#10;        btnLimpiar.setOnClickListener(view -&gt; signView.clear());&#10;        btnConfirmarFoto.setOnClickListener(view -&gt; onConfirmarFoto());&#10;&#10;        ensureNotificationPermissionIfNeeded();&#10;&#10;        cargarDetalle();&#10;    }&#10;&#10;    private void openMapaCompleto() {&#10;        if (navigatingFullMap) return; // evitar doble click rápido&#10;        if (!isAdded()) return;&#10;        navigatingFullMap = true;&#10;        int id = asignacionId;&#10;        Toast.makeText(requireContext(), &quot;Abriendo mapa (#&quot;+id+&quot;)&quot;, Toast.LENGTH_SHORT).show();&#10;        Bundle args = new Bundle();&#10;        args.putInt(&quot;asignacionId&quot;, id);&#10;        try {&#10;            NavHostFragment.findNavController(this)&#10;                    .navigate(R.id.action_detalle_to_recoleccionMapa, args);&#10;        } catch (Exception primaryEx) {&#10;            try {&#10;                // Fallback: navegar directo al destino si la acción falla&#10;                NavHostFragment.findNavController(this)&#10;                        .navigate(R.id.recoleccionMapaFragment, args);&#10;            } catch (Exception fallbackEx) {&#10;                navigatingFullMap = false;&#10;                Toast.makeText(requireContext(), &quot;No se pudo navegar: &quot;+ fallbackEx.getMessage(), Toast.LENGTH_LONG).show();&#10;            }&#10;        }&#10;        // Liberar el flag tras un breve retraso por seguridad&#10;        mapHandler.postDelayed(() -&gt; navigatingFullMap = false, 1200);&#10;    }&#10;&#10;    /* ================== Carga de datos ================== */&#10;    private void cargarDetalle() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                AsignacionDao.AsignacionDetalle d = db.asignacionDao().getDetalleById(asignacionId);&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;&#10;                ordenRuta  = (d != null) ? d.ordenRuta : null;&#10;                estado     = (a != null &amp;&amp; !TextUtils.isEmpty(a.estado)) ? a.estado : &quot;—&quot;;&#10;                guiaActiva = (a != null &amp;&amp; a.guiaActiva);&#10;&#10;                savedPhotoUri = (a != null) ? a.evidenciaFotoUri : null;&#10;                pendingPhotoUri = (savedPhotoUri == null) ? null : Uri.parse(savedPhotoUri);&#10;                firmaB64 = (a != null) ? a.firmaBase64 : null;&#10;&#10;                // Resolver solicitudId y (opcional) coords destino&#10;                solicitudId = -1;&#10;                if (a != null &amp;&amp; a.solicitudId &gt; 0) {&#10;                    solicitudId = a.solicitudId;&#10;                } else {&#10;                    try {&#10;                        Solicitud sX = db.solicitudDao().byAsignacionId(asignacionId);&#10;                        if (sX != null) solicitudId = sX.id;&#10;                    } catch (Exception ignore) {}&#10;                }&#10;&#10;                Solicitud s = null;&#10;                if (solicitudId &gt; 0) {&#10;                    s = db.solicitudDao().byId(solicitudId);&#10;                }&#10;                if (s != null) {&#10;                    try { destinoLat = s.lat; destinoLon = s.lon; } catch (Throwable ignore) {}&#10;                }&#10;&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(&quot;#&quot; + asignacionId + &quot; • &quot; + estado);&#10;                    tvSub.setText(&quot;Orden: &quot; + (ordenRuta == null ? &quot;—&quot; : ordenRuta));&#10;                    tvEstado.setText(guiaActiva ? &quot;GUÍA ACTIVADA (RECOLECTADA)&quot; : &quot;&quot;);&#10;&#10;                    if (!TextUtils.isEmpty(savedPhotoUri)) {&#10;                        try { ivFoto.setImageURI(Uri.parse(savedPhotoUri)); } catch (Exception ignore) {}&#10;                    }&#10;&#10;                    updatePhotoButtons();&#10;                    updateSignatureSection();&#10;                    updateUiEnabled();&#10;&#10;                    refreshTimelineAndEta();&#10;                });&#10;&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error cargando: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    /* ================== Seguimiento (US-08) ================== */&#10;    private void refreshTimelineAndEta() {&#10;        if (tracking == null || solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (events, eta) -&gt; {&#10;            if (tvEta != null) tvEta.setText(&quot;ETA: &quot; + (eta != null &amp;&amp; eta.eta != null ? eta.eta : &quot;—&quot;));&#10;            if (trackingAdapter != null) trackingAdapter.submit(events);&#10;            // tras refrescar timeline, refrescamos ubicación (puede haber nuevo evento con lat/lon)&#10;            cargarUltimaUbicacionRecolector(false);&#10;        });&#10;    }&#10;&#10;    /* ================== Foto ================== */&#10;    private void onTomarFoto() {&#10;        if (guiaActiva) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.CAMERA)&#10;                != PackageManager.PERMISSION_GRANTED) {&#10;            reqPermission.launch(Manifest.permission.CAMERA);&#10;        } else {&#10;            lanzarCamara();&#10;        }&#10;    }&#10;&#10;    private void lanzarCamara() {&#10;        try {&#10;            File dir = requireContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES);&#10;            if (dir == null) dir = requireContext().getFilesDir();&#10;            String ts = new SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.getDefault()).format(new Date());&#10;            File photo = new File(dir, &quot;evid_&quot; + asignacionId + &quot;_&quot; + ts + &quot;.jpg&quot;);&#10;            if (!photo.exists()) photo.createNewFile();&#10;&#10;            pendingPhotoUri = FileProvider.getUriForFile(&#10;                    requireContext(),&#10;                    requireContext().getPackageName() + &quot;.fileprovider&quot;,&#10;                    photo&#10;            );&#10;            takePicture.launch(pendingPhotoUri);&#10;        } catch (IOException e) {&#10;            toast(&quot;No se pudo crear la foto: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void onConfirmarFoto() {&#10;        if (pendingPhotoUri == null) { toast(&quot;Toma una foto primero&quot;); return; }&#10;        savedPhotoUri = pendingPhotoUri.toString();&#10;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase.getInstance(requireContext())&#10;                        .asignacionDao().guardarFoto(asignacionId, savedPhotoUri);&#10;&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Foto confirmada&quot;);&#10;                    updatePhotoButtons();&#10;&#10;                    // Evento con ubicación (si hay permiso)&#10;                    if (solicitudId &gt; 0) {&#10;                        logEventWithLocation(solicitudId, &quot;EVIDENCE_PHOTO&quot;, &quot;Foto confirmada&quot;,&#10;                                () -&gt; tracking.loadEvents(solicitudId, evs -&gt; {&#10;                                    if (trackingAdapter != null) trackingAdapter.submit(evs);&#10;                                }));&#10;                    }&#10;&#10;                    verificarYActivarGuia();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error guardando foto: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void borrarFoto() {&#10;        if (guiaActiva) return;&#10;        pendingPhotoUri = null;&#10;        savedPhotoUri = null;&#10;        ivFoto.setImageDrawable(null);&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase.getInstance(requireContext())&#10;                        .asignacionDao().guardarFoto(asignacionId, null);&#10;            } catch (Exception ignore) {}&#10;        });&#10;        updatePhotoButtons();&#10;    }&#10;&#10;    private void updatePhotoButtons() {&#10;        boolean hayPendiente = (pendingPhotoUri != null) &amp;&amp;&#10;                (savedPhotoUri == null || !pendingPhotoUri.toString().equals(savedPhotoUri));&#10;        boolean hayConfirmada = !TextUtils.isEmpty(savedPhotoUri);&#10;&#10;        btnTomarFoto.setVisibility((!hayPendiente &amp;&amp; !hayConfirmada) ? View.VISIBLE : View.GONE);&#10;        llEditarConfirmar.setVisibility(hayPendiente ? View.VISIBLE : View.GONE);&#10;        llSoloEditar.setVisibility((!hayPendiente &amp;&amp; hayConfirmada) ? View.VISIBLE : View.GONE);&#10;    }&#10;&#10;    private void showPreview() {&#10;        Uri toShow = (pendingPhotoUri != null) ? pendingPhotoUri :&#10;                (!TextUtils.isEmpty(savedPhotoUri) ? Uri.parse(savedPhotoUri) : null);&#10;        if (toShow == null) return;&#10;&#10;        ImageView iv = new ImageView(requireContext());&#10;        iv.setAdjustViewBounds(true);&#10;        iv.setScaleType(ImageView.ScaleType.FIT_CENTER);&#10;        iv.setImageURI(toShow);&#10;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setView(iv)&#10;                .setPositiveButton(&quot;Cerrar&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    /* ================== Firma &amp; Guía ================== */&#10;    private void onGuardarFirma() {&#10;        if (guiaActiva) return;&#10;        if (signView.isEmpty()) { toast(&quot;Dibuja la firma primero&quot;); return; }&#10;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar firma&quot;)&#10;                .setMessage(&quot;¿Deseas guardar esta firma como evidencia de recolección?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Guardar&quot;, (d, w) -&gt; guardarFirmaDefinitiva())&#10;                .show();&#10;    }&#10;&#10;    private void guardarFirmaDefinitiva() {&#10;        final String b64 = signView.getBitmapBase64();&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().guardarFirma(asignacionId, b64);&#10;                runOnUi(() -&gt; {&#10;                    firmaB64 = b64;&#10;                    toast(&quot;Firma guardada&quot;);&#10;                    updateSignatureSection();&#10;&#10;                    // Evento con ubicación (si hay permiso)&#10;                    if (solicitudId &gt; 0) {&#10;                        logEventWithLocation(solicitudId, &quot;SIGNATURE_SAVED&quot;, &quot;Firma guardada&quot;,&#10;                                () -&gt; tracking.loadEvents(solicitudId, evs -&gt; {&#10;                                    if (trackingAdapter != null) trackingAdapter.submit(evs);&#10;                                }));&#10;                    }&#10;                });&#10;                verificarYActivarGuia();&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error guardando firma: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void verificarYActivarGuia() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;&#10;                boolean hayFoto  = (a != null &amp;&amp; !TextUtils.isEmpty(a.evidenciaFotoUri));&#10;                boolean hayFirma = (a != null &amp;&amp; !TextUtils.isEmpty(a.firmaBase64));&#10;                if (hayFoto &amp;&amp; hayFirma &amp;&amp; (a != null) &amp;&amp; !a.guiaActiva) {&#10;                    runOnUi(() -&gt; new AlertDialog.Builder(requireContext())&#10;                            .setTitle(&quot;Activar guía&quot;)&#10;                            .setMessage(&quot;Se detectó foto y firma. ¿Activar guía y marcar RECOLECTADA?&quot;)&#10;                            .setNegativeButton(&quot;No&quot;, null)&#10;                            .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                                db.asignacionDao().activarGuia(asignacionId);&#10;                                db.solicitudDao().marcarRecolectadaPorAsignacion(asignacionId);&#10;&#10;                                runOnUi(() -&gt; {&#10;                                    guiaActiva = true;&#10;                                    tvEstado.setText(&quot;GUÍA ACTIVADA (RECOLECTADA)&quot;);&#10;                                    updateUiEnabled();&#10;                                    updateSignatureSection();&#10;                                });&#10;&#10;                                long sid = solicitudId;&#10;                                if (sid &lt;= 0) {&#10;                                    Asignacion ax = db.asignacionDao().getById(asignacionId);&#10;                                    if (ax != null &amp;&amp; ax.solicitudId &gt; 0) sid = ax.solicitudId;&#10;                                    if (sid &lt;= 0) {&#10;                                        try {&#10;                                            Solicitud sx = db.solicitudDao().byAsignacionId(asignacionId);&#10;                                            if (sx != null) sid = sx.id;&#10;                                            if (sx != null) { destinoLat = sx.lat; destinoLon = sx.lon; }&#10;                                        } catch (Exception ignore) {}&#10;                                    }&#10;                                }&#10;&#10;                                if (sid &gt; 0) {&#10;                                    // Evento con ubicación&#10;                                    logEventWithLocation(sid, &quot;PICKED_UP&quot;, &quot;Guía activada y recolectada&quot;, null);&#10;&#10;                                    // ETA (cálculo local simple)&#10;                                    String etaIso;&#10;                                    if (destinoLat != null &amp;&amp; destinoLon != null) {&#10;                                        // En demo: usa mismas coords para no fallar; ajusta si tienes origen real.&#10;                                        double origenLat = destinoLat;&#10;                                        double origenLon = destinoLon;&#10;                                        double km;&#10;                                        try {&#10;                                            km = TrackingService.haversine(origenLat, origenLon, destinoLat, destinoLon);&#10;                                            if (km &lt;= 0) km = 5.0;&#10;                                        } catch (Exception ex) { km = 5.0; }&#10;                                        etaIso = TrackingService.calcEtaIso(km, 22);&#10;                                    } else {&#10;                                        etaIso = TrackingService.calcEtaIso(5.0, 20);&#10;                                    }&#10;&#10;                                    final long fsid = sid;&#10;                                    tracking.upsertEta(sid, etaIso, &quot;calc&quot;,&#10;                                            () -&gt; {&#10;                                                if (tvEta != null) tvEta.setText(&quot;ETA: &quot; + etaIso);&#10;                                                tracking.loadEvents(fsid, evs -&gt; {&#10;                                                    if (trackingAdapter != null) trackingAdapter.submit(evs);&#10;                                                });&#10;                                            });&#10;                                }&#10;                            }))&#10;                            .show());&#10;                }&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error activando guía: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    /* ================== Helper: firma UI ================== */&#10;    private void updateSignatureSection() {&#10;        boolean hasFirma = !TextUtils.isEmpty(firmaB64);&#10;&#10;        if (hasFirma) {&#10;            Bitmap bmp = decodeB64(firmaB64);&#10;            ivFirmaPreview.setImageBitmap(bmp);&#10;            ivFirmaPreview.setVisibility(View.VISIBLE);&#10;&#10;            signView.setVisibility(View.GONE);&#10;            btnGuardarFirma.setVisibility(View.GONE);&#10;            btnLimpiar.setVisibility(View.GONE);&#10;        } else {&#10;            ivFirmaPreview.setVisibility(View.GONE);&#10;&#10;            signView.setVisibility(View.VISIBLE);&#10;            btnGuardarFirma.setVisibility(View.VISIBLE);&#10;            btnLimpiar.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        boolean enableDrawing = !guiaActiva &amp;&amp; !hasFirma;&#10;        signView.setEnabled(enableDrawing);&#10;        btnGuardarFirma.setEnabled(enableDrawing);&#10;        btnLimpiar.setEnabled(enableDrawing);&#10;        float a = enableDrawing ? 1f : 0.5f;&#10;        signView.setAlpha(a); btnGuardarFirma.setAlpha(a); btnLimpiar.setAlpha(a);&#10;    }&#10;&#10;    private Bitmap decodeB64(String b64) {&#10;        try {&#10;            byte[] data = Base64.decode(b64, Base64.DEFAULT);&#10;            return BitmapFactory.decodeByteArray(data, 0, data.length);&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    private void updateUiEnabled() {&#10;        boolean enabled = !guiaActiva;&#10;&#10;        ivFoto.setClickable(true);&#10;        btnTomarFoto.setEnabled(enabled);&#10;        btnEditarFoto.setEnabled(enabled);&#10;        btnConfirmarFoto.setEnabled(enabled);&#10;        btnSoloEditar.setEnabled(enabled);&#10;&#10;        float alpha = enabled ? 1f : 0.5f;&#10;        btnTomarFoto.setAlpha(alpha);&#10;        btnEditarFoto.setAlpha(alpha);&#10;        btnConfirmarFoto.setAlpha(alpha);&#10;        btnSoloEditar.setAlpha(alpha);&#10;    }&#10;&#10;    /* ================== Permisos y servicios de Ubicación ================== */&#10;    private boolean hasLocationPermission() {&#10;        return ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED;&#10;    }&#10;    private boolean isLocationEnabled() {&#10;        try {&#10;            LocationManager lm = (LocationManager) requireContext().getSystemService(android.content.Context.LOCATION_SERVICE);&#10;            return lm != null &amp;&amp; (lm.isProviderEnabled(LocationManager.GPS_PROVIDER) || lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER));&#10;        } catch (Exception e) { return false; }&#10;    }&#10;    private void ensureLocationFlow(@Nullable Runnable afterReady) {&#10;        if (afterReady != null) pendingLocationAction = afterReady; // guardar acción deseada&#10;        if (!hasLocationPermission()) {&#10;            locationPermLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION);&#10;            return;&#10;        }&#10;        if (!isLocationEnabled()) {&#10;            promptEnableLocationServices();&#10;            return;&#10;        }&#10;        runPendingLocationAction();&#10;    }&#10;    private void runPendingLocationAction() {&#10;        Runnable r = pendingLocationAction;&#10;        pendingLocationAction = null;&#10;        if (r != null) r.run();&#10;    }&#10;    private void promptEnableLocationServices() {&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Activar ubicación&quot;)&#10;                .setMessage(&quot;Tu GPS/Ubicación está desactivado. Actívalo para mostrar la ruta y tu posición.&quot;)&#10;                .setPositiveButton(&quot;Configurar&quot;, (d,w)-&gt; {&#10;                    Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);&#10;                    locationSettingsLauncher.launch(intent);&#10;                })&#10;                .setNegativeButton(&quot;Cancelar&quot;, (d,w)-&gt; toast(&quot;Podrás activarlo más tarde desde el botón de ubicación.&quot;))&#10;                .show();&#10;    }&#10;    private void showRationaleUbicacion() {&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Permiso de ubicación&quot;)&#10;                .setMessage(&quot;La aplicación necesita tu ubicación para trazar la ruta hacia el punto de recojo.&quot;)&#10;                .setPositiveButton(&quot;Conceder&quot;, (d,w)-&gt; locationPermLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION))&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .show();&#10;    }&#10;    private void showIrAjustesAppDialog() {&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Permiso denegado&quot;)&#10;                .setMessage(&quot;Has denegado el permiso de ubicación permanentemente. Ve a Ajustes &gt; Permisos para habilitarlo.&quot;)&#10;                .setPositiveButton(&quot;Abrir ajustes&quot;, (d,w)-&gt; {&#10;                    try {&#10;                        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);&#10;                        intent.setData(Uri.parse(&quot;package:&quot; + requireContext().getPackageName()));&#10;                        startActivity(intent);&#10;                    } catch (ActivityNotFoundException ex) { toast(&quot;No se pudo abrir ajustes&quot;); }&#10;                })&#10;                .setNegativeButton(&quot;Cerrar&quot;, null)&#10;                .show();&#10;    }&#10;    private void ensureNotificationPermissionIfNeeded() {&#10;        if (Build.VERSION.SDK_INT &gt;= 33) {&#10;            if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {&#10;                // pedir una sola vez al entrar&#10;                notifPermLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);&#10;            }&#10;        }&#10;    }&#10;&#10;    /* ================== Lógica de Mapa y Ruta (restaurada) ================== */&#10;    private void cargarUltimaUbicacionRecolector(boolean moveCameraAlways) {&#10;        if (solicitudId &lt;= 0) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                TrackingEventDao.LastLoc loc = db.trackingEventDao().lastLocationForShipment(solicitudId);&#10;                if (loc != null &amp;&amp; loc.lat != null &amp;&amp; loc.lon != null) {&#10;                    lastRecolectorLat = loc.lat;&#10;                    lastRecolectorLon = loc.lon;&#10;                    runOnUi(() -&gt; {&#10;                        pintarMarcadores(moveCameraAlways);&#10;                        intentarRuta();&#10;                    });&#10;                } else {&#10;                    runOnUi(this::intentarUbicacionDispositivoComoRecolector);&#10;                }&#10;            } catch (Exception ignore) {}&#10;        });&#10;    }&#10;&#10;    private void pintarMarcadores() { pintarMarcadores(false); }&#10;    private void pintarMarcadores(boolean forceMove) {&#10;        if (googleMap == null) return;&#10;        if (lastRecolectorLat != null &amp;&amp; lastRecolectorLon != null) {&#10;            LatLng posRecolector = new LatLng(lastRecolectorLat, lastRecolectorLon);&#10;            if (markerRecolector == null) markerRecolector = googleMap.addMarker(new MarkerOptions().position(posRecolector).title(&quot;Recolector&quot;));&#10;            else markerRecolector.setPosition(posRecolector);&#10;        }&#10;        if (destinoLat != null &amp;&amp; destinoLon != null) {&#10;            LatLng posDest = new LatLng(destinoLat, destinoLon);&#10;            if (markerDestino == null) markerDestino = googleMap.addMarker(new MarkerOptions().position(posDest).title(&quot;Recojo&quot;));&#10;        }&#10;        if (forceMove) {&#10;            LatLng focus;&#10;            if (lastRecolectorLat != null &amp;&amp; destinoLat != null) {&#10;                focus = new LatLng((lastRecolectorLat + destinoLat)/2.0, (lastRecolectorLon + destinoLon)/2.0);&#10;                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(focus, 13f));&#10;            } else if (destinoLat != null) {&#10;                focus = new LatLng(destinoLat, destinoLon);&#10;                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(focus, 14f));&#10;            } else if (lastRecolectorLat != null) {&#10;                focus = new LatLng(lastRecolectorLat, lastRecolectorLon);&#10;                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(focus, 14f));&#10;            } else {&#10;                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(BOGOTA_LAT, BOGOTA_LON), 11f));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void intentarRuta() {&#10;        if (googleMap == null || destinoLat == null || destinoLon == null) return;&#10;        if (lastRecolectorLat == null || lastRecolectorLon == null) {&#10;            intentarUbicacionDispositivoComoRecolector();&#10;            if (lastRecolectorLat == null) return;&#10;        }&#10;        if (routeFromLat != null &amp;&amp; routeFromLon != null) {&#10;            double d = Math.hypot(routeFromLat - lastRecolectorLat, routeFromLon - lastRecolectorLon);&#10;            if (d &lt; 0.0003 &amp;&amp; routePolyline != null) return;&#10;        }&#10;        if (routeRequested) return;&#10;        routeRequested = true;&#10;        final double oLat = lastRecolectorLat, oLon = lastRecolectorLon, dLat = destinoLat, dLon = destinoLon;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; fetchRoute(oLat, oLon, dLat, dLon));&#10;    }&#10;&#10;    private void fetchRoute(double oLat, double oLon, double dLat, double dLon) {&#10;        List&lt;LatLng&gt; decoded = null;&#10;        String key = BuildConfig.MAPS_API_KEY;&#10;        boolean canCallApi = key != null &amp;&amp; !key.trim().isEmpty();&#10;        if (canCallApi) {&#10;            String urlStr = String.format(Locale.US,&#10;                    &quot;https://maps.googleapis.com/maps/api/directions/json?origin=%f,%f&amp;destination=%f,%f&amp;mode=driving&amp;key=%s&quot;,&#10;                    oLat, oLon, dLat, dLon, key);&#10;            HttpURLConnection conn = null;&#10;            try {&#10;                URL url = new URL(urlStr);&#10;                conn = (HttpURLConnection) url.openConnection();&#10;                conn.setConnectTimeout(8000);&#10;                conn.setReadTimeout(10000);&#10;                conn.connect();&#10;                if (conn.getResponseCode() == 200) {&#10;                    InputStream is = conn.getInputStream();&#10;                    BufferedReader br = new BufferedReader(new InputStreamReader(is));&#10;                    StringBuilder sb = new StringBuilder();&#10;                    String line; while((line=br.readLine())!=null) sb.append(line);&#10;                    JSONObject root = new JSONObject(sb.toString());&#10;                    JSONArray routes = root.optJSONArray(&quot;routes&quot;);&#10;                    if (routes != null &amp;&amp; routes.length() &gt; 0) {&#10;                        JSONObject r0 = routes.getJSONObject(0);&#10;                        JSONObject poly = r0.getJSONObject(&quot;overview_polyline&quot;);&#10;                        String pts = poly.getString(&quot;points&quot;);&#10;                        decoded = decodePolyline(pts);&#10;                    }&#10;                }&#10;            } catch (Exception ignore) { } finally { if (conn != null) conn.disconnect(); }&#10;        }&#10;        if (decoded == null || decoded.isEmpty()) {&#10;            decoded = new ArrayList&lt;&gt;();&#10;            decoded.add(new LatLng(oLat, oLon));&#10;            decoded.add(new LatLng(dLat, dLon));&#10;        }&#10;        final List&lt;LatLng&gt; finalDecoded = decoded;&#10;        runOnUi(() -&gt; drawRoute(finalDecoded, oLat, oLon));&#10;    }&#10;&#10;    private void drawRoute(List&lt;LatLng&gt; points, double fromLat, double fromLon) {&#10;        routeRequested = false;&#10;        routeFromLat = fromLat; routeFromLon = fromLon;&#10;        if (googleMap == null || points == null || points.isEmpty()) return;&#10;        if (routePolyline != null) routePolyline.remove();&#10;        PolylineOptions opts = new PolylineOptions().width(10f).color(0xFF1976D2).geodesic(true);&#10;        opts.addAll(points);&#10;        routePolyline = googleMap.addPolyline(opts);&#10;        if (points.size() &gt;= 2) {&#10;            double minLat= points.get(0).latitude, maxLat=minLat, minLon=points.get(0).longitude, maxLon=minLon;&#10;            for (LatLng p: points) { if (p.latitude&lt;minLat) minLat=p.latitude; if (p.latitude&gt;maxLat) maxLat=p.latitude; if (p.longitude&lt;minLon) minLon=p.longitude; if (p.longitude&gt;maxLon) maxLon=p.longitude; }&#10;            LatLng center = new LatLng((minLat+maxLat)/2.0, (minLon+maxLon)/2.0);&#10;            float[] results = new float[1];&#10;            android.location.Location.distanceBetween(minLat, minLon, maxLat, maxLon, results);&#10;            float dist = results[0];&#10;            float zoom = 14f;&#10;            if (dist &gt; 5000) zoom = 11f; else if (dist &gt; 2000) zoom = 12f; else if (dist &gt; 800) zoom = 13f; else if (dist &lt; 200) zoom = 15f;&#10;            googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(center, zoom));&#10;        }&#10;    }&#10;&#10;    private List&lt;LatLng&gt; decodePolyline(String encoded) {&#10;        List&lt;LatLng&gt; poly = new ArrayList&lt;&gt;();&#10;        int index = 0, len = encoded.length();&#10;        int lat = 0, lng = 0;&#10;        while (index &lt; len) {&#10;            int b, shift = 0, result = 0;&#10;            do { b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20);&#10;            int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));&#10;            lat += dlat;&#10;            shift = 0; result = 0;&#10;            do { b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20);&#10;            int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));&#10;            lng += dlng;&#10;            double latD = lat / 1E5; double lonD = lng / 1E5;&#10;            poly.add(new LatLng(latD, lonD));&#10;        }&#10;        return poly;&#10;    }&#10;    /* ================== Ciclo de vida ================== */&#10;    @Override public void onResume() {&#10;        super.onResume();&#10;        if (mapViewRecolector != null) mapViewRecolector.onResume();&#10;        // iniciar refresco periódico&#10;        mapHandler.removeCallbacks(mapRefreshTask);&#10;        mapHandler.postDelayed(mapRefreshTask, 3_000); // primer intento tras 3s&#10;    }&#10;    @Override public void onPause() {&#10;        super.onPause();&#10;        if (mapViewRecolector != null) mapViewRecolector.onPause();&#10;        mapHandler.removeCallbacks(mapRefreshTask);&#10;    }&#10;    @Override public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (mapViewRecolector != null) mapViewRecolector.onDestroy();&#10;        mapHandler.removeCallbacks(mapRefreshTask);&#10;        googleMap = null; markerRecolector = null; markerDestino = null;&#10;    }&#10;    @Override public void onLowMemory() {&#10;        super.onLowMemory();&#10;        if (mapViewRecolector != null) mapViewRecolector.onLowMemory();&#10;    }&#10;&#10;    // Helper UI&#10;    private void runOnUi(Runnable r){ if(!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;    private void toast(String msg){ if(!isAdded()) return; Toast.makeText(requireContext(), msg, Toast.LENGTH_SHORT).show(); }&#10;&#10;    private void intentarUbicacionDispositivoComoRecolector() {&#10;        // Si ya tenemos una última ubicación no forzamos otra solicitud&#10;        if (lastRecolectorLat != null &amp;&amp; lastRecolectorLon != null) return;&#10;        ensureLocationFlow(() -&gt; {&#10;            if (fused == null) return;&#10;            fused.getCurrentLocation(Priority.PRIORITY_BALANCED_POWER_ACCURACY, null)&#10;                    .addOnSuccessListener(loc -&gt; {&#10;                        if (loc != null) {&#10;                            lastRecolectorLat = loc.getLatitude();&#10;                            lastRecolectorLon = loc.getLongitude();&#10;                            if (googleMap != null) {&#10;                                pintarMarcadores(true);&#10;                                intentarRuta();&#10;                            }&#10;                        }&#10;                    });&#10;        });&#10;    }&#10;&#10;    private void logEventWithLocation(long sid, String type, String detail, @Nullable Runnable afterUi) {&#10;        if (tracking == null) return;&#10;        ensureLocationFlow(() -&gt; {&#10;            if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {&#10;                fused.getCurrentLocation(Priority.PRIORITY_BALANCED_POWER_ACCURACY, null)&#10;                        .addOnSuccessListener(loc -&gt; {&#10;                            Double lat = (loc != null) ? loc.getLatitude() : null;&#10;                            Double lon = (loc != null) ? loc.getLongitude() : null;&#10;                            tracking.logEvent(sid, type, detail, lat, lon, () -&gt; { if (afterUi != null) runOnUi(afterUi); });&#10;                        })&#10;                        .addOnFailureListener(e -&gt; tracking.logEvent(sid, type, detail, null, null, () -&gt; { if (afterUi != null) runOnUi(afterUi); }));&#10;            } else {&#10;                tracking.logEvent(sid, type, detail, null, null, () -&gt; { if (afterUi != null) runOnUi(afterUi); });&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/HomeDashboardFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/HomeDashboardFragment.java" />
              <option name="originalContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.navigation.NavController;&#10;import androidx.navigation.fragment.NavHostFragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.SessionManager;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.data.SolicitudDao;&#10;import com.hfad.encomiendas.data.TrackingEventDao;&#10;&#10;import java.text.Normalizer;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.LinkedHashSet;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.concurrent.Executors;&#10;import java.util.regex.Matcher;&#10;import java.util.regex.Pattern;&#10;&#10;public class HomeDashboardFragment extends Fragment {&#10;&#10;    private SwipeRefreshLayout swRefresh;&#10;    private TextView tvHola, tvCountPendientes, tvCountAsignadas, tvCountRecolectadas, tvEmpty;&#10;    private RecyclerView rvSolicitudes;&#10;    private MaterialButton btnCrear;&#10;&#10;    private UltimasAdapter adapter;&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_home_dashboard, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        swRefresh          = v.findViewById(R.id.swRefresh);&#10;        tvHola             = v.findViewById(R.id.tvHola);&#10;        tvCountPendientes  = v.findViewById(R.id.tvCountPendientes);&#10;        tvCountAsignadas   = v.findViewById(R.id.tvCountAsignadas);&#10;        tvCountRecolectadas= v.findViewById(R.id.tvCountRecolectadas);&#10;        tvEmpty            = v.findViewById(R.id.tvEmpty);&#10;        rvSolicitudes      = v.findViewById(R.id.rvSolicitudes);&#10;        btnCrear           = v.findViewById(R.id.btnCrear);&#10;&#10;        rvSolicitudes.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        adapter = new UltimasAdapter(AppDatabase.getInstance(requireContext()));&#10;        rvSolicitudes.setAdapter(adapter);&#10;&#10;        SessionManager sm = new SessionManager(requireContext());&#10;        if (!TextUtils.isEmpty(sm.getEmail())) {&#10;            tvHola.setText(&quot;¡Hola, &quot; + sm.getEmail() + &quot;!&quot;);&#10;        }&#10;&#10;        if (swRefresh != null) swRefresh.setOnRefreshListener(this::cargarPanel);&#10;        if (btnCrear != null) {&#10;            btnCrear.setOnClickListener(vw -&gt; {&#10;                NavController nav = NavHostFragment.findNavController(this);&#10;                try { nav.navigate(R.id.action_home_to_solicitar); }&#10;                catch (Exception ignore) { nav.navigate(R.id.solicitarRecoleccionFragment); }&#10;            });&#10;        }&#10;&#10;        cargarPanel();&#10;    }&#10;&#10;    private void cargarPanel() {&#10;        if (swRefresh != null) swRefresh.setRefreshing(true);&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                SessionManager sm = new SessionManager(requireContext());&#10;                String email = sm.getEmail();&#10;                if (TextUtils.isEmpty(email)) {&#10;                    runOnUi(() -&gt; {&#10;                        if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                        Toast.makeText(requireContext(), &quot;Sesión no válida&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                    return;&#10;                }&#10;                com.hfad.encomiendas.data.User u = db.userDao().findByEmail(email);&#10;                if (u == null) {&#10;                    runOnUi(() -&gt; {&#10;                        if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                        Toast.makeText(requireContext(), &quot;Usuario no encontrado&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                    return;&#10;                }&#10;&#10;                int cPend = db.solicitudDao().countByEstado(u.id, &quot;PENDIENTE&quot;);&#10;                int cAsig = db.solicitudDao().countByEstado(u.id, &quot;ASIGNADA&quot;);&#10;                int cReco = db.solicitudDao().countByEstado(u.id, &quot;RECOLECTADA&quot;);&#10;&#10;                List&lt;SolicitudDao.SolicitudConEta&gt; ultimas =&#10;                        db.solicitudDao().listAllByUserWithEta(u.id, 20);&#10;&#10;                runOnUi(() -&gt; {&#10;                    tvCountPendientes.setText(String.valueOf(cPend));&#10;                    tvCountAsignadas.setText(String.valueOf(cAsig));&#10;                    tvCountRecolectadas.setText(String.valueOf(cReco));&#10;&#10;                    adapter.setData(ultimas == null ? new ArrayList&lt;&gt;() : ultimas);&#10;                    tvEmpty.setVisibility(adapter.getItemCount() == 0 ? View.VISIBLE : View.GONE);&#10;                    if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                });&#10;&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; {&#10;                    if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                    Toast.makeText(requireContext(), &quot;Error: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;            }&#10;        });&#10;    }&#10;&#10;    /* ==================== Adapter ==================== */&#10;&#10;    private static class UltimasAdapter extends RecyclerView.Adapter&lt;VH&gt; {&#10;        private final List&lt;SolicitudDao.SolicitudConEta&gt; data = new ArrayList&lt;&gt;();&#10;        private final SimpleDateFormat dfFecha = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;        private final SimpleDateFormat dfHora  = new SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault());&#10;        private final AppDatabase db;&#10;&#10;        UltimasAdapter(AppDatabase db) { this.db = db; }&#10;&#10;        void setData(List&lt;SolicitudDao.SolicitudConEta&gt; list) {&#10;            data.clear();&#10;            if (list != null) data.addAll(list);&#10;            notifyDataSetChanged();&#10;        }&#10;&#10;        @NonNull @Override public VH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;            View v = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_solicitud_dashboard, parent, false);&#10;            return new VH(v);&#10;        }&#10;&#10;        @Override&#10;        public void onBindViewHolder(@NonNull VH h, int position) {&#10;            SolicitudDao.SolicitudConEta it = data.get(position);&#10;            Solicitud s = it.s;&#10;&#10;            h.tvGuiaEstado.setText(nn(s.guia) + &quot;  •  &quot; + nn(s.estado));&#10;&#10;            String fecha = dfFecha.format(new Date(s.ventanaInicioMillis));&#10;            String hIni  = dfHora.format(new Date(s.ventanaInicioMillis));&#10;            String hFin  = dfHora.format(new Date(s.ventanaFinMillis));&#10;            h.tvRango.setText(fecha + &quot;, &quot; + hIni + &quot; - &quot; + hFin);&#10;&#10;            h.tvEta.setText(&quot;ETA: &quot; + prettyEta(it.eta));&#10;            h.tvDireccion.setText( normalizeAddress(s.direccion) );&#10;&#10;            String destino = firstNonEmpty(meta(s.notas, &quot;DestinoDir&quot;), meta(s.notas, &quot;Destino&quot;));&#10;            h.tvDestino.setText(&quot;Destino: &quot; + nn(destino));&#10;&#10;            h.tvUbicacion.setText(&quot;Ubicación: —&quot;);&#10;            long sid = s.id;&#10;            Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                TrackingEventDao.LastLoc loc = db.trackingEventDao().lastLocationForShipment(sid);&#10;                String txt = &quot;—&quot;;&#10;                if (loc != null &amp;&amp; loc.lat != null &amp;&amp; loc.lon != null) {&#10;                    txt = String.format(Locale.getDefault(), &quot;%.5f, %.5f&quot;, loc.lat, loc.lon);&#10;                }&#10;                final String fin = &quot;Ubicación: &quot; + txt;&#10;                h.itemView.post(() -&gt; h.tvUbicacion.setText(fin));&#10;            });&#10;        }&#10;&#10;        @Override public int getItemCount() { return data.size(); }&#10;&#10;        private static String nn(String s) { return (s == null || s.trim().isEmpty()) ? &quot;—&quot; : s.trim(); }&#10;&#10;        private static String meta(String notas, String key) {&#10;            if (notas == null) return &quot;&quot;;&#10;            Pattern p = Pattern.compile(&#10;                    &quot;\\b&quot; + Pattern.quote(key) + &quot;\\s*:\\s*(.*?)\\s*(?:\\|\\s*|(?=[A-ZÁÉÍÓÚÑ][\\wÁÉÍÓÚÑáéíóúñ ]*:\\s*)|$)&quot;,&#10;                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL&#10;            );&#10;            Matcher m = p.matcher(notas);&#10;            if (m.find()) return m.group(1).trim();&#10;&#10;            Pattern p2 = Pattern.compile(&quot;\\b&quot; + Pattern.quote(key) + &quot;\\s*:\\s*(.*)$&quot;,&#10;                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL);&#10;            Matcher m2 = p2.matcher(notas);&#10;            return m2.find() ? m2.group(1).trim() : &quot;&quot;;&#10;        }&#10;&#10;        private static String firstNonEmpty(String... arr) {&#10;            if (arr == null) return &quot;&quot;;&#10;            for (String s : arr) if (s != null &amp;&amp; !s.trim().isEmpty()) return s.trim();&#10;            return &quot;&quot;;&#10;        }&#10;&#10;        private static String normalizeAddress(String raw) {&#10;            if (raw == null) return &quot;—&quot;;&#10;            String[] parts = raw.split(&quot;,&quot;);&#10;            List&lt;String&gt; cleaned = new ArrayList&lt;&gt;();&#10;            Set&lt;String&gt; seenCanon = new LinkedHashSet&lt;&gt;();&#10;            String prevCanon = null;&#10;&#10;            for (String p : parts) {&#10;                String t = p.trim();&#10;                if (t.isEmpty()) continue;&#10;                String canon = Normalizer.normalize(t, Normalizer.Form.NFD)&#10;                        .replaceAll(&quot;\\p{InCombiningDiacriticalMarks}+&quot;, &quot;&quot;)&#10;                        .replaceAll(&quot;[^a-zA-Z\\s]&quot;, &quot;&quot;)&#10;                        .toLowerCase(Locale.ROOT)&#10;                        .replaceAll(&quot;\\s+&quot;, &quot; &quot;)&#10;                        .trim();&#10;                if (prevCanon != null &amp;&amp; (canon.equals(prevCanon) ||&#10;                        canon.startsWith(prevCanon) || prevCanon.startsWith(canon))) continue;&#10;                if (seenCanon.contains(canon)) continue;&#10;                cleaned.add(t);&#10;                seenCanon.add(canon);&#10;                prevCanon = canon;&#10;            }&#10;            return cleaned.isEmpty() ? raw.trim() : TextUtils.join(&quot;, &quot;, cleaned);&#10;        }&#10;&#10;        private static String prettyEta(String iso){&#10;            if (iso == null || iso.trim().isEmpty()) return &quot;—&quot;;&#10;            int t = iso.indexOf('T');&#10;            if (t &gt;= 0 &amp;&amp; iso.length() &gt;= t + 6) return iso.substring(t + 1, t + 6);&#10;            return iso;&#10;        }&#10;    }&#10;&#10;    private static class VH extends RecyclerView.ViewHolder {&#10;        TextView tvGuiaEstado, tvRango, tvEta, tvDireccion, tvDestino, tvUbicacion;&#10;        VH(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvGuiaEstado = itemView.findViewById(R.id.tvGuiaEstado);&#10;            tvRango      = itemView.findViewById(R.id.tvRango);&#10;            tvEta        = itemView.findViewById(R.id.tvEta);&#10;            tvDireccion  = itemView.findViewById(R.id.tvDireccion);&#10;            tvDestino    = itemView.findViewById(R.id.tvDestino);&#10;            tvUbicacion  = itemView.findViewById(R.id.tvUbicacion);&#10;        }&#10;    }&#10;&#10;    private void runOnUi(Runnable r) { if (!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;}&#10;" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.navigation.NavController;&#10;import androidx.navigation.fragment.NavHostFragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.SessionManager;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.data.SolicitudDao;&#10;import com.hfad.encomiendas.data.TrackingEventDao;&#10;&#10;import java.net.URL;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.LinkedHashSet;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;import java.util.concurrent.Executors;&#10;import java.util.regex.Matcher;&#10;import java.util.regex.Pattern;&#10;&#10;public class HomeDashboardFragment extends Fragment {&#10;&#10;    private SwipeRefreshLayout swRefresh;&#10;    private TextView tvHola, tvCountPendientes, tvCountAsignadas, tvCountRecolectadas, tvEmpty;&#10;    private RecyclerView rvSolicitudes;&#10;    private MaterialButton btnCrear;&#10;&#10;    private UltimasAdapter adapter;&#10;    private NavController navController; // cache&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_home_dashboard, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        swRefresh          = v.findViewById(R.id.swRefresh);&#10;        tvHola             = v.findViewById(R.id.tvHola);&#10;        tvCountPendientes  = v.findViewById(R.id.tvCountPendientes);&#10;        tvCountAsignadas   = v.findViewById(R.id.tvCountAsignadas);&#10;        tvCountRecolectadas= v.findViewById(R.id.tvCountRecolectadas);&#10;        tvEmpty            = v.findViewById(R.id.tvEmpty);&#10;        rvSolicitudes      = v.findViewById(R.id.rvSolicitudes);&#10;        btnCrear           = v.findViewById(R.id.btnCrear);&#10;&#10;        rvSolicitudes.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        adapter = new UltimasAdapter(AppDatabase.getInstance(requireContext()));&#10;        rvSolicitudes.setAdapter(adapter);&#10;&#10;        SessionManager sm = new SessionManager(requireContext());&#10;        if (!TextUtils.isEmpty(sm.getEmail())) {&#10;            tvHola.setText(&quot;¡Hola, &quot; + sm.getEmail() + &quot;!&quot;);&#10;        }&#10;&#10;        if (swRefresh != null) swRefresh.setOnRefreshListener(this::cargarPanel);&#10;        if (btnCrear != null) {&#10;            btnCrear.setOnClickListener(vw -&gt; {&#10;                NavController nav = NavHostFragment.findNavController(this);&#10;                try { nav.navigate(R.id.action_home_to_solicitar); }&#10;                catch (Exception ignore) { nav.navigate(R.id.solicitarRecoleccionFragment); }&#10;            });&#10;        }&#10;&#10;        navController = NavHostFragment.findNavController(this);&#10;        cargarPanel();&#10;    }&#10;&#10;    /* ==================== Adapter ==================== */&#10;&#10;    private static class UltimasAdapter extends RecyclerView.Adapter&lt;VH&gt; {&#10;        private final List&lt;SolicitudDao.SolicitudConEta&gt; data = new ArrayList&lt;&gt;();&#10;        private final java.text.SimpleDateFormat dfFecha = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;        private final java.text.SimpleDateFormat dfHora  = new java.text.SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault());&#10;        private final AppDatabase db;&#10;        private final List&lt;LocationCache&gt; locCache = new ArrayList&lt;&gt;();&#10;        private final Handler ui = new Handler(Looper.getMainLooper());&#10;        private static final String MAPS_KEY = &quot;&quot;; // Rellena si deseas snapshots&#10;&#10;        static class LocationCache { long solicitudId; Double lat; Double lon; String whenIso; }&#10;&#10;        UltimasAdapter(AppDatabase db) { this.db = db; }&#10;&#10;        void setData(List&lt;SolicitudDao.SolicitudConEta&gt; list) {&#10;            boolean same = (list!=null &amp;&amp; list.size()==data.size());&#10;            if (same) {&#10;                for (int i=0;i&lt;list.size();i++) if (data.get(i).s.id != list.get(i).s.id) { same = false; break; }&#10;            }&#10;            if (!same) {&#10;                data.clear(); if (list!=null) data.addAll(list); notifyDataSetChanged();&#10;            } else {&#10;                for (int i=0;i&lt;list.size();i++) data.set(i, list.get(i));&#10;                notifyItemRangeChanged(0, data.size());&#10;            }&#10;            rebuildLocCacheIds();&#10;        }&#10;        private void rebuildLocCacheIds(){&#10;            locCache.clear();&#10;            for (SolicitudDao.SolicitudConEta it: data){ LocationCache c = new LocationCache(); c.solicitudId = it.s.id; locCache.add(c);} }&#10;&#10;        void refreshLocationsAsync() {&#10;            Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                for (LocationCache c: locCache) {&#10;                    TrackingEventDao.LastLoc loc = db.trackingEventDao().lastLocationForShipment(c.solicitudId);&#10;                    if (loc!=null) { c.lat=loc.lat; c.lon=loc.lon; c.whenIso=loc.whenIso; }&#10;                }&#10;                // actualizar visible&#10;                if (!data.isEmpty()) {&#10;                    // post a la UI&#10;                    if (!rvRef.get().isAttachedToWindow()) return; // best-effort&#10;                    rvRef.get().post(this::notifyDataSetChanged);&#10;                }&#10;            });&#10;        }&#10;&#10;        // referencia débil al RecyclerView para post (configurada en onAttachedToRecyclerView)&#10;        private java.lang.ref.WeakReference&lt;RecyclerView&gt; rvRef = new java.lang.ref.WeakReference&lt;&gt;(null);&#10;        @Override public void onAttachedToRecyclerView(@NonNull RecyclerView rv){ super.onAttachedToRecyclerView(rv); rvRef = new java.lang.ref.WeakReference&lt;&gt;(rv);}    &#10;&#10;        private LocationCache findCache(long id){ for (LocationCache c: locCache) if (c.solicitudId==id) return c; return null; }&#10;        @NonNull @Override public VH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;            View v = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_solicitud_dashboard, parent, false);&#10;            return new VH(v);&#10;        }&#10;&#10;        @Override&#10;        public void onBindViewHolder(@NonNull VH h, int position) {&#10;            SolicitudDao.SolicitudConEta it = data.get(position);&#10;            Solicitud s = it.s;&#10;&#10;            h.tvGuiaEstado.setText(nn(s.guia) + &quot;  •  &quot; + nn(s.estado));&#10;&#10;            String fecha = dfFecha.format(new Date(s.ventanaInicioMillis));&#10;            String hIni  = dfHora.format(new Date(s.ventanaInicioMillis));&#10;            String hFin  = dfHora.format(new Date(s.ventanaFinMillis));&#10;            h.tvRango.setText(fecha + &quot;, &quot; + hIni + &quot; - &quot; + hFin);&#10;&#10;            h.tvEta.setText(&quot;ETA: &quot; + prettyEta(it.eta));&#10;            h.tvDireccion.setText( normalizeAddress(s.direccion) );&#10;&#10;            String destino = firstNonEmpty(meta(s.notas, &quot;DestinoDir&quot;), meta(s.notas, &quot;Destino&quot;));&#10;            h.tvDestino.setText(&quot;Destino: &quot; + nn(destino));&#10;&#10;            h.itemView.setOnClickListener(v -&gt; { if (cb != null) cb.openMapa(s.id); });&#10;&#10;            LocationCache lc = findCache(s.id);&#10;            if (lc==null || lc.lat==null) {&#10;                h.tvUbicacion.setText(&quot;Ubicación: —&quot;);&#10;                h.loadSnapshot(null, null, null, MAPS_KEY);&#10;                Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                    TrackingEventDao.LastLoc loc = db.trackingEventDao().lastLocationForShipment(s.id);&#10;                    if (loc!=null){&#10;                        if (lc!=null){ lc.lat=loc.lat; lc.lon=loc.lon; lc.whenIso=loc.whenIso; }&#10;                        h.itemView.post(() -&gt; {&#10;                            h.tvUbicacion.setText(formatUbicacion(loc.lat, loc.lon, loc.whenIso));&#10;                            h.loadSnapshot(loc.lat, loc.lon, null, MAPS_KEY);&#10;                        });&#10;                    }&#10;                });&#10;            } else {&#10;                h.tvUbicacion.setText(formatUbicacion(lc.lat, lc.lon, lc.whenIso));&#10;                h.loadSnapshot(lc.lat, lc.lon, null, MAPS_KEY);&#10;            }&#10;        }&#10;&#10;        private String formatUbicacion(Double lat, Double lon, String whenIso){&#10;            if (lat==null||lon==null) return &quot;Ubicación: —&quot;;&#10;            String delta = formatDelta(whenIso);&#10;            return String.format(Locale.getDefault(), &quot;Ubicación: %.5f, %.5f%s&quot;, lat, lon, delta.isEmpty()?&quot;&quot;:&quot; (&quot;+delta+&quot;)&quot;);&#10;        }&#10;&#10;        private static String nn(String s) { return (s == null || s.trim().isEmpty()) ? &quot;—&quot; : s.trim(); }&#10;&#10;        private static String meta(String notas, String key) {&#10;            if (notas == null) return &quot;&quot;;&#10;            Pattern p = Pattern.compile(&#10;                    &quot;\\b&quot; + Pattern.quote(key) + &quot;\\s*:\\s*(.*?)\\s*(?:\\|\\s*|(?=[A-ZÁÉÍÓÚÑ][\\wÁÉÍÓÚÑáéíóúñ ]*:\\s*)|$)&quot;,&#10;                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL&#10;            );&#10;            Matcher m = p.matcher(notas);&#10;            if (m.find()) return m.group(1).trim();&#10;&#10;            Pattern p2 = Pattern.compile(&quot;\\b&quot; + Pattern.quote(key) + &quot;\\s*:\\s*(.*)$&quot;,&#10;                    Pattern.CASE_INSENSITIVE | Pattern.DOTALL);&#10;            Matcher m2 = p2.matcher(notas);&#10;            return m2.find() ? m2.group(1).trim() : &quot;&quot;;&#10;        }&#10;&#10;        private static String firstNonEmpty(String... arr) {&#10;            if (arr == null) return &quot;&quot;;&#10;            for (String s : arr) if (s != null &amp;&amp; !s.trim().isEmpty()) return s.trim();&#10;            return &quot;&quot;;&#10;        }&#10;&#10;        private static String normalizeAddress(String raw) {&#10;            if (raw == null) return &quot;—&quot;;&#10;            String[] parts = raw.split(&quot;,&quot;);&#10;            List&lt;String&gt; cleaned = new ArrayList&lt;&gt;();&#10;            Set&lt;String&gt; seenCanon = new LinkedHashSet&lt;&gt;();&#10;            String prevCanon = null;&#10;&#10;            for (String p : parts) {&#10;                String t = p.trim();&#10;                if (t.isEmpty()) continue;&#10;                String canon = java.text.Normalizer.normalize(t, java.text.Normalizer.Form.NFD)&#10;                        .replaceAll(&quot;\\p{InCombiningDiacriticalMarks}+&quot;, &quot;&quot;)&#10;                        .replaceAll(&quot;[^a-zA-Z\\s]&quot;, &quot;&quot;)&#10;                        .toLowerCase(Locale.ROOT)&#10;                        .replaceAll(&quot;\\s+&quot;, &quot; &quot;)&#10;                        .trim();&#10;                if (prevCanon != null &amp;&amp; (canon.equals(prevCanon) ||&#10;                        canon.startsWith(prevCanon) || prevCanon.startsWith(canon))) continue;&#10;                if (seenCanon.contains(canon)) continue;&#10;                cleaned.add(t);&#10;                seenCanon.add(canon);&#10;                prevCanon = canon;&#10;            }&#10;            return cleaned.isEmpty() ? raw.trim() : TextUtils.join(&quot;, &quot;, cleaned);&#10;        }&#10;&#10;        private static String prettyEta(String iso){&#10;            if (iso == null || iso.trim().isEmpty()) return &quot;—&quot;;&#10;            int t = iso.indexOf('T');&#10;            if (t &gt;= 0 &amp;&amp; iso.length() &gt;= t + 6) return iso.substring(t + 1, t + 6);&#10;            return iso;&#10;        }&#10;&#10;        private static String formatDelta(String iso){&#10;            if (iso == null) return &quot;&quot;;&#10;            try {&#10;                // intento parse simple&#10;                String base = iso.replace('Z',' ').trim();&#10;                // soporta formato con zona: tomamos primeros 19 caracteres yyyy-MM-ddTHH:mm:ss&#10;                if (base.length() &gt;= 19) base = base.substring(0,19);&#10;                java.text.SimpleDateFormat f = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, Locale.getDefault());&#10;                long t = f.parse(base).getTime();&#10;                long now = System.currentTimeMillis();&#10;                long diff = Math.max(0, now - t);&#10;                long mins = diff / 60000L;&#10;                if (mins &lt; 1) return &quot;hace instantes&quot;;&#10;                if (mins &lt; 60) return &quot;hace &quot; + mins + &quot; min&quot;;&#10;                long hrs = mins / 60; if (hrs &lt; 24) return &quot;hace &quot; + hrs + &quot; h&quot;;&#10;                long dias = hrs / 24; return &quot;hace &quot; + dias + &quot; d&quot;;&#10;            } catch (Exception ignore) {}&#10;            return &quot;&quot;;&#10;        }&#10;&#10;        interface ItemClick { void openMapa(long solicitudId); }&#10;        private ItemClick cb;&#10;        void setOnItemClick(ItemClick cb){ this.cb = cb; }&#10;        @Override public int getItemCount(){ return data.size(); }&#10;    }&#10;&#10;    private static class VH extends RecyclerView.ViewHolder {&#10;        TextView tvGuiaEstado, tvRango, tvEta, tvDireccion, tvDestino, tvUbicacion;&#10;        ImageView ivMap;&#10;        VH(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvGuiaEstado = itemView.findViewById(R.id.tvGuiaEstado);&#10;            tvRango      = itemView.findViewById(R.id.tvRango);&#10;            tvEta        = itemView.findViewById(R.id.tvEta);&#10;            tvDireccion  = itemView.findViewById(R.id.tvDireccion);&#10;            tvDestino    = itemView.findViewById(R.id.tvDestino);&#10;            tvUbicacion  = itemView.findViewById(R.id.tvUbicacion);&#10;            ivMap        = itemView.findViewById(R.id.ivMapPreview);&#10;        }&#10;        void loadSnapshot(Double lat, Double lon, Double destLat, String key) {&#10;            if (ivMap==null) return;&#10;            if (lat==null || lon==null || key==null || key.isEmpty()) {&#10;                ivMap.setImageResource(R.drawable.ic_launcher_background);&#10;                return;&#10;            }&#10;            StringBuilder url = new StringBuilder(&quot;https://maps.googleapis.com/maps/api/staticmap?&quot;);&#10;            url.append(&quot;center=&quot;).append(lat).append(&quot;,&quot;).append(lon)&#10;               .append(&quot;&amp;zoom=13&amp;size=400x200&amp;scale=2&amp;maptype=roadmap&quot;)&#10;               .append(&quot;&amp;markers=color:blue%7C&quot;).append(lat).append(&quot;,&quot;).append(lon);&#10;            // destino opcional no implementado (sin destLon real)&#10;            url.append(&quot;&amp;key=&quot;).append(key);&#10;            new Thread(() -&gt; {&#10;                try (InputStream is = new URL(url.toString()).openStream()) {&#10;                    Bitmap bmp = BitmapFactory.decodeStream(is);&#10;                    ivMap.post(() -&gt; ivMap.setImageBitmap(bmp));&#10;                } catch (Exception ignore) {}&#10;            }).start();&#10;        }&#10;    }&#10;&#10;    // Exponer método para configurar callback tras cargar panel&#10;    private void prepararClicks() {&#10;        if (adapter != null) adapter.setOnItemClick(sid -&gt; {&#10;            if (navController != null) {&#10;                try {&#10;                    Bundle b = new Bundle(); b.putLong(&quot;solicitudId&quot;, sid);&#10;                    navController.navigate(R.id.action_home_to_solicitudMapa, b);&#10;                } catch (Exception ignored) {}&#10;            }&#10;        });&#10;    }&#10;&#10;    private void cargarPanel() {&#10;        if (swRefresh != null) swRefresh.setRefreshing(true);&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                SessionManager sm = new SessionManager(requireContext());&#10;                String email = sm.getEmail();&#10;                if (TextUtils.isEmpty(email)) {&#10;                    runOnUi(() -&gt; {&#10;                        if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                        Toast.makeText(requireContext(), &quot;Sesión no válida&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                    return;&#10;                }&#10;                com.hfad.encomiendas.data.User u = db.userDao().findByEmail(email);&#10;                if (u == null) {&#10;                    runOnUi(() -&gt; {&#10;                        if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                        Toast.makeText(requireContext(), &quot;Usuario no encontrado&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;                    return;&#10;                }&#10;&#10;                int cPend = db.solicitudDao().countByEstado(u.id, &quot;PENDIENTE&quot;);&#10;                int cAsig = db.solicitudDao().countByEstado(u.id, &quot;ASIGNADA&quot;);&#10;                int cReco = db.solicitudDao().countByEstado(u.id, &quot;RECOLECTADA&quot;);&#10;&#10;                List&lt;SolicitudDao.SolicitudConEta&gt; ultimas = db.solicitudDao().listAllByUserWithEta(u.id, 20);&#10;&#10;                runOnUi(() -&gt; {&#10;                    tvCountPendientes.setText(String.valueOf(cPend));&#10;                    tvCountAsignadas.setText(String.valueOf(cAsig));&#10;                    tvCountRecolectadas.setText(String.valueOf(cReco));&#10;&#10;                    adapter.setData(ultimas);&#10;                    adapter.refreshLocationsAsync();&#10;                    tvEmpty.setVisibility(adapter.getItemCount() == 0 ? View.VISIBLE : View.GONE);&#10;                    if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                    prepararClicks();&#10;                });&#10;&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; {&#10;                    if (swRefresh != null) swRefresh.setRefreshing(false);&#10;                    Toast.makeText(requireContext(), &quot;Error: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;            }&#10;        });&#10;    }&#10;&#10;    // Optimizar MapView en reciclado&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (rvSolicitudes != null) {&#10;            RecyclerView.Adapter a = rvSolicitudes.getAdapter();&#10;            if (a instanceof UltimasAdapter) {&#10;                // no acceso directo a los holders ya reciclados; rely en GC&#10;            }&#10;        }&#10;    }&#10;&#10;    private void runOnUi(Runnable r) { if (!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/RecoleccionMapaFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/RecoleccionMapaFragment.java" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.navigation.fragment.NavHostFragment;&#10;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.MapView;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.gms.maps.model.Polyline;&#10;import com.google.android.gms.maps.model.PolylineOptions;&#10;import com.hfad.encomiendas.BuildConfig;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Asignacion;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.data.TrackingEventDao;&#10;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.InputStream;&#10;import java.io.InputStreamReader;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;/**&#10; * Mapa a pantalla completa para una asignación de recolección.&#10; * Muestra: marcador del recolector (última ubicación registrada) + marcador del destino (dirección a recoger) + ruta.&#10; */&#10;public class RecoleccionMapaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final double BOGOTA_LAT = 4.7110;&#10;    private static final double BOGOTA_LON = -74.0721;&#10;    private static final long REFRESH_MS = 30_000L;&#10;&#10;    private int asignacionId = -1;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat, destinoLon; // destino&#10;&#10;    private MapView mapView; private GoogleMap gMap;&#10;    private Marker markerRecolector, markerDestino;&#10;    private Polyline routePolyline;&#10;    private Double lastRecolectorLat, lastRecolectorLon;&#10;&#10;    private View btnCenter; private ImageButton btnBack; private TextView tvStatus;&#10;&#10;    private final Runnable refresco = new Runnable() {&#10;        @Override public void run() {&#10;            cargarLastLocation();&#10;            if (mapView != null) mapView.postDelayed(this, REFRESH_MS);&#10;        }&#10;    };&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_recoleccion_mapa, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(&quot;asignacionId&quot;, -1) : -1;&#10;        mapView = v.findViewById(R.id.mapFullReco);&#10;        btnCenter = v.findViewById(R.id.fabCenterReco);&#10;        btnBack = v.findViewById(R.id.btnBackReco);&#10;        tvStatus = v.findViewById(R.id.tvStatusReco);&#10;&#10;        if (mapView != null) { mapView.onCreate(savedInstanceState); mapView.getMapAsync(this); }&#10;        if (btnBack != null) btnBack.setOnClickListener(v1 -&gt; requireActivity().onBackPressed());&#10;        if (btnCenter != null) btnCenter.setOnClickListener(v12 -&gt; centerCamera(true));&#10;&#10;        cargarDatosIniciales();&#10;        cargarLastLocation();&#10;    }&#10;&#10;    private void cargarDatosIniciales() {&#10;        if (asignacionId &lt;= 0) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;                if (a != null) {&#10;                    solicitudId = a.solicitudId;&#10;                }&#10;                if (solicitudId &gt; 0) {&#10;                    Solicitud s = db.solicitudDao().byId(solicitudId);&#10;                    if (s != null) { destinoLat = s.lat; destinoLon = s.lon; }&#10;                }&#10;                if (getActivity()!=null) getActivity().runOnUiThread(() -&gt; {&#10;                    if (gMap != null) pintarMarcadores(false);&#10;                });&#10;            } catch (Exception ignore) {}&#10;        });&#10;    }&#10;&#10;    private void cargarLastLocation() {&#10;        if (solicitudId &lt;= 0) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                TrackingEventDao.LastLoc loc = AppDatabase.getInstance(requireContext())&#10;                        .trackingEventDao().lastLocationForShipment(solicitudId);&#10;                if (loc != null &amp;&amp; loc.lat != null &amp;&amp; loc.lon != null) {&#10;                    lastRecolectorLat = loc.lat; lastRecolectorLon = loc.lon;&#10;                    if (getActivity()!=null) getActivity().runOnUiThread(() -&gt; {&#10;                        pintarMarcadores(false); intentarRuta();&#10;                        actualizarStatus();&#10;                    });&#10;                }&#10;            } catch (Exception ignore) {}&#10;        });&#10;    }&#10;&#10;    private void actualizarStatus() {&#10;        if (tvStatus == null) return;&#10;        String txt;&#10;        if (lastRecolectorLat != null) {&#10;            txt = String.format(Locale.getDefault(), &quot;Recolector: %.5f, %.5f&quot;, lastRecolectorLat, lastRecolectorLon);&#10;        } else {&#10;            txt = &quot;Sin ubicación de recolector aún&quot;;&#10;        }&#10;        tvStatus.setText(txt);&#10;    }&#10;&#10;    private void pintarMarcadores(boolean force) {&#10;        if (gMap == null) return;&#10;        if (lastRecolectorLat != null &amp;&amp; lastRecolectorLon != null) {&#10;            LatLng posR = new LatLng(lastRecolectorLat, lastRecolectorLon);&#10;            if (markerRecolector == null) markerRecolector = gMap.addMarker(new MarkerOptions().position(posR).title(&quot;Recolector&quot;));&#10;            else markerRecolector.setPosition(posR);&#10;        }&#10;        if (destinoLat != null &amp;&amp; destinoLon != null) {&#10;            LatLng posD = new LatLng(destinoLat, destinoLon);&#10;            if (markerDestino == null) markerDestino = gMap.addMarker(new MarkerOptions().position(posD).title(&quot;Destino&quot;));&#10;        }&#10;        if (force) centerCamera(false);&#10;    }&#10;&#10;    private void centerCamera(boolean animate) {&#10;        if (gMap == null) return;&#10;        LatLng target;&#10;        if (lastRecolectorLat != null &amp;&amp; destinoLat != null) {&#10;            target = new LatLng( (lastRecolectorLat+destinoLat)/2.0, (lastRecolectorLon+destinoLon)/2.0 );&#10;            if (animate) gMap.animateCamera(CameraUpdateFactory.newLatLngZoom(target, 13f)); else gMap.moveCamera(CameraUpdateFactory.newLatLngZoom(target,13f));&#10;        } else if (lastRecolectorLat != null) {&#10;            target = new LatLng(lastRecolectorLat, lastRecolectorLon);&#10;            if (animate) gMap.animateCamera(CameraUpdateFactory.newLatLngZoom(target, 14f)); else gMap.moveCamera(CameraUpdateFactory.newLatLngZoom(target,14f));&#10;        } else if (destinoLat != null) {&#10;            target = new LatLng(destinoLat, destinoLon);&#10;            if (animate) gMap.animateCamera(CameraUpdateFactory.newLatLngZoom(target, 14f)); else gMap.moveCamera(CameraUpdateFactory.newLatLngZoom(target,14f));&#10;        } else {&#10;            target = new LatLng(BOGOTA_LAT, BOGOTA_LON);&#10;            if (animate) gMap.animateCamera(CameraUpdateFactory.newLatLngZoom(target, 11f)); else gMap.moveCamera(CameraUpdateFactory.newLatLngZoom(target,11f));&#10;        }&#10;    }&#10;&#10;    /* ===== Ruta ===== */&#10;    private boolean routeRequested = false;&#10;    private Double lastRouteFromLat, lastRouteFromLon;&#10;    private void intentarRuta() {&#10;        if (gMap == null || destinoLat == null || destinoLon == null || lastRecolectorLat == null) return;&#10;        if (lastRouteFromLat != null &amp;&amp; lastRouteFromLon != null) {&#10;            double d = Math.hypot(lastRouteFromLat - lastRecolectorLat, lastRouteFromLon - lastRecolectorLon);&#10;            if (d &lt; 0.0003 &amp;&amp; routePolyline != null) return;&#10;        }&#10;        if (routeRequested) return;&#10;        routeRequested = true;&#10;        final double oLat = lastRecolectorLat, oLon = lastRecolectorLon, dLat = destinoLat, dLon = destinoLon;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; fetchRoute(oLat, oLon, dLat, dLon));&#10;    }&#10;&#10;    private void fetchRoute(double oLat, double oLon, double dLat, double dLon) {&#10;        List&lt;LatLng&gt; decoded = null;&#10;        String key = BuildConfig.MAPS_API_KEY;&#10;        boolean canApi = key != null &amp;&amp; !key.trim().isEmpty();&#10;        if (canApi) {&#10;            String urlStr = String.format(Locale.US,&#10;                    &quot;https://maps.googleapis.com/maps/api/directions/json?origin=%f,%f&amp;destination=%f,%f&amp;mode=driving&amp;key=%s&quot;,&#10;                    oLat,oLon,dLat,dLon,key);&#10;            HttpURLConnection conn = null;&#10;            try {&#10;                conn = (HttpURLConnection) new URL(urlStr).openConnection();&#10;                conn.setConnectTimeout(8000); conn.setReadTimeout(10000); conn.connect();&#10;                if (conn.getResponseCode()==200) {&#10;                    InputStream is = conn.getInputStream();&#10;                    BufferedReader br = new BufferedReader(new InputStreamReader(is));&#10;                    StringBuilder sb = new StringBuilder(); String line; while((line=br.readLine())!=null) sb.append(line);&#10;                    JSONObject root = new JSONObject(sb.toString());&#10;                    JSONArray routes = root.optJSONArray(&quot;routes&quot;);&#10;                    if (routes != null &amp;&amp; routes.length()&gt;0) {&#10;                        JSONObject r0 = routes.getJSONObject(0);&#10;                        JSONObject poly = r0.getJSONObject(&quot;overview_polyline&quot;);&#10;                        decoded = decodePolyline(poly.getString(&quot;points&quot;));&#10;                    }&#10;                }&#10;            } catch (Exception ignore) {} finally { if (conn!=null) conn.disconnect(); }&#10;        }&#10;        if (decoded == null || decoded.isEmpty()) {&#10;            decoded = new ArrayList&lt;&gt;(); decoded.add(new LatLng(oLat,oLon)); decoded.add(new LatLng(dLat,dLon));&#10;        }&#10;        final List&lt;LatLng&gt; finalDecoded = decoded;&#10;        if (getActivity()!=null) getActivity().runOnUiThread(() -&gt; drawRoute(finalDecoded, oLat, oLon));&#10;    }&#10;&#10;    private void drawRoute(List&lt;LatLng&gt; pts, double fromLat, double fromLon) {&#10;        routeRequested = false; lastRouteFromLat = fromLat; lastRouteFromLon = fromLon;&#10;        if (gMap == null || pts == null || pts.isEmpty()) return;&#10;        if (routePolyline != null) routePolyline.remove();&#10;        PolylineOptions opts = new PolylineOptions().width(10f).color(0xFF1976D2).geodesic(true);&#10;        opts.addAll(pts);&#10;        routePolyline = gMap.addPolyline(opts);&#10;    }&#10;&#10;    private List&lt;LatLng&gt; decodePolyline(String encoded) {&#10;        List&lt;LatLng&gt; poly = new ArrayList&lt;&gt;();&#10;        int index = 0, len = encoded.length();&#10;        int lat = 0, lng = 0;&#10;        while (index &lt; len) {&#10;            int b, shift = 0, result = 0;&#10;            do { b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20);&#10;            int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1)); lat += dlat;&#10;            shift = 0; result = 0;&#10;            do { b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20);&#10;            int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1)); lng += dlng;&#10;            double latD = lat / 1E5; double lonD = lng / 1E5; poly.add(new LatLng(latD, lonD));&#10;        }&#10;        return poly;&#10;    }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        this.gMap = googleMap;&#10;        centerCamera(false);&#10;        pintarMarcadores(true);&#10;        intentarRuta();&#10;    }&#10;&#10;    @Override public void onResume() { super.onResume(); if (mapView!=null) mapView.onResume(); if (mapView!=null) mapView.postDelayed(refresco, REFRESH_MS); }&#10;    @Override public void onPause() { super.onPause(); if (mapView!=null) { mapView.onPause(); mapView.removeCallbacks(refresco);} }&#10;    @Override public void onDestroyView() { super.onDestroyView(); if (mapView!=null) mapView.onDestroy(); }&#10;    @Override public void onLowMemory() { super.onLowMemory(); if (mapView!=null) mapView.onLowMemory(); }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/SolicitudMapaFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/SolicitudMapaFragment.java" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.MapView;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.TrackingEventDao;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;public class SolicitudMapaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private long solicitudId = -1;&#10;    private MapView mapView; private GoogleMap gMap; private Marker markerRecolector;&#10;    private TextView tvInfo, btnCerrar;&#10;    private View fabCenter;&#10;    private Double lastLat, lastLon; private String lastWhen;&#10;&#10;    private final Runnable refresco = new Runnable() {&#10;        @Override public void run() { cargarUbicacion(); mapView.postDelayed(this, 30_000); }&#10;    };&#10;&#10;    @Nullable @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_solicitud_mapa, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        solicitudId = getArguments() != null ? getArguments().getLong(&quot;solicitudId&quot;, -1) : -1;&#10;        mapView = v.findViewById(R.id.mapFull);&#10;        tvInfo  = v.findViewById(R.id.tvInfo);&#10;        btnCerrar = v.findViewById(R.id.btnCerrar);&#10;        fabCenter = v.findViewById(R.id.fabCenter);&#10;&#10;        if (mapView != null) {&#10;            mapView.onCreate(savedInstanceState);&#10;            mapView.getMapAsync(this);&#10;        }&#10;        if (btnCerrar != null) btnCerrar.setOnClickListener(vw -&gt; requireActivity().onBackPressed());&#10;        if (fabCenter != null) fabCenter.setOnClickListener(vw -&gt; center());&#10;        cargarUbicacion();&#10;    }&#10;&#10;    private void cargarUbicacion() {&#10;        if (solicitudId &lt;= 0 || !isAdded()) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                TrackingEventDao.LastLoc loc = AppDatabase.getInstance(requireContext())&#10;                        .trackingEventDao().lastLocationForShipment(solicitudId);&#10;                if (loc != null &amp;&amp; loc.lat != null &amp;&amp; loc.lon != null) {&#10;                    lastLat = loc.lat; lastLon = loc.lon; lastWhen = loc.whenIso;&#10;                    if (getActivity() != null) getActivity().runOnUiThread(() -&gt; {&#10;                        actualizarUi(); pintar();&#10;                    });&#10;                }&#10;            } catch (Exception ignore) {}&#10;        });&#10;    }&#10;&#10;    private void actualizarUi() {&#10;        if (tvInfo == null) return;&#10;        String delta = deltaHuman(lastWhen);&#10;        tvInfo.setText(&quot;Recolector: &quot; + (lastLat==null?&quot;-&quot;:String.format(Locale.getDefault(),&quot;%.5f, %.5f&quot;, lastLat,lastLon)) + (TextUtils.isEmpty(delta)?&quot;&quot;:&quot; (&quot;+delta+&quot;)&quot;));&#10;    }&#10;&#10;    private String deltaHuman(String iso) {&#10;        if (iso == null) return &quot;&quot;;&#10;        try {&#10;            String base = iso.replace('Z',' ').trim();&#10;            if (base.length() &gt;= 19) base = base.substring(0,19);&#10;            SimpleDateFormat f = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, Locale.getDefault());&#10;            long t = f.parse(base).getTime();&#10;            long diff = Math.max(0, System.currentTimeMillis() - t);&#10;            long mins = diff/60000L;&#10;            if (mins &lt; 1) return &quot;hace instantes&quot;;&#10;            if (mins &lt; 60) return &quot;hace &quot;+mins+&quot; min&quot;;&#10;            long hrs=mins/60; if (hrs&lt;24) return &quot;hace &quot;+hrs+&quot; h&quot;;&#10;            long d=hrs/24; return &quot;hace &quot;+d+&quot; d&quot;;&#10;        } catch(Exception e){return &quot;&quot;;}&#10;    }&#10;&#10;    private void pintar() {&#10;        if (gMap == null || lastLat==null || lastLon==null) return;&#10;        LatLng p = new LatLng(lastLat, lastLon);&#10;        if (markerRecolector == null) {&#10;            markerRecolector = gMap.addMarker(new MarkerOptions().position(p).title(&quot;Recolector&quot;));&#10;        } else markerRecolector.setPosition(p);&#10;        gMap.animateCamera(CameraUpdateFactory.newLatLngZoom(p, 15f));&#10;    }&#10;&#10;    private void center() { pintar(); }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) { this.gMap = googleMap; pintar(); }&#10;&#10;    @Override public void onResume() { super.onResume(); if (mapView!=null) mapView.onResume(); mapView.postDelayed(refresco, 30_000); }&#10;    @Override public void onPause() { super.onPause(); if (mapView!=null) mapView.onPause(); mapView.removeCallbacks(refresco); }&#10;    @Override public void onDestroyView() { super.onDestroyView(); if (mapView!=null) mapView.onDestroy(); }&#10;    @Override public void onLowMemory() { super.onLowMemory(); if (mapView!=null) mapView.onLowMemory(); }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_in_left.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_in_left.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_slow_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;-100%&quot;&#10;        android:toXDelta=&quot;0%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;0&quot; android:toAlpha=&quot;1&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_in_right.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_in_right.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_slow_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;100%&quot;&#10;        android:toXDelta=&quot;0%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;0&quot; android:toAlpha=&quot;1&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_out_left.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_out_left.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_linear_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;0%&quot;&#10;        android:toXDelta=&quot;-100%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;1&quot; android:toAlpha=&quot;0&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_out_right.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_out_right.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_linear_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;0%&quot;&#10;        android:toXDelta=&quot;100%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;1&quot; android:toAlpha=&quot;0&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_entrega.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_entrega.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;Entrega&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEstado&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/map_container_entrega&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;/&gt;&#10;                &lt;com.google.android.material.chip.Chip&#10;                    android:id=&quot;@+id/chipDistance&quot;&#10;                    style=&quot;@style/Widget.Material3.Chip.Assist&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:padding=&quot;8dp&quot;&#10;                    android:text=&quot;ETA: —&quot;/&gt;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;/&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnIniciarRuta&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Iniciar ruta&quot;/&gt;&#10;                    &lt;Space android:layout_width=&quot;12dp&quot; android:layout_height=&quot;1dp&quot;/&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnMarcarEntregado&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.FilledTonalButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Entregado&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;Entrega&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEstado&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/map_container_entrega&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;/&gt;&#10;                &lt;com.google.android.material.chip.Chip&#10;                    android:id=&quot;@+id/chipDistance&quot;&#10;                    style=&quot;@style/Widget.Material3.Chip.Assist&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:padding=&quot;8dp&quot;&#10;                    android:text=&quot;ETA: —&quot;/&gt;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;/&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnIniciarRuta&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Iniciar ruta&quot;/&gt;&#10;                    &lt;Space android:layout_width=&quot;12dp&quot; android:layout_height=&quot;1dp&quot;/&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnMarcarEntregado&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Entregado&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_recoleccion.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_recoleccion.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;!-- Encabezado (solo orden/estado) --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;—&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvSub&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Orden: —&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Seguimiento: ETA + Timeline --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;com.google.android.material.card.MaterialCardView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&gt;&#10;                    &lt;FrameLayout&#10;                        android:id=&quot;@+id/map_container&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;200dp&quot;/&gt;&#10;                &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ETA: —&quot;&#10;                    android:padding=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Foto --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Foto de evidencia&quot;&#10;                    android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/ivFoto&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;200dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:scaleType=&quot;centerCrop&quot;&#10;                    android:background=&quot;#22000000&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;/&gt;&#10;&#10;                &lt;!-- (1) Sin foto: botón único --&gt;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnTomarFoto&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Tomar foto&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;/&gt;&#10;&#10;                &lt;!-- (2) Foto pendiente: Editar + Confirmar --&gt;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/llEditarConfirmar&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnEditarFoto&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Editar&quot;/&gt;&#10;&#10;                    &lt;Space&#10;                        android:layout_width=&quot;12dp&quot;&#10;                        android:layout_height=&quot;1dp&quot;/&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnConfirmarFoto&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Confirmar&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- (3) Foto confirmada: solo Editar --&gt;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/llSoloEditar&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnSoloEditar&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Editar&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Firma --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Firma del receptor&quot;&#10;                    android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;                &lt;!-- Vista PREVIEW (se muestra cuando hay firma guardada) --&gt;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/ivFirmaPreview&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:background=&quot;@android:color/white&quot;&#10;                    android:scaleType=&quot;fitCenter&quot;&#10;                    android:visibility=&quot;gone&quot;/&gt;&#10;&#10;                &lt;!-- Vista de DIBUJO (solo cuando no hay firma o guía no activa) --&gt;&#10;                &lt;com.hfad.encomiendas.ui.widgets.SignatureView&#10;                    android:id=&quot;@+id/signView&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:background=&quot;@android:color/white&quot;/&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnLimpiar&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Limpiar&quot;/&gt;&#10;&#10;                    &lt;Space&#10;                        android:layout_width=&quot;12dp&quot;&#10;                        android:layout_height=&quot;1dp&quot;/&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnGuardarFirma&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Guardar firma&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvEstado&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:gravity=&quot;center&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;!-- Encabezado (solo orden/estado) --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;—&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvSub&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Orden: —&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Seguimiento: ETA + Timeline + Mapa Recolector --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;!-- Contenedor del mapa --&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/frameMapaMini&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;200dp&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;                    &lt;com.google.android.gms.maps.MapView&#10;                        android:id=&quot;@+id/map_recolector&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;/&gt;&#10;                &lt;/FrameLayout&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;ETA: —&quot;&#10;                    android:padding=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Foto --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Foto de evidencia&quot;&#10;                    android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/ivFoto&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;200dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:scaleType=&quot;centerCrop&quot;&#10;                    android:background=&quot;#22000000&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;/&gt;&#10;&#10;                &lt;!-- (1) Sin foto: botón único --&gt;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btnTomarFoto&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Tomar foto&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;/&gt;&#10;&#10;                &lt;!-- (2) Foto pendiente: Editar + Confirmar --&gt;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/llEditarConfirmar&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnEditarFoto&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Editar&quot;/&gt;&#10;&#10;                    &lt;Space&#10;                        android:layout_width=&quot;12dp&quot;&#10;                        android:layout_height=&quot;1dp&quot;/&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnConfirmarFoto&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Confirmar&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- (3) Foto confirmada: solo Editar --&gt;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/llSoloEditar&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnSoloEditar&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Editar&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;!-- Firma --&gt;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Firma del receptor&quot;&#10;                    android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;                &lt;!-- Vista PREVIEW (se muestra cuando hay firma guardada) --&gt;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/ivFirmaPreview&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:background=&quot;@android:color/white&quot;&#10;                    android:scaleType=&quot;fitCenter&quot;&#10;                    android:visibility=&quot;gone&quot;/&gt;&#10;&#10;                &lt;!-- Vista de DIBUJO (solo cuando no hay firma o guía no activa) --&gt;&#10;                &lt;com.hfad.encomiendas.ui.widgets.SignatureView&#10;                    android:id=&quot;@+id/signView&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:background=&quot;@android:color/white&quot;/&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnLimpiar&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Limpiar&quot;/&gt;&#10;&#10;                    &lt;Space&#10;                        android:layout_width=&quot;12dp&quot;&#10;                        android:layout_height=&quot;1dp&quot;/&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnGuardarFirma&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Guardar firma&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvEstado&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:gravity=&quot;center&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_recoleccion_mapa.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_recoleccion_mapa.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;com.google.android.gms.maps.MapView&#10;        android:id=&quot;@+id/mapFullReco&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;#66000000&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnBackReco&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#10;            android:contentDescription=&quot;Cerrar&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvStatusReco&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:text=&quot;Cargando...&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabCenterReco&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Centrar&quot;&#10;        android:src=&quot;@android:drawable/ic_menu_mylocation&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_solicitud_mapa.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_solicitud_mapa.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;com.google.android.gms.maps.MapView&#10;        android:id=&quot;@+id/mapFull&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:background=&quot;#66000000&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;top&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvInfo&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:text=&quot;Cargando...&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/btnCerrar&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Cerrar&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:background=&quot;@android:color/transparent&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabCenter&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Centrar&quot;&#10;        android:src=&quot;@android:drawable/ic_menu_mylocation&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_solicitud_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_solicitud_dashboard.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginTop=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;16dp&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;!-- Línea 1: Guía + estado --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvGuiaEstado&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;!-- Línea 2: Fecha y ventana --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRango&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;!-- Debajo de tvRango --&gt;&#10;        &lt;!-- Debajo de tvEta --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvUbicacion&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Ubicación: —&quot;&#10;            android:layout_marginTop=&quot;2dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvEta&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;ETA: —&quot;&#10;            android:layout_marginTop=&quot;2dp&quot;/&gt;&#10;&#10;&#10;        &lt;!-- Origen (limpio) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDireccion&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;!-- Destino (usa DestinoDir cuando exista) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDestino&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginTop=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;16dp&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&#10;    android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;!-- Línea 1: Guía + estado --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvGuiaEstado&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;!-- Línea 2: Fecha y ventana --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRango&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;!-- Debajo de tvRango --&gt;&#10;        &lt;!-- Debajo de tvEta --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvUbicacion&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Ubicación: —&quot;&#10;            android:layout_marginTop=&quot;2dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvEta&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;ETA: —&quot;&#10;            android:layout_marginTop=&quot;2dp&quot;/&gt;&#10;&#10;&#10;        &lt;!-- Origen (limpio) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDireccion&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;!-- Destino (usa DestinoDir cuando exista) --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDestino&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;!-- Snapshot estático del mapa --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/ivMapPreview&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:contentDescription=&quot;Mapa&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/loginFragment&quot;&gt;&#10;&#10;    &lt;!-- LOGIN --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/loginFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.LoginFragment&quot;&#10;        android:label=&quot;Iniciar sesión&quot;&gt;&#10;        &lt;!-- Ir a registro --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_registro&quot;&#10;            app:destination=&quot;@id/registroRemitenteFragment&quot; /&gt;&#10;        &lt;!-- Entrar como REMITENTE --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_recoleccion&quot;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Entrar como ASIGNADOR --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_asignador&quot;&#10;            app:destination=&quot;@id/asignadorFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Entrar como RECOLECTOR --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_misAsignaciones&quot;&#10;            app:destination=&quot;@id/misAsignacionesFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- REGISTRO (Remitente) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/registroRemitenteFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RegistroRemitenteFragment&quot;&#10;        android:label=&quot;Registro&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_registro_to_login&quot;&#10;            app:destination=&quot;@id/loginFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- REMITENTE: Solicitar recolección --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/solicitarRecoleccionFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.SolicitarRecoleccionFragment&quot;&#10;        android:label=&quot;Solicitar recolección&quot; /&gt;&#10;&#10;    &lt;!-- ASIGNADOR: Panel por zonas --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/asignadorFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.AsignadorFragment&quot;&#10;        android:label=&quot;Asignador&quot; &gt;&#10;        &lt;!-- Ver detalle de una zona concreta --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_asignador_to_zonaDetalle&quot;&#10;            app:destination=&quot;@id/zonaDetalleFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- ASIGNADOR: Detalle de zona (pendientes/asignadas) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/zonaDetalleFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZonaDetalleFragment&quot;&#10;        android:label=&quot;Detalle de zona&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;fecha&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;zona&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- RECOLECTOR: Lista de asignaciones propias --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/misAsignacionesFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.MisAsignacionesFragment&quot;&#10;        android:label=&quot;Mis asignaciones&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_misAsignaciones_to_detalle&quot;&#10;            app:destination=&quot;@id/detalleRecoleccionFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- RECOLECTOR: Detalle (foto + firma) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/detalleRecoleccionFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.DetalleRecoleccionFragment&quot;&#10;        android:label=&quot;Detalle de recolección&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;asignacionId&quot;&#10;            app:argType=&quot;integer&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/homeDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HomeDashboardFragment&quot;&#10;        android:label=&quot;Panel&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_home_to_solicitar&quot;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/hubDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HubDashboardFragment&quot;&#10;        android:label=&quot;HUB&quot;/&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/entregaFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.EntregaFragment&quot;&#10;        android:label=&quot;Entrega&quot;&gt;&#10;        &lt;argument android:name=&quot;manifiestoItemId&quot; app:argType=&quot;integer&quot;/&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/repartidorDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RepartidorDashboardFragment&quot;&#10;        android:label=&quot;Repartidor&quot; /&gt;&#10;&#10;&lt;/navigation&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/loginFragment&quot;&gt;&#10;&#10;    &lt;!-- LOGIN --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/loginFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.LoginFragment&quot;&#10;        android:label=&quot;Iniciar sesión&quot;&gt;&#10;        &lt;!-- Ir a registro --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_registro&quot;&#10;            app:destination=&quot;@id/registroRemitenteFragment&quot; /&gt;&#10;        &lt;!-- Entrar como REMITENTE --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_recoleccion&quot;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Entrar como ASIGNADOR --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_asignador&quot;&#10;            app:destination=&quot;@id/asignadorFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Entrar como RECOLECTOR --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_misAsignaciones&quot;&#10;            app:destination=&quot;@id/misAsignacionesFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- REGISTRO (Remitente) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/registroRemitenteFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RegistroRemitenteFragment&quot;&#10;        android:label=&quot;Registro&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_registro_to_login&quot;&#10;            app:destination=&quot;@id/loginFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- REMITENTE: Solicitar recolección --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/solicitarRecoleccionFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.SolicitarRecoleccionFragment&quot;&#10;        android:label=&quot;Solicitar recolección&quot; /&gt;&#10;&#10;    &lt;!-- ASIGNADOR: Panel por zonas --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/asignadorFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.AsignadorFragment&quot;&#10;        android:label=&quot;Asignador&quot; &gt;&#10;        &lt;!-- Ver detalle de una zona concreta --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_asignador_to_zonaDetalle&quot;&#10;            app:destination=&quot;@id/zonaDetalleFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- ASIGNADOR: Detalle de zona (pendientes/asignadas) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/zonaDetalleFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZonaDetalleFragment&quot;&#10;        android:label=&quot;Detalle de zona&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;fecha&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;zona&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- RECOLECTOR: Lista de asignaciones propias --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/misAsignacionesFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.MisAsignacionesFragment&quot;&#10;        android:label=&quot;Mis asignaciones&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_misAsignaciones_to_detalle&quot;&#10;            app:destination=&quot;@id/detalleRecoleccionFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- RECOLECTOR: Detalle (foto + firma) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/detalleRecoleccionFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.DetalleRecoleccionFragment&quot;&#10;        android:label=&quot;Detalle de recolección&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;asignacionId&quot;&#10;            app:argType=&quot;integer&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_detalle_to_recoleccionMapa&quot;&#10;            app:destination=&quot;@id/recoleccionMapaFragment&quot;&#10;            app:enterAnim=&quot;@anim/slide_in_right&quot;&#10;            app:exitAnim=&quot;@anim/slide_out_left&quot;&#10;            app:popEnterAnim=&quot;@anim/slide_in_left&quot;&#10;            app:popExitAnim=&quot;@anim/slide_out_right&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/homeDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HomeDashboardFragment&quot;&#10;        android:label=&quot;Panel&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_home_to_solicitar&quot;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_home_to_solicitudMapa&quot;&#10;            app:destination=&quot;@id/solicitudMapaFragment&quot;&#10;            app:enterAnim=&quot;@anim/slide_in_right&quot;&#10;            app:exitAnim=&quot;@anim/slide_out_left&quot;&#10;            app:popEnterAnim=&quot;@anim/slide_in_left&quot;&#10;            app:popExitAnim=&quot;@anim/slide_out_right&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/hubDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HubDashboardFragment&quot;&#10;        android:label=&quot;HUB&quot;/&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/entregaFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.EntregaFragment&quot;&#10;        android:label=&quot;Entrega&quot;&gt;&#10;        &lt;argument android:name=&quot;manifiestoItemId&quot; app:argType=&quot;integer&quot;/&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/repartidorDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RepartidorDashboardFragment&quot;&#10;        android:label=&quot;Repartidor&quot; /&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/solicitudMapaFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.SolicitudMapaFragment&quot;&#10;        android:label=&quot;Mapa&quot;&gt;&#10;        &lt;argument android:name=&quot;solicitudId&quot; app:argType=&quot;long&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/recoleccionMapaFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RecoleccionMapaFragment&quot;&#10;        android:label=&quot;Mapa Recolección&quot;&gt;&#10;        &lt;argument android:name=&quot;asignacionId&quot; app:argType=&quot;integer&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;&lt;/navigation&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/raw/map_dark.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/raw/map_dark.json" />
              <option name="updatedContent" value="[&#10;  {&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#212121&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.icon&quot;,&#10;    &quot;stylers&quot;: [ { &quot;visibility&quot;: &quot;off&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.text.stroke&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#212121&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;administrative&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#bdbdbd&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#181818&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#616161&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.stroke&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#1b1b1b&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road&quot;,&#10;    &quot;elementType&quot;: &quot;geometry.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#2c2c2c&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#8a8a8a&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.arterial&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#373737&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.highway&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#3c3c3c&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.highway.controlled_access&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#4e4e4e&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.local&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#616161&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;transit&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;water&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#000000&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;water&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#3d3d3d&quot; } ]&#10;  }&#10;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>