<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/MainActivity.java" />
              <option name="originalContent" value="package com.hfad.encomiendas;&#10;&#10;import android.Manifest;&#10;import android.content.pm.PackageManager;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.navigation.NavController;&#10;import androidx.navigation.NavGraph;&#10;import androidx.navigation.NavInflater;&#10;import androidx.navigation.NavOptions;&#10;import androidx.navigation.fragment.NavHostFragment;&#10;import androidx.navigation.ui.AppBarConfiguration;&#10;import androidx.navigation.ui.NavigationUI;&#10;&#10;import com.google.android.material.appbar.MaterialToolbar;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.hfad.encomiendas.core.NotificationHelper;&#10;import com.hfad.encomiendas.core.SessionManager;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;    private NavController navController;&#10;    private MaterialToolbar toolbar;&#10;    private SessionManager sessionManager;&#10;    private TextView notificationBadge;&#10;    private int notificationCount = 0;&#10;&#10;    // Destinos de nivel superior (sin botón back)&#10;    private AppBarConfiguration appBarConfiguration;&#10;&#10;    private ActivityResultLauncher&lt;String&gt; notifPermLauncher;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // Inicializar SessionManager&#10;        sessionManager = new SessionManager(this);&#10;&#10;        // Configurar toolbar&#10;        toolbar = findViewById(R.id.topAppBar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        // Canal de notificaciones&#10;        NotificationHelper.ensureChannels(this);&#10;&#10;        // Permiso de notificaciones (13+)&#10;        notifPermLauncher = registerForActivityResult(&#10;                new ActivityResultContracts.RequestPermission(),&#10;                granted -&gt; { /* opcional: feedback */ }&#10;        );&#10;        requestPostNotificationsIfNeeded();&#10;&#10;        // NavHost y controller&#10;        NavHostFragment navHost = (NavHostFragment) getSupportFragmentManager()&#10;                .findFragmentById(R.id.nav_host_fragment);&#10;        if (navHost == null) throw new IllegalStateException(&quot;Falta @id/nav_host_fragment&quot;);&#10;        navController = navHost.getNavController();&#10;&#10;        // Configurar AppBarConfiguration con destinos de nivel superior&#10;        appBarConfiguration = new AppBarConfiguration.Builder(&#10;                R.id.loginFragment,&#10;                R.id.homeDashboardFragment,&#10;                R.id.asignadorFragment,&#10;                R.id.misAsignacionesFragment,&#10;                R.id.hubDashboardFragment,&#10;                R.id.repartidorDashboardFragment,&#10;                R.id.estadisticasFragment&#10;        ).build();&#10;&#10;        // Conectar toolbar con Navigation&#10;        NavigationUI.setupWithNavController(toolbar, navController, appBarConfiguration);&#10;&#10;        // Listener para cambios de destino&#10;        navController.addOnDestinationChangedListener((controller, destination, arguments) -&gt; {&#10;            updateToolbarForDestination(destination.getId(), destination.getLabel());&#10;        });&#10;&#10;        // ⚠ SOLO al primer create: configura el grafo y rutea por rol.&#10;        if (savedInstanceState == null) {&#10;            NavInflater inflater = navController.getNavInflater();&#10;            NavGraph graph = inflater.inflate(R.navigation.nav_graph);&#10;            graph.setStartDestination(R.id.loginFragment);&#10;            navController.setGraph(graph);&#10;&#10;            if (sessionManager.isLoggedIn()) {&#10;                navigateByRole(sessionManager.getRole());&#10;            }&#10;        }&#10;&#10;        // Datos demo si quieres, no afecta el nav state&#10;        seedDemoData();&#10;&#10;        // Simular notificaciones (esto lo conectarías con tu lógica real)&#10;        simulateNotifications();&#10;    }&#10;&#10;    /**&#10;     * Actualizar toolbar según el destino actual&#10;     */&#10;    private void updateToolbarForDestination(int destinationId, CharSequence label) {&#10;        // Ocultar toolbar en login y registro&#10;        if (destinationId == R.id.loginFragment || destinationId == R.id.registroRemitenteFragment) {&#10;            toolbar.setVisibility(View.GONE);&#10;        } else {&#10;            toolbar.setVisibility(View.VISIBLE);&#10;&#10;            // Actualizar título si está disponible&#10;            if (label != null) {&#10;                toolbar.setTitle(label);&#10;            }&#10;&#10;            // Invalidar menú para recargar según contexto&#10;            invalidateOptionsMenu();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        // Limpiar menú anterior&#10;        menu.clear();&#10;&#10;        // Obtener destino actual&#10;        int currentDestination = navController.getCurrentDestination() != null&#10;            ? navController.getCurrentDestination().getId()&#10;            : R.id.loginFragment;&#10;&#10;        // No mostrar menú en login/registro&#10;        if (currentDestination == R.id.loginFragment ||&#10;            currentDestination == R.id.registroRemitenteFragment) {&#10;            return true;&#10;        }&#10;&#10;        // Cargar menú según rol del usuario&#10;        String role = sessionManager.getRole();&#10;        int menuResource = getMenuForRole(role);&#10;        getMenuInflater().inflate(menuResource, menu);&#10;&#10;        return true;&#10;    }&#10;&#10;    /**&#10;     * Obtener el menú apropiado según el rol&#10;     */&#10;    private int getMenuForRole(String role) {&#10;        if (role == null) return R.menu.main_menu;&#10;&#10;        switch (role.toUpperCase()) {&#10;            case &quot;ADMIN&quot;:&#10;                return R.menu.menu_admin;&#10;            case &quot;REMITENTE&quot;:&#10;                return R.menu.menu_remitente;&#10;            case &quot;RECOLECTOR&quot;:&#10;                return R.menu.menu_recolector;&#10;            case &quot;ASIGNADOR&quot;:&#10;                return R.menu.menu_asignador;&#10;            case &quot;OPERADOR&quot;:&#10;            case &quot;OPERADOR_HUB&quot;:&#10;            case &quot;REPARTIDOR&quot;:&#10;            default:&#10;                return R.menu.main_menu;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        int itemId = item.getItemId();&#10;&#10;        // Acciones comunes&#10;        if (itemId == R.id.action_logout) {&#10;            showLogoutConfirmation();&#10;            return true;&#10;        } else if (itemId == R.id.action_profile) {&#10;            showProfile();&#10;            return true;&#10;        } else if (itemId == R.id.action_help) {&#10;            showHelp();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de ADMIN&#10;        if (itemId == R.id.action_statistics) {&#10;            navController.navigate(R.id.estadisticasFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_manage_users) {&#10;            Toast.makeText(this, &quot;Gestión de usuarios - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de REMITENTE&#10;        if (itemId == R.id.action_my_requests) {&#10;            navController.navigate(R.id.homeDashboardFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_new_pickup) {&#10;            navController.navigate(R.id.solicitarRecoleccionFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_history) {&#10;            Toast.makeText(this, &quot;Historial - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de RECOLECTOR&#10;        if (itemId == R.id.action_my_assignments) {&#10;            navController.navigate(R.id.misAsignacionesFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_completed) {&#10;            Toast.makeText(this, &quot;Completadas - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de ASIGNADOR&#10;        if (itemId == R.id.action_manage_zones) {&#10;            navController.navigate(R.id.gestionZonasFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_view_assignments) {&#10;            navController.navigate(R.id.asignadorFragment);&#10;            return true;&#10;        }&#10;&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    /**&#10;     * Mostrar diálogo de confirmación de logout&#10;     */&#10;    private void showLogoutConfirmation() {&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Cerrar sesión&quot;)&#10;            .setMessage(&quot;¿Estás seguro que deseas cerrar sesión?&quot;)&#10;            .setPositiveButton(&quot;Cerrar sesión&quot;, (dialog, which) -&gt; doLogout())&#10;            .setNegativeButton(&quot;Cancelar&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Mostrar perfil de usuario&#10;     */&#10;    private void showProfile() {&#10;        String userEmail = sessionManager.getEmail();&#10;        String userRole = sessionManager.getRole();&#10;&#10;        // Extraer nombre del email (antes del @)&#10;        String userName = userEmail.contains(&quot;@&quot;)&#10;            ? userEmail.substring(0, userEmail.indexOf(&quot;@&quot;))&#10;            : userEmail;&#10;&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Mi Perfil&quot;)&#10;            .setMessage(&quot;Usuario: &quot; + userName + &quot;\n&quot; +&#10;                       &quot;Email: &quot; + userEmail + &quot;\n&quot; +&#10;                       &quot;Rol: &quot; + userRole)&#10;            .setPositiveButton(&quot;Cerrar&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Mostrar ayuda&#10;     */&#10;    private void showHelp() {&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Ayuda&quot;)&#10;            .setMessage(&quot;Sistema de Gestión de Encomiendas\n\n&quot; +&#10;                       &quot;Para soporte contacta a:\n&quot; +&#10;                       &quot;soporte@encomiendas.com\n\n&quot; +&#10;                       &quot;Versión: 1.0&quot;)&#10;            .setPositiveButton(&quot;Entendido&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Mostrar configuración&#10;     */&#10;    private void showSettings() {&#10;        Toast.makeText(this, &quot;Configuración - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    /**&#10;     * Acción al hacer click en notificaciones&#10;     */&#10;    private void onNotificationClick() {&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Notificaciones (&quot; + notificationCount + &quot;)&quot;)&#10;            .setMessage(&quot;• Nueva asignación disponible\n• Recolección completada\n• Actualización del sistema&quot;)&#10;            .setPositiveButton(&quot;Cerrar&quot;, (dialog, which) -&gt; {&#10;                // Marcar como leídas&#10;                updateNotificationBadge(0);&#10;            })&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Actualizar badge de notificaciones&#10;     */&#10;    private void updateNotificationBadge(int count) {&#10;        notificationCount = count;&#10;        if (notificationBadge != null) {&#10;            if (count &gt; 0) {&#10;                notificationBadge.setText(String.valueOf(count));&#10;                notificationBadge.setVisibility(View.VISIBLE);&#10;            } else {&#10;                notificationBadge.setVisibility(View.GONE);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Simular notificaciones (conectar con lógica real)&#10;     */&#10;    private void simulateNotifications() {&#10;        // Ejemplo: simular 3 notificaciones después de 2 segundos&#10;        toolbar.postDelayed(() -&gt; {&#10;            if (sessionManager.isLoggedIn()) {&#10;                updateNotificationBadge(3);&#10;            }&#10;        }, 2000);&#10;    }&#10;&#10;    private void doLogout() {&#10;        sessionManager.logout();&#10;        try {&#10;            NavOptions opts = new NavOptions.Builder()&#10;                    .setPopUpTo(navController.getGraph().getStartDestinationId(), true)&#10;                    .build();&#10;            navController.navigate(R.id.loginFragment, null, opts);&#10;            Toast.makeText(this, &quot;Sesión cerrada&quot;, Toast.LENGTH_SHORT).show();&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Reset nav tras logout&quot;, e);&#10;            navController.setGraph(R.navigation.nav_graph);&#10;        }&#10;    }&#10;&#10;    private void navigateByRole(String roleRaw) {&#10;        String role = (roleRaw == null ? &quot;&quot; : roleRaw.trim().toUpperCase());&#10;        int destId;&#10;        switch (role) {&#10;            case &quot;ADMIN&quot;:&#10;                destId = R.id.estadisticasFragment; break;&#10;            case &quot;OPERADOR&quot;:&#10;            case &quot;OPERADOR_HUB&quot;:&#10;                destId = R.id.hubDashboardFragment; break;&#10;            case &quot;REPARTIDOR&quot;:&#10;                destId = R.id.repartidorDashboardFragment; break;&#10;            case &quot;ASIGNADOR&quot;:&#10;                destId = R.id.asignadorFragment; break;&#10;            case &quot;RECOLECTOR&quot;:&#10;                destId = R.id.misAsignacionesFragment; break;&#10;            default:&#10;                destId = R.id.homeDashboardFragment; break;&#10;        }&#10;        try {&#10;            NavOptions opts = new NavOptions.Builder()&#10;                    .setPopUpTo(R.id.loginFragment, true)&#10;                    .build();&#10;            navController.navigate(destId, null, opts);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;navigateByRole error (&quot; + role + &quot;)&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void seedDemoData() {&#10;        // Ejecutar seeder en background thread después de que la BD esté lista&#10;        new Thread(() -&gt; {&#10;            try {&#10;                // Pequeña pausa para asegurar que la BD esté completamente inicializada&#10;                Thread.sleep(1000);&#10;                com.hfad.encomiendas.core.DemoSeeder.seedOnce(getApplicationContext());&#10;                Log.d(TAG, &quot;Seeder ejecutado correctamente&quot;);&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error ejecutando seeder&quot;, e);&#10;            }&#10;        }).start();&#10;    }&#10;&#10;    private void requestPostNotificationsIfNeeded() {&#10;        if (Build.VERSION.SDK_INT &gt;= 33 &amp;&amp;&#10;                ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS)&#10;                        != PackageManager.PERMISSION_GRANTED) {&#10;            notifPermLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        return NavigationUI.navigateUp(navController, appBarConfiguration)&#10;                || super.onSupportNavigateUp();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.hfad.encomiendas;&#10;&#10;import android.Manifest;&#10;import android.content.pm.PackageManager;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.navigation.NavController;&#10;import androidx.navigation.NavGraph;&#10;import androidx.navigation.NavInflater;&#10;import androidx.navigation.NavOptions;&#10;import androidx.navigation.fragment.NavHostFragment;&#10;import androidx.navigation.ui.AppBarConfiguration;&#10;import androidx.navigation.ui.NavigationUI;&#10;&#10;import com.google.android.material.appbar.MaterialToolbar;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.hfad.encomiendas.core.NotificationHelper;&#10;import com.hfad.encomiendas.core.SessionManager;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;    private NavController navController;&#10;    private MaterialToolbar toolbar;&#10;    private SessionManager sessionManager;&#10;    private TextView notificationBadge;&#10;    private int notificationCount = 0;&#10;&#10;    // Destinos de nivel superior (sin botón back)&#10;    private AppBarConfiguration appBarConfiguration;&#10;&#10;    private ActivityResultLauncher&lt;String&gt; notifPermLauncher;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // Inicializar SessionManager&#10;        sessionManager = new SessionManager(this);&#10;&#10;        // Configurar toolbar&#10;        toolbar = findViewById(R.id.topAppBar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        // Canal de notificaciones&#10;        NotificationHelper.ensureChannels(this);&#10;&#10;        // Permiso de notificaciones (13+)&#10;        notifPermLauncher = registerForActivityResult(&#10;                new ActivityResultContracts.RequestPermission(),&#10;                granted -&gt; { /* opcional: feedback */ }&#10;        );&#10;        requestPostNotificationsIfNeeded();&#10;&#10;        // NavHost y controller&#10;        NavHostFragment navHost = (NavHostFragment) getSupportFragmentManager()&#10;                .findFragmentById(R.id.nav_host_fragment);&#10;        if (navHost == null) throw new IllegalStateException(&quot;Falta @id/nav_host_fragment&quot;);&#10;        navController = navHost.getNavController();&#10;&#10;        // Configurar AppBarConfiguration con destinos de nivel superior&#10;        appBarConfiguration = new AppBarConfiguration.Builder(&#10;                R.id.loginFragment,&#10;                R.id.homeDashboardFragment,&#10;                R.id.asignadorFragment,&#10;                R.id.misAsignacionesFragment,&#10;                R.id.hubDashboardFragment,&#10;                R.id.repartidorDashboardFragment,&#10;                R.id.estadisticasFragment&#10;        ).build();&#10;&#10;        // Conectar toolbar con Navigation&#10;        NavigationUI.setupWithNavController(toolbar, navController, appBarConfiguration);&#10;&#10;        // Listener para cambios de destino&#10;        navController.addOnDestinationChangedListener((controller, destination, arguments) -&gt; {&#10;            updateToolbarForDestination(destination.getId(), destination.getLabel());&#10;        });&#10;&#10;        // ⚠ SOLO al primer create: configura el grafo y rutea por rol.&#10;        if (savedInstanceState == null) {&#10;            NavInflater inflater = navController.getNavInflater();&#10;            NavGraph graph = inflater.inflate(R.navigation.nav_graph);&#10;            graph.setStartDestination(R.id.loginFragment);&#10;            navController.setGraph(graph);&#10;&#10;            if (sessionManager.isLoggedIn()) {&#10;                navigateByRole(sessionManager.getRole());&#10;            }&#10;        }&#10;&#10;        // Datos demo si quieres, no afecta el nav state&#10;        seedDemoData();&#10;&#10;        // Simular notificaciones (esto lo conectarías con tu lógica real)&#10;        simulateNotifications();&#10;    }&#10;&#10;    /**&#10;     * Actualizar toolbar según el destino actual&#10;     */&#10;    private void updateToolbarForDestination(int destinationId, CharSequence label) {&#10;        // Ocultar toolbar en login y registro&#10;        if (destinationId == R.id.loginFragment || destinationId == R.id.registroRemitenteFragment) {&#10;            toolbar.setVisibility(View.GONE);&#10;        } else {&#10;            toolbar.setVisibility(View.VISIBLE);&#10;&#10;            // Actualizar título si está disponible&#10;            if (label != null) {&#10;                toolbar.setTitle(label);&#10;            }&#10;&#10;            // Invalidar menú para recargar según contexto&#10;            invalidateOptionsMenu();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        // Limpiar menú anterior&#10;        menu.clear();&#10;&#10;        // Obtener destino actual&#10;        int currentDestination = navController.getCurrentDestination() != null&#10;            ? navController.getCurrentDestination().getId()&#10;            : R.id.loginFragment;&#10;&#10;        // No mostrar menú en login/registro&#10;        if (currentDestination == R.id.loginFragment ||&#10;            currentDestination == R.id.registroRemitenteFragment) {&#10;            return true;&#10;        }&#10;&#10;        // Cargar menú según rol del usuario&#10;        String role = sessionManager.getRole();&#10;        int menuResource = getMenuForRole(role);&#10;        getMenuInflater().inflate(menuResource, menu);&#10;&#10;        return true;&#10;    }&#10;&#10;    /**&#10;     * Obtener el menú apropiado según el rol&#10;     */&#10;    private int getMenuForRole(String role) {&#10;        if (role == null) return R.menu.main_menu;&#10;&#10;        switch (role.toUpperCase()) {&#10;            case &quot;ADMIN&quot;:&#10;                return R.menu.menu_admin;&#10;            case &quot;REMITENTE&quot;:&#10;                return R.menu.menu_remitente;&#10;            case &quot;RECOLECTOR&quot;:&#10;                return R.menu.menu_recolector;&#10;            case &quot;ASIGNADOR&quot;:&#10;                return R.menu.menu_asignador;&#10;            case &quot;OPERADOR&quot;:&#10;            case &quot;OPERADOR_HUB&quot;:&#10;            case &quot;REPARTIDOR&quot;:&#10;            default:&#10;                return R.menu.main_menu;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        int itemId = item.getItemId();&#10;&#10;        // Acciones comunes&#10;        if (itemId == R.id.action_logout) {&#10;            showLogoutConfirmation();&#10;            return true;&#10;        } else if (itemId == R.id.action_profile) {&#10;            showProfile();&#10;            return true;&#10;        } else if (itemId == R.id.action_help) {&#10;            showHelp();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de ADMIN&#10;        if (itemId == R.id.action_statistics) {&#10;            navController.navigate(R.id.estadisticasFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_manage_users) {&#10;            Toast.makeText(this, &quot;Gestión de usuarios - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de REMITENTE&#10;        if (itemId == R.id.action_my_requests) {&#10;            navController.navigate(R.id.homeDashboardFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_new_pickup) {&#10;            navController.navigate(R.id.solicitarRecoleccionFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_history) {&#10;            Toast.makeText(this, &quot;Historial - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de RECOLECTOR&#10;        if (itemId == R.id.action_my_assignments) {&#10;            navController.navigate(R.id.misAsignacionesFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_completed) {&#10;            Toast.makeText(this, &quot;Completadas - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;            return true;&#10;        }&#10;&#10;        // Acciones específicas de ASIGNADOR&#10;        if (itemId == R.id.action_manage_zones) {&#10;            navController.navigate(R.id.gestionZonasFragment);&#10;            return true;&#10;        } else if (itemId == R.id.action_view_assignments) {&#10;            navController.navigate(R.id.asignadorFragment);&#10;            return true;&#10;        }&#10;&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    /**&#10;     * Mostrar diálogo de confirmación de logout&#10;     */&#10;    private void showLogoutConfirmation() {&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Cerrar sesión&quot;)&#10;            .setMessage(&quot;¿Estás seguro que deseas cerrar sesión?&quot;)&#10;            .setPositiveButton(&quot;Cerrar sesión&quot;, (dialog, which) -&gt; doLogout())&#10;            .setNegativeButton(&quot;Cancelar&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Mostrar perfil de usuario&#10;     */&#10;    private void showProfile() {&#10;        String userEmail = sessionManager.getEmail();&#10;        String userRole = sessionManager.getRole();&#10;&#10;        // Extraer nombre del email (antes del @)&#10;        String userName = userEmail.contains(&quot;@&quot;)&#10;            ? userEmail.substring(0, userEmail.indexOf(&quot;@&quot;))&#10;            : userEmail;&#10;&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Mi Perfil&quot;)&#10;            .setMessage(&quot;Usuario: &quot; + userName + &quot;\n&quot; +&#10;                       &quot;Email: &quot; + userEmail + &quot;\n&quot; +&#10;                       &quot;Rol: &quot; + userRole)&#10;            .setPositiveButton(&quot;Cerrar&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Mostrar ayuda&#10;     */&#10;    private void showHelp() {&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Ayuda&quot;)&#10;            .setMessage(&quot;Sistema de Gestión de Encomiendas\n\n&quot; +&#10;                       &quot;Para soporte contacta a:\n&quot; +&#10;                       &quot;soporte@encomiendas.com\n\n&quot; +&#10;                       &quot;Versión: 1.0&quot;)&#10;            .setPositiveButton(&quot;Entendido&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Mostrar configuración&#10;     */&#10;    private void showSettings() {&#10;        Toast.makeText(this, &quot;Configuración - Por implementar&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    /**&#10;     * Acción al hacer click en notificaciones&#10;     */&#10;    private void onNotificationClick() {&#10;        new MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Notificaciones (&quot; + notificationCount + &quot;)&quot;)&#10;            .setMessage(&quot;• Nueva asignación disponible\n• Recolección completada\n• Actualización del sistema&quot;)&#10;            .setPositiveButton(&quot;Cerrar&quot;, (dialog, which) -&gt; {&#10;                // Marcar como leídas&#10;                updateNotificationBadge(0);&#10;            })&#10;            .show();&#10;    }&#10;&#10;    /**&#10;     * Actualizar badge de notificaciones&#10;     */&#10;    private void updateNotificationBadge(int count) {&#10;        notificationCount = count;&#10;        if (notificationBadge != null) {&#10;            if (count &gt; 0) {&#10;                notificationBadge.setText(String.valueOf(count));&#10;                notificationBadge.setVisibility(View.VISIBLE);&#10;            } else {&#10;                notificationBadge.setVisibility(View.GONE);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Simular notificaciones (conectar con lógica real)&#10;     */&#10;    private void simulateNotifications() {&#10;        // Ejemplo: simular 3 notificaciones después de 2 segundos&#10;        toolbar.postDelayed(() -&gt; {&#10;            if (sessionManager.isLoggedIn()) {&#10;                updateNotificationBadge(3);&#10;            }&#10;        }, 2000);&#10;    }&#10;&#10;    private void doLogout() {&#10;        sessionManager.logout();&#10;        try {&#10;            NavOptions opts = new NavOptions.Builder()&#10;                    .setPopUpTo(navController.getGraph().getStartDestinationId(), true)&#10;                    .build();&#10;            navController.navigate(R.id.loginFragment, null, opts);&#10;            Toast.makeText(this, &quot;Sesión cerrada&quot;, Toast.LENGTH_SHORT).show();&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Reset nav tras logout&quot;, e);&#10;            navController.setGraph(R.navigation.nav_graph);&#10;        }&#10;    }&#10;&#10;    private void navigateByRole(String roleRaw) {&#10;        String role = (roleRaw == null ? &quot;&quot; : roleRaw.trim().toUpperCase());&#10;        int destId;&#10;        switch (role) {&#10;            case &quot;ADMIN&quot;:&#10;                destId = R.id.adminFragment; break;&#10;            case &quot;OPERADOR&quot;:&#10;            case &quot;OPERADOR_HUB&quot;:&#10;                destId = R.id.hubDashboardFragment; break;&#10;            case &quot;REPARTIDOR&quot;:&#10;                destId = R.id.repartidorDashboardFragment; break;&#10;            case &quot;ASIGNADOR&quot;:&#10;                destId = R.id.asignadorFragment; break;&#10;            case &quot;RECOLECTOR&quot;:&#10;                destId = R.id.misAsignacionesFragment; break;&#10;            default:&#10;                destId = R.id.homeDashboardFragment; break;&#10;        }&#10;        try {&#10;            NavOptions opts = new NavOptions.Builder()&#10;                    .setPopUpTo(R.id.loginFragment, true)&#10;                    .build();&#10;            navController.navigate(destId, null, opts);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;navigateByRole error (&quot; + role + &quot;)&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void seedDemoData() {&#10;        // Ejecutar seeder en background thread después de que la BD esté lista&#10;        new Thread(() -&gt; {&#10;            try {&#10;                // Pequeña pausa para asegurar que la BD esté completamente inicializada&#10;                Thread.sleep(1000);&#10;                com.hfad.encomiendas.core.DemoSeeder.seedOnce(getApplicationContext());&#10;                Log.d(TAG, &quot;Seeder ejecutado correctamente&quot;);&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error ejecutando seeder&quot;, e);&#10;            }&#10;        }).start();&#10;    }&#10;&#10;    private void requestPostNotificationsIfNeeded() {&#10;        if (Build.VERSION.SDK_INT &gt;= 33 &amp;&amp;&#10;                ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS)&#10;                        != PackageManager.PERMISSION_GRANTED) {&#10;            notifPermLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        return NavigationUI.navigateUp(navController, appBarConfiguration)&#10;                || super.onSupportNavigateUp();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/core/DemoSeeder.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/core/DemoSeeder.java" />
              <option name="originalContent" value="// com.hfad.encomiendas.core.DemoSeeder.java&#10;package com.hfad.encomiendas.core;&#10;&#10;import android.content.Context;&#10;import android.util.Log;&#10;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Manifiesto;&#10;import com.hfad.encomiendas.data.ManifiestoDao;&#10;import com.hfad.encomiendas.data.ManifiestoItem;&#10;import com.hfad.encomiendas.data.Recolector;&#10;import com.hfad.encomiendas.data.RecolectorDao;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.data.SolicitudDao;&#10;import com.hfad.encomiendas.data.User;&#10;import com.hfad.encomiendas.data.UserDao;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public final class DemoSeeder {&#10;    private static final String TAG = &quot;DemoSeeder&quot;;&#10;    private DemoSeeder() {}&#10;&#10;    /** Llama esto una vez al arrancar (desde MainActivity.seedDemoData) */&#10;    public static void seedOnce(Context ctx) {&#10;        if (isSeeded(ctx)) return;&#10;&#10;        try {&#10;            AppDatabase db = AppDatabase.getInstance(ctx);&#10;&#10;            // ✅ CORREGIDO: No borrar datos existentes, solo agregar datos demo si no existen&#10;            db.runInTransaction(() -&gt; {&#10;                // ❌ REMOVIDO: db.clearAllTables(); &lt;- ESTO CAUSABA LA PÉRDIDA DE DATOS&#10;&#10;                UserDao udao = db.userDao();&#10;&#10;                // 1) Usuarios - Solo crear si no existen&#10;                long remitenteId = ensureUser(udao,&#10;                        &quot;remitente.demo@gmail.com&quot;, &quot;123456&quot;, &quot;REMITENTE&quot;);&#10;                ensureUser(udao, &quot;operador@gmail.com&quot;,    &quot;123456&quot;, &quot;OPERADOR_HUB&quot;);&#10;                ensureUser(udao, &quot;repartidor1@gmail.com&quot;, &quot;123456&quot;, &quot;REPARTIDOR&quot;);&#10;                ensureUser(udao,&quot;asignador@gmail.com&quot;,&quot;123456&quot;,&quot;ASIGNADOR&quot;);&#10;                ensureUser(udao,&quot;admin@gmail.com&quot;,&quot;123456&quot;,&quot;ADMIN&quot;);&#10;&#10;                // 2) Verificar si ya hay solicitudes antes de crear nuevas&#10;                SolicitudDao sdao = db.solicitudDao();&#10;                List&lt;Solicitud&gt; existentes = sdao.listByFecha(getCurrentDateString());&#10;&#10;                // Solo crear solicitudes demo si no hay datos del día actual&#10;                if (existentes == null || existentes.size() &lt; 3) {&#10;                    // 2) Solicitudes del remitente DEMO (solo si no existen suficientes)&#10;                    long now = System.currentTimeMillis();&#10;&#10;                    // Coordenadas reales de Bogotá para que las rutas funcionen correctamente&#10;                    double[][] coordenadas = {&#10;                        {4.6097, -74.0817}, // Zona Norte Bogotá&#10;                        {4.5981, -74.0758}, // Zona Chapinero&#10;                        {4.5709, -74.0900}  // Zona Sur Bogotá&#10;                    };&#10;&#10;                    for (int i = 1; i &lt;= 3; i++) {&#10;                        Solicitud s = new Solicitud();&#10;                        s.remitenteId = remitenteId;              // &lt;- ID válido !&#10;                        s.recolectorId = null;&#10;                        s.direccion = &quot;CL. &quot; + (100 + i) + &quot; #45-&quot; + (60 + i) + &quot;, Bogotá&quot;;&#10;                        s.fechaEpochMillis = now;&#10;                        s.ventanaInicioMillis = now + i * 60 * 60 * 1000L;&#10;                        s.ventanaFinMillis   = s.ventanaInicioMillis + 60 * 60 * 1000L;&#10;                        s.tipoPaquete = &quot;Paquete DEMO &quot; + i;&#10;&#10;                        // Agregar coordenadas reales de Bogotá&#10;                        s.lat = coordenadas[i-1][0];&#10;                        s.lon = coordenadas[i-1][1];&#10;&#10;                        // Meta mínima para que el hub pueda clasificar&#10;                        String fechaTxt = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;                                .format(new Date(s.ventanaInicioMillis));&#10;                        s.notas =&#10;                                &quot;Origen: Bogotá. &quot; +&#10;                                        &quot;Destino: Ciudad &quot; + (6 + i) + &quot;. &quot; +&#10;                                        &quot;DestinoDir: Calle Falsa &quot; + i + &quot; #00-00. &quot; +&#10;                                        &quot;Fecha: &quot; + fechaTxt + &quot;. &quot;;&#10;&#10;                        s.guia = &quot;EC-DEMO-&quot; + i;&#10;                        s.estado = &quot;RECOLECTADA&quot;; // &lt;- requisito para que el HUB las tome&#10;                        sdao.insert(s);&#10;                    }&#10;                }&#10;&#10;                RecolectorDao rdao = db.recolectorDao();&#10;                if (rdao.listAll().isEmpty()) {&#10;                    Recolector r1 = new Recolector();&#10;                    r1.nombre = &quot;Juan R.&quot;; r1.municipio = &quot;Bogotá&quot;; r1.zona = &quot;Chicó&quot;;&#10;                    r1.vehiculo = &quot;MOTO&quot;; r1.capacidad = 10; r1.cargaActual = 0; r1.activo = true;&#10;                    r1.userEmail = &quot;recolector@gmail.com&quot;; r1.createdAt = System.currentTimeMillis();&#10;                    db.recolectorDao().insert(r1);&#10;&#10;                    Recolector r2 = new Recolector();&#10;                    r2.nombre = &quot;Ana P.&quot;; r2.municipio = &quot;Bogotá&quot;; r2.zona = &quot;Chapinero&quot;;&#10;                    r2.vehiculo = &quot;BICI&quot;; r2.capacidad = 8; r2.cargaActual = 0; r2.activo = true;&#10;                    r2.userEmail = &quot;recolector2@gmail.com&quot;; r2.createdAt = System.currentTimeMillis();&#10;                    db.recolectorDao().insert(r2);&#10;                }&#10;&#10;                if (udao.findByEmail(&quot;recolector@gmail.com&quot;) == null) {&#10;                    User u = new User();&#10;                    u.email = &quot;recolector@gmail.com&quot;;&#10;                    u.passwordHash = PasswordUtils.sha256(&quot;123456&quot;);&#10;                    u.rol = &quot;RECOLECTOR&quot;;&#10;                    u.createdAt = System.currentTimeMillis();&#10;                    udao.insert(u);&#10;                } else if (udao.findByEmail(&quot;recolector2@gmail.com&quot;) == null) {&#10;                    User u = new User();&#10;                    u.email = &quot;recolector2@gmail.com&quot;;&#10;                    u.passwordHash = PasswordUtils.sha256(&quot;123456&quot;);&#10;                    u.rol = &quot;RECOLECTOR&quot;;&#10;                    u.createdAt = System.currentTimeMillis();&#10;                    udao.insert(u);&#10;                }&#10;&#10;                // 3) Manifiesto + 3 ítems (solo si no existe ya)&#10;                ManifiestoDao mdao = db.manifiestoDao();&#10;&#10;                // Verificar si ya hay manifiestos para evitar duplicados&#10;                String hoyString = getCurrentDateString();&#10;                List&lt;Solicitud&gt; hoy = sdao.listByFecha(hoyString);&#10;&#10;                if (hoy != null &amp;&amp; !hoy.isEmpty()) {&#10;                    // Solo crear manifiesto si hay solicitudes y no hay manifiestos duplicados&#10;                    long currentTime = System.currentTimeMillis();&#10;&#10;                    Manifiesto m = new Manifiesto();&#10;                    m.codigo = &quot;M-&quot; + new SimpleDateFormat(&quot;yyyyMMdd-HHmm&quot;, Locale.getDefault())&#10;                            .format(new Date(currentTime));&#10;                    m.fechaMillis = currentTime;&#10;                    m.estado = &quot;ABIERTO&quot;;&#10;                    m.createdAt = currentTime;&#10;                    int mid = (int) mdao.insertManifiesto(m);&#10;&#10;                    // Agregar items al manifiesto&#10;                    for (Solicitud s : hoy) {&#10;                        // Verificar si ya está en un manifiesto&#10;                        if (mdao.existsBySolicitud(s.id) &gt; 0) continue;&#10;&#10;                        ManifiestoItem it = new ManifiestoItem();&#10;                        it.manifiestoId = mid;&#10;                        it.solicitudId = s.id; // FK válido a solicitud&#10;                        it.guia = s.guia;&#10;                        it.destinoCiudad = &quot;Ciudad &quot; + s.id;&#10;                        it.destinoDireccion = &quot;Calle Falsa &quot; + s.id + &quot; #00-00&quot;;&#10;                        it.otp = String.valueOf((int)(Math.random()*900000)+100000);&#10;                        it.estado = &quot;EN_HUB&quot;;&#10;                        it.createdAt = System.currentTimeMillis();&#10;                        mdao.insertItem(it);&#10;                    }&#10;                }&#10;            });&#10;&#10;            Log.d(TAG, &quot;Seeder DEMO OK: 1 manifiesto + 3 ítems&quot;);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Seeder error&quot;, e);&#10;        }&#10;    }&#10;&#10;    private static long ensureUser(UserDao udao, String email, String pass, String rol) {&#10;        User u = udao.findByEmail(email);&#10;        if (u != null) return u.id;           // usa el id existente&#10;        u = new User();&#10;        u.email = email;&#10;        u.passwordHash = PasswordUtils.sha256(pass);&#10;        u.rol = rol;&#10;        u.createdAt = System.currentTimeMillis();&#10;        return udao.insert(u);                // devuelve el id autogenerado&#10;    }&#10;&#10;    private static String getCurrentDateString() {&#10;        return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(new Date());&#10;    }&#10;&#10;    /** Verifica si ya se ejecutó el seeder antes para evitar duplicar datos */&#10;    private static boolean isSeeded(Context ctx) {&#10;        try {&#10;            AppDatabase db = AppDatabase.getInstance(ctx);&#10;            // Verificar múltiples indicadores para estar seguros&#10;            User demoUser = db.userDao().findByEmail(&quot;remitente.demo@gmail.com&quot;);&#10;            if (demoUser == null) return false;&#10;&#10;            // También verificar que hay datos básicos&#10;            List&lt;User&gt; users = db.userDao().listAll();&#10;            if (users == null || users.size() &lt; 3) return false;&#10;&#10;            return true; // Todo parece estar en orden&#10;        } catch (Exception e) {&#10;            Log.w(TAG, &quot;Error verificando si está seeded, asumiendo que no&quot;, e);&#10;            return false; // En caso de error, forzar re-seeding&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="// com.hfad.encomiendas.core.DemoSeeder.java&#10;package com.hfad.encomiendas.core;&#10;&#10;import android.content.Context;&#10;import android.util.Log;&#10;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Manifiesto;&#10;import com.hfad.encomiendas.data.ManifiestoDao;&#10;import com.hfad.encomiendas.data.ManifiestoItem;&#10;import com.hfad.encomiendas.data.Recolector;&#10;import com.hfad.encomiendas.data.RecolectorDao;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.data.SolicitudDao;&#10;import com.hfad.encomiendas.data.User;&#10;import com.hfad.encomiendas.data.UserDao;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public final class DemoSeeder {&#10;    private static final String TAG = &quot;DemoSeeder&quot;;&#10;    private DemoSeeder() {}&#10;&#10;    /** Llama esto una vez al arrancar (desde MainActivity.seedDemoData) */&#10;    public static void seedOnce(Context ctx) {&#10;        if (isSeeded(ctx)) return;&#10;&#10;        try {&#10;            AppDatabase db = AppDatabase.getInstance(ctx);&#10;&#10;            // ✅ CORREGIDO: No borrar datos existentes, solo agregar datos demo si no existen&#10;            db.runInTransaction(new Runnable() {&#10;                @Override&#10;                public void run() {&#10;                    // ❌ REMOVIDO: db.clearAllTables(); &lt;- ESTO CAUSABA LA PÉRDIDA DE DATOS&#10;&#10;                    UserDao udao = db.userDao();&#10;&#10;                    // 1) Usuarios - Solo crear si no existen&#10;                    long remitenteId = ensureUser(udao,&#10;                            &quot;remitente.demo@gmail.com&quot;, &quot;123456&quot;, &quot;REMITENTE&quot;);&#10;                    ensureUser(udao, &quot;operador@gmail.com&quot;,    &quot;123456&quot;, &quot;OPERADOR_HUB&quot;);&#10;                    ensureUser(udao, &quot;repartidor1@gmail.com&quot;, &quot;123456&quot;, &quot;REPARTIDOR&quot;);&#10;                    ensureUser(udao,&quot;asignador@gmail.com&quot;,&quot;123456&quot;,&quot;ASIGNADOR&quot;);&#10;                    ensureUser(udao,&quot;admin@gmail.com&quot;,&quot;123456&quot;,&quot;ADMIN&quot;);&#10;&#10;                    // 2) Verificar si ya hay solicitudes antes de crear nuevas&#10;                    SolicitudDao sdao = db.solicitudDao();&#10;                    List&lt;Solicitud&gt; existentes = sdao.listByFecha(getCurrentDateString());&#10;&#10;                    // Solo crear solicitudes demo si no hay datos del día actual&#10;                    if (existentes == null || existentes.size() &lt; 3) {&#10;                        // 2) Solicitudes del remitente DEMO (solo si no existen suficientes)&#10;                        long now = System.currentTimeMillis();&#10;&#10;                        // Coordenadas reales de Bogotá para que las rutas funcionen correctamente&#10;                        double[][] coordenadas = {&#10;                            {4.6097, -74.0817}, // Zona Norte Bogotá&#10;                            {4.5981, -74.0758}, // Zona Chapinero&#10;                            {4.5709, -74.0900}  // Zona Sur Bogotá&#10;                        };&#10;&#10;                        for (int i = 1; i &lt;= 3; i++) {&#10;                            Solicitud s = new Solicitud();&#10;                            s.remitenteId = remitenteId;              // &lt;- ID válido !&#10;                            s.recolectorId = null;&#10;                            s.direccion = &quot;CL. &quot; + (100 + i) + &quot; #45-&quot; + (60 + i) + &quot;, Bogotá&quot;;&#10;                            s.fechaEpochMillis = now;&#10;                            s.ventanaInicioMillis = now + i * 60 * 60 * 1000L;&#10;                            s.ventanaFinMillis   = s.ventanaInicioMillis + 60 * 60 * 1000L;&#10;                            s.tipoPaquete = &quot;Paquete DEMO &quot; + i;&#10;&#10;                            // Agregar coordenadas reales de Bogotá&#10;                            s.lat = coordenadas[i-1][0];&#10;                            s.lon = coordenadas[i-1][1];&#10;&#10;                            // Meta mínima para que el hub pueda clasificar&#10;                            String fechaTxt = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;                                    .format(new Date(s.ventanaInicioMillis));&#10;                            s.notas =&#10;                                    &quot;Origen: Bogotá. &quot; +&#10;                                            &quot;Destino: Ciudad &quot; + (6 + i) + &quot;. &quot; +&#10;                                            &quot;DestinoDir: Calle Falsa &quot; + i + &quot; #00-00. &quot; +&#10;                                            &quot;Fecha: &quot; + fechaTxt + &quot;. &quot;;&#10;&#10;                            s.guia = &quot;EC-DEMO-&quot; + i;&#10;                            s.estado = &quot;RECOLECTADA&quot;; // &lt;- requisito para que el HUB las tome&#10;                            sdao.insert(s);&#10;                        }&#10;                    }&#10;&#10;                    RecolectorDao rdao = db.recolectorDao();&#10;                    if (rdao.listAll().isEmpty()) {&#10;                        Recolector r1 = new Recolector();&#10;                        r1.nombre = &quot;Juan R.&quot;; r1.municipio = &quot;Bogotá&quot;; r1.zona = &quot;Chicó&quot;;&#10;                        r1.vehiculo = &quot;MOTO&quot;; r1.capacidad = 10; r1.cargaActual = 0; r1.activo = true;&#10;                        r1.userEmail = &quot;recolector@gmail.com&quot;; r1.createdAt = System.currentTimeMillis();&#10;                        db.recolectorDao().insert(r1);&#10;&#10;                        Recolector r2 = new Recolector();&#10;                        r2.nombre = &quot;Ana P.&quot;; r2.municipio = &quot;Bogotá&quot;; r2.zona = &quot;Chapinero&quot;;&#10;                        r2.vehiculo = &quot;BICI&quot;; r2.capacidad = 8; r2.cargaActual = 0; r2.activo = true;&#10;                        r2.userEmail = &quot;recolector2@gmail.com&quot;; r2.createdAt = System.currentTimeMillis();&#10;                        db.recolectorDao().insert(r2);&#10;                    }&#10;&#10;                    if (udao.findByEmail(&quot;recolector@gmail.com&quot;) == null) {&#10;                        User u = new User();&#10;                        u.email = &quot;recolector@gmail.com&quot;;&#10;                        u.passwordHash = PasswordUtils.sha256(&quot;123456&quot;);&#10;                        u.rol = &quot;RECOLECTOR&quot;;&#10;                        u.createdAt = System.currentTimeMillis();&#10;                        udao.insert(u);&#10;                    } else if (udao.findByEmail(&quot;recolector2@gmail.com&quot;) == null) {&#10;                        User u = new User();&#10;                        u.email = &quot;recolector2@gmail.com&quot;;&#10;                        u.passwordHash = PasswordUtils.sha256(&quot;123456&quot;);&#10;                        u.rol = &quot;RECOLECTOR&quot;;&#10;                        u.createdAt = System.currentTimeMillis();&#10;                        udao.insert(u);&#10;                    }&#10;&#10;                    // 3) Manifiesto + 3 ítems (solo si no existe ya)&#10;                    ManifiestoDao mdao = db.manifiestoDao();&#10;&#10;                    // Verificar si ya hay manifiestos para evitar duplicados&#10;                    String hoyString = getCurrentDateString();&#10;                    List&lt;Solicitud&gt; hoy = sdao.listByFecha(hoyString);&#10;&#10;                    if (hoy != null &amp;&amp; !hoy.isEmpty()) {&#10;                        // Solo crear manifiesto si hay solicitudes y no hay manifiestos duplicados&#10;                        long currentTime = System.currentTimeMillis();&#10;&#10;                        Manifiesto m = new Manifiesto();&#10;                        m.codigo = &quot;M-&quot; + new SimpleDateFormat(&quot;yyyyMMdd-HHmm&quot;, Locale.getDefault())&#10;                                .format(new Date(currentTime));&#10;                        m.fechaMillis = currentTime;&#10;                        m.estado = &quot;ABIERTO&quot;;&#10;                        m.createdAt = currentTime;&#10;                        int mid = (int) mdao.insertManifiesto(m);&#10;&#10;                        // Agregar items al manifiesto&#10;                        for (Solicitud s : hoy) {&#10;                            // Verificar si ya está en un manifiesto&#10;                            if (mdao.existsBySolicitud(s.id) &gt; 0) continue;&#10;&#10;                            ManifiestoItem it = new ManifiestoItem();&#10;                            it.manifiestoId = mid;&#10;                            it.solicitudId = s.id; // FK válido a solicitud&#10;                            it.guia = s.guia;&#10;                            it.destinoCiudad = &quot;Ciudad &quot; + s.id;&#10;                            it.destinoDireccion = &quot;Calle Falsa &quot; + s.id + &quot; #00-00&quot;;&#10;                            it.otp = String.valueOf((int)(Math.random()*900000)+100000);&#10;                            it.estado = &quot;EN_HUB&quot;;&#10;                            it.createdAt = System.currentTimeMillis();&#10;                            mdao.insertItem(it);&#10;                        }&#10;                    }&#10;                }&#10;            });&#10;&#10;            Log.d(TAG, &quot;Seeder DEMO OK: 1 manifiesto + 3 ítems&quot;);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Seeder error&quot;, e);&#10;        }&#10;    }&#10;&#10;    private static long ensureUser(UserDao udao, String email, String pass, String rol) {&#10;        User u = udao.findByEmail(email);&#10;        if (u != null) return u.id;           // usa el id existente&#10;        u = new User();&#10;        u.email = email;&#10;        u.passwordHash = PasswordUtils.sha256(pass);&#10;        u.rol = rol;&#10;        u.createdAt = System.currentTimeMillis();&#10;        return udao.insert(u);                // devuelve el id autogenerado&#10;    }&#10;&#10;    private static String getCurrentDateString() {&#10;        return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(new Date());&#10;    }&#10;&#10;    /** Verifica si ya se ejecutó el seeder antes para evitar duplicar datos */&#10;    private static boolean isSeeded(Context ctx) {&#10;        try {&#10;            AppDatabase db = AppDatabase.getInstance(ctx);&#10;            // Verificar múltiples indicadores para estar seguros&#10;            User demoUser = db.userDao().findByEmail(&quot;remitente.demo@gmail.com&quot;);&#10;            if (demoUser == null) return false;&#10;&#10;            // También verificar que hay datos básicos&#10;            List&lt;User&gt; users = db.userDao().listAll();&#10;            if (users == null || users.size() &lt; 3) return false;&#10;&#10;            return true; // Todo parece estar en orden&#10;        } catch (Exception e) {&#10;            Log.w(TAG, &quot;Error verificando si está seeded, asumiendo que no&quot;, e);&#10;            return false; // En caso de error, forzar re-seeding&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/AdminFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/AdminFragment.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.SessionManager;&#10;&#10;public class AdminFragment extends Fragment {&#10;&#10;    private TextView tvAdminEmail;&#10;    private CardView cardEstadisticas;&#10;    private CardView cardGestionUsuarios;&#10;    private CardView cardConfiguracion;&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        View view = inflater.inflate(R.layout.fragment_admin, container, false);&#10;        &#10;        initViews(view);&#10;        setupListeners();&#10;        loadAdminInfo();&#10;        &#10;        return view;&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        tvAdminEmail = view.findViewById(R.id.tvAdminEmail);&#10;        cardEstadisticas = view.findViewById(R.id.cardEstadisticas);&#10;        cardGestionUsuarios = view.findViewById(R.id.cardGestionUsuarios);&#10;        cardConfiguracion = view.findViewById(R.id.cardConfiguracion);&#10;    }&#10;&#10;    private void setupListeners() {&#10;        cardEstadisticas.setOnClickListener(v -&gt; {&#10;            Toast.makeText(requireContext(), &quot;Abriendo Estadísticas...&quot;, Toast.LENGTH_SHORT).show();&#10;            // TODO: Navegar a EstadisticasFragment cuando esté implementado&#10;            // NavHostFragment.findNavController(this).navigate(R.id.action_admin_to_estadisticas);&#10;        });&#10;&#10;        cardGestionUsuarios.setOnClickListener(v -&gt; {&#10;            Toast.makeText(requireContext(), &quot;Gestión de Usuarios - En desarrollo&quot;, Toast.LENGTH_SHORT).show();&#10;            // TODO: Implementar navegación a gestión de usuarios&#10;        });&#10;&#10;        cardConfiguracion.setOnClickListener(v -&gt; {&#10;            Toast.makeText(requireContext(), &quot;Configuración del Sistema - En desarrollo&quot;, Toast.LENGTH_SHORT).show();&#10;            // TODO: Implementar navegación a configuración&#10;        });&#10;    }&#10;&#10;    private void loadAdminInfo() {&#10;        SessionManager session = new SessionManager(requireContext());&#10;        String email = session.getEmail();&#10;        &#10;        if (email != null &amp;&amp; !email.isEmpty()) {&#10;            tvAdminEmail.setText(email);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleEntregaFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleEntregaFragment.java" />
              <option name="originalContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.pm.PackageManager;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.chip.Chip;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.DeliveryDispatcherService;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Asignacion;&#10;import com.hfad.encomiendas.data.AsignacionDao;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;public class DetalleEntregaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;    private int asignacionId;&#10;&#10;    private TextView tvTitulo, tvEstado, tvEta;&#10;    private Chip chipDistance;&#10;    private MaterialButton btnIniciarRuta, btnEntregado;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;&#10;    private TrackingService tracking;&#10;    private FusedLocationProviderClient fused;&#10;&#10;    private GoogleMap gmap;&#10;    private Marker markerCourier, markerDestino;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat, destinoLon;&#10;    private String estadoAsignacion = &quot;&quot;;&#10;&#10;    private String lastEtaIso = null;&#10;    private Double lastDistanceKm = null;&#10;    private Double lastLat = null, lastLon = null;&#10;&#10;    private boolean locationUpdatesStarted = false;&#10;    private com.google.android.gms.location.LocationCallback locationCallback;&#10;&#10;    public DetalleEntregaFragment() {}&#10;&#10;    @Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_entrega, container, false);&#10;    }&#10;&#10;    @Override public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;    }&#10;&#10;    @Override public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        chipDistance = v.findViewById(R.id.chipDistance);&#10;        btnIniciarRuta = v.findViewById(R.id.btnIniciarRuta);&#10;        btnEntregado = v.findViewById(R.id.btnMarcarEntregado);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        rvTimeline.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        trackingAdapter = new TrackingAdapter();&#10;        rvTimeline.setAdapter(trackingAdapter);&#10;&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map_container_entrega);&#10;        if (mapFragment == null) {&#10;            mapFragment = SupportMapFragment.newInstance();&#10;            getChildFragmentManager().beginTransaction().replace(R.id.map_container_entrega, mapFragment).commit();&#10;        }&#10;        mapFragment.getMapAsync(this);&#10;&#10;        btnIniciarRuta.setOnClickListener(v1 -&gt; iniciarRuta());&#10;        btnEntregado.setOnClickListener(v12 -&gt; marcarEntregado());&#10;&#10;        cargar();&#10;    }&#10;&#10;    private void cargar() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;                if (a == null) { runOnUi(() -&gt; toast(&quot;Asignación no encontrada&quot;)); return; }&#10;                solicitudId = a.solicitudId;&#10;                estadoAsignacion = a.estado;&#10;&#10;                Solicitud s = db.solicitudDao().byId(solicitudId);&#10;                if (s != null) { destinoLat = s.lat; destinoLon = s.lon; }&#10;&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(&quot;Entrega #&quot; + asignacionId);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    refreshTimeline();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void refreshTimeline() {&#10;        if (solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (ev, eta) -&gt; {&#10;            if (trackingAdapter != null) trackingAdapter.submit(ev);&#10;            if (eta != null &amp;&amp; eta.eta != null) {&#10;                lastEtaIso = eta.eta;&#10;                tvEta.setText(&quot;ETA: &quot; + eta.eta);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void iniciarRuta() {&#10;        if (estadoAsignacion.startsWith(&quot;OUT_FOR_DELIVERY&quot;)) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().marcarOutForDelivery(asignacionId);&#10;                db.solicitudDao().marcarEnRutaEntrega(solicitudId);&#10;                estadoAsignacion = &quot;OUT_FOR_DELIVERY&quot;;&#10;                // Evento&#10;                tracking.logEvent(solicitudId, &quot;OUT_FOR_DELIVERY&quot;, &quot;Repartidor en ruta&quot;, null, null, null);&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Ruta iniciada&quot;);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    startLocationUpdates();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void marcarEntregado() {&#10;        if (!&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) &amp;&amp; !&quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) return;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar entrega&quot;)&#10;                .setMessage(&quot;¿Marcar como ENTREGADO?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                    try {&#10;                        AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                        db.asignacionDao().marcarEntregada(asignacionId);&#10;                        db.solicitudDao().marcarEntregada(solicitudId);&#10;                        tracking.logEvent(solicitudId, &quot;DELIVERED&quot;, &quot;Entrega confirmada&quot;, null, null, null);&#10;                        estadoAsignacion = &quot;DELIVERED&quot;;&#10;                        runOnUi(() -&gt; {&#10;                            toast(&quot;Entregado&quot;);&#10;                            tvEstado.setText(estadoAsignacion);&#10;                            stopLocationUpdates();&#10;                            actualizarBotones();&#10;                        });&#10;                    } catch (Exception ex) {&#10;                        runOnUi(() -&gt; toast(&quot;Error: &quot; + ex.getMessage()));&#10;                    }&#10;                }))&#10;                .show();&#10;    }&#10;&#10;    private void actualizarBotones() {&#10;        boolean delivered = &quot;DELIVERED&quot;.equals(estadoAsignacion);&#10;        boolean out = &quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion);&#10;        btnIniciarRuta.setEnabled(!delivered &amp;&amp; !out);&#10;        btnEntregado.setEnabled(out || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion));&#10;        float a1 = btnIniciarRuta.isEnabled()?1f:0.4f; btnIniciarRuta.setAlpha(a1);&#10;        float a2 = btnEntregado.isEnabled()?1f:0.4f; btnEntregado.setAlpha(a2);&#10;    }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        gmap = googleMap;&#10;        gmap.getUiSettings().setZoomControlsEnabled(true);&#10;        addDestinoMarker();&#10;        if (&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion)) startLocationUpdates();&#10;    }&#10;&#10;    private void addDestinoMarker() {&#10;        if (gmap == null || destinoLat == null || destinoLon == null) return;&#10;        if (markerDestino == null) {&#10;            markerDestino = gmap.addMarker(new MarkerOptions().position(new LatLng(destinoLat, destinoLon)).title(&quot;Destino&quot;));&#10;        }&#10;    }&#10;&#10;    private void startLocationUpdates() {&#10;        if (locationUpdatesStarted) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        locationCallback = new com.google.android.gms.location.LocationCallback() {&#10;            @Override public void onLocationResult(@NonNull com.google.android.gms.location.LocationResult result) {&#10;                if (result.getLastLocation()==null) return;&#10;                double lat = result.getLastLocation().getLatitude();&#10;                double lon = result.getLastLocation().getLongitude();&#10;                lastLat = lat; lastLon = lon;&#10;                updateCourierMarker(new LatLng(lat, lon));&#10;                recalcEta(lat, lon);&#10;            }&#10;        };&#10;        com.google.android.gms.location.LocationRequest req = new com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_BALANCED_POWER_ACCURACY, 15000)&#10;                .setMinUpdateIntervalMillis(8000)&#10;                .build();&#10;        fused.requestLocationUpdates(req, locationCallback, requireActivity().getMainLooper());&#10;        locationUpdatesStarted = true;&#10;    }ayu&#10;&#10;    private void stopLocationUpdates() {&#10;        if (!locationUpdatesStarted || locationCallback==null) return;&#10;        fused.removeLocationUpdates(locationCallback);&#10;        locationUpdatesStarted = false;&#10;    }&#10;&#10;    private void updateCourierMarker(LatLng p) {&#10;        if (gmap == null) return;&#10;        if (markerCourier == null) {&#10;            markerCourier = gmap.addMarker(new MarkerOptions().position(p).title(&quot;Repartidor&quot;).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));&#10;            gmap.animateCamera(CameraUpdateFactory.newLatLngZoom(p, 15f));&#10;        } else {&#10;            markerCourier.setPosition(p);&#10;        }&#10;    }&#10;&#10;    private void recalcEta(double olat, double olon) {&#10;        if (destinoLat == null || destinoLon == null) return;&#10;        double km;&#10;        try { km = TrackingService.haversine(olat, olon, destinoLat, destinoLon); } catch (Exception e) { km = 5; }&#10;        if (km &lt; 0) km = 0;&#10;        lastDistanceKm = km;&#10;        if (km &lt;= 0.05) {&#10;            tvEta.setText(&quot;ETA: Arribo&quot;);&#10;            chipDistance.setText(&quot;&lt;50m&quot;);&#10;            return;&#10;        }&#10;        String etaIso = TrackingService.calcEtaIso(Math.max(0.3, km), 25);&#10;        lastEtaIso = etaIso;&#10;        String distStr = km &gt;=1 ? String.format(Locale.getDefault(),&quot;%.1f km&quot;, km) : ((int)Math.round(km*1000))+&quot; m&quot;;&#10;        tvEta.setText(&quot;ETA: &quot; + shortTime(etaIso) + &quot; (&quot; + distStr + &quot;)&quot;);&#10;        chipDistance.setText(distStr);&#10;    }&#10;&#10;    private String shortTime(String iso) {&#10;        if (iso == null) return &quot;—&quot;;&#10;        try {&#10;            SimpleDateFormat in = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;, Locale.getDefault());&#10;            Date d = in.parse(iso);&#10;            if (d == null) return iso;&#10;            return android.text.format.DateFormat.getTimeFormat(requireContext()).format(d);&#10;        } catch (Exception e) { return iso; }&#10;    }&#10;&#10;    private void runOnUi(Runnable r){ if(!isAdded())return; requireActivity().runOnUiThread(r);}    private void toast(String s){ if(!isAdded())return; Toast.makeText(requireContext(), s, Toast.LENGTH_SHORT).show(); }&#10;&#10;    @Override public void onPause(){ super.onPause(); stopLocationUpdates(); }&#10;    @Override public void onDestroyView(){ stopLocationUpdates(); gmap=null; super.onDestroyView(); }&#10;}&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.pm.PackageManager;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.gms.maps.model.MapStyleOptions;&#10;import com.google.android.gms.maps.model.Polyline;&#10;import com.google.android.gms.maps.model.PolylineOptions;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.chip.Chip;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.Request;&#10;import okhttp3.Response;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;import com.hfad.encomiendas.BuildConfig;&#10;&#10;public class DetalleEntregaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;    private int asignacionId;&#10;&#10;    private TextView tvTitulo, tvEstado, tvEta;&#10;    private Chip chipDistance;&#10;    private MaterialButton btnIniciarRuta, btnEntregado;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;&#10;    private TrackingService tracking;&#10;    private FusedLocationProviderClient fused;&#10;&#10;    private GoogleMap gmap;&#10;    private Marker markerCourier, markerDestino;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat, destinoLon;&#10;    private String estadoAsignacion = &quot;&quot;;&#10;&#10;    private String lastEtaIso = null;&#10;    private Double lastDistanceKm = null;&#10;    private Double lastLat = null, lastLon = null;&#10;&#10;    private boolean locationUpdatesStarted = false;&#10;    private com.google.android.gms.location.LocationCallback locationCallback;&#10;&#10;    // --- Campos añadidos para ruta/estilo ---&#10;    private Polyline rutaPolyline;&#10;    private java.util.List&lt;Polyline&gt; routeSegments = new java.util.ArrayList&lt;&gt;();&#10;    private boolean directionsRequested = false;&#10;    private Double lastRouteOriginLat = null, lastRouteOriginLon = null;&#10;    private long lastCameraFollow = 0L;&#10;    private static final long CAMERA_FOLLOW_INTERVAL_MS = 5000L;&#10;    private static final double ROUTE_REFRESH_MIN_MOVEMENT_KM = 0.5; // 500 m&#10;    private static final double CLOSE_DISTANCE_KM = 0.2; // 200 m&#10;    private boolean markerCloseApplied = false;&#10;    private final OkHttpClient httpClient = new OkHttpClient();&#10;&#10;    public DetalleEntregaFragment() {}&#10;&#10;    @Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_entrega, container, false);&#10;    }&#10;&#10;    @Override public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;    }&#10;&#10;    @Override public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        chipDistance = v.findViewById(R.id.chipDistance);&#10;        btnIniciarRuta = v.findViewById(R.id.btnIniciarRuta);&#10;        btnEntregado = v.findViewById(R.id.btnMarcarEntregado);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        rvTimeline.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        trackingAdapter = new TrackingAdapter();&#10;        rvTimeline.setAdapter(trackingAdapter);&#10;&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map_container_entrega);&#10;        if (mapFragment == null) {&#10;            mapFragment = SupportMapFragment.newInstance();&#10;            getChildFragmentManager().beginTransaction().replace(R.id.map_container_entrega, mapFragment).commit();&#10;        }&#10;        mapFragment.getMapAsync(this);&#10;&#10;        btnIniciarRuta.setOnClickListener(v1 -&gt; iniciarRuta());&#10;        btnEntregado.setOnClickListener(v12 -&gt; marcarEntregado());&#10;&#10;        cargar();&#10;    }&#10;&#10;    private void cargar() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                // Recuperar asignación principal&#10;                com.hfad.encomiendas.data.Asignacion a = db.asignacionDao().getById(asignacionId);&#10;                if (a != null) {&#10;                    solicitudId = a.solicitudId;&#10;                    estadoAsignacion = a.estado != null ? a.estado : &quot;&quot;;&#10;                }&#10;                // Recuperar solicitud para coords&#10;                if (solicitudId &gt; 0) {&#10;                    Solicitud s = db.solicitudDao().byId(solicitudId);&#10;                    if (s != null) { destinoLat = s.lat; destinoLon = s.lon; }&#10;                }&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(getString(R.string.title_format, asignacionId, estadoAsignacion));&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    refreshTimeline();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void refreshTimeline() {&#10;        if (solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (ev, eta) -&gt; {&#10;            if (trackingAdapter != null) trackingAdapter.submit(ev);&#10;            if (eta != null &amp;&amp; eta.eta != null) {&#10;                lastEtaIso = eta.eta;&#10;                String shortT = shortTime(eta.eta);&#10;                tvEta.setText(getString(R.string.eta_format_only, shortT));&#10;            } else {&#10;                tvEta.setText(getString(R.string.eta_unknown));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void iniciarRuta() {&#10;        if (estadoAsignacion.startsWith(&quot;OUT_FOR_DELIVERY&quot;)) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().marcarOutForDelivery(asignacionId);&#10;                db.solicitudDao().marcarEnRutaEntrega(solicitudId);&#10;                estadoAsignacion = &quot;OUT_FOR_DELIVERY&quot;;&#10;                // Evento&#10;                tracking.logEvent(solicitudId, &quot;OUT_FOR_DELIVERY&quot;, &quot;Repartidor en ruta&quot;, null, null, null);&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Ruta iniciada&quot;);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    startLocationUpdates();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void marcarEntregado() {&#10;        if (!&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) &amp;&amp; !&quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) return;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar entrega&quot;)&#10;                .setMessage(&quot;¿Marcar como ENTREGADO?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                    try {&#10;                        AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                        db.asignacionDao().marcarEntregada(asignacionId);&#10;                        db.solicitudDao().marcarEntregada(solicitudId);&#10;                        tracking.logEvent(solicitudId, &quot;DELIVERED&quot;, &quot;Entrega confirmada&quot;, null, null, null);&#10;                        estadoAsignacion = &quot;DELIVERED&quot;;&#10;                        runOnUi(() -&gt; {&#10;                            toast(&quot;Entregado&quot;); // reutilizamos literal para evitar nuevos resources&#10;                            tvEstado.setText(estadoAsignacion);&#10;                            stopLocationUpdates();&#10;                            actualizarBotones();&#10;                        });&#10;                    } catch (Exception ex) {&#10;                        runOnUi(() -&gt; toast(&quot;Error: &quot; + ex.getMessage()));&#10;                    }&#10;                }))&#10;                .show();&#10;    }&#10;&#10;    private void actualizarBotones() {&#10;        boolean delivered = &quot;DELIVERED&quot;.equals(estadoAsignacion);&#10;        boolean out = &quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion);&#10;        btnIniciarRuta.setEnabled(!delivered &amp;&amp; !out);&#10;        btnEntregado.setEnabled(out || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion));&#10;        float a1 = btnIniciarRuta.isEnabled()?1f:0.4f; btnIniciarRuta.setAlpha(a1);&#10;        float a2 = btnEntregado.isEnabled()?1f:0.4f; btnEntregado.setAlpha(a2);&#10;    }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        gmap = googleMap;&#10;        gmap.getUiSettings().setZoomControlsEnabled(true);&#10;        gmap.getUiSettings().setCompassEnabled(true);&#10;        applyDarkStyleIfNeeded();&#10;        addDestinoMarker();&#10;        requestSingleCourierLocationAndCenter();&#10;        if (&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) startLocationUpdates();&#10;    }&#10;&#10;    // --- Estilo nocturno ---&#10;    private void applyDarkStyleIfNeeded(){&#10;        if (gmap==null) return;&#10;        int nightMask = getResources().getConfiguration().uiMode &amp; android.content.res.Configuration.UI_MODE_NIGHT_MASK;&#10;        if (nightMask == android.content.res.Configuration.UI_MODE_NIGHT_YES) {&#10;            try { gmap.setMapStyle(MapStyleOptions.loadRawResourceStyle(requireContext(), R.raw.map_dark)); } catch (Exception ignore) {}&#10;        }&#10;    }&#10;&#10;    // --- Ubicación única para centrar cámara y dibujar línea simple inicial ---&#10;    private void requestSingleCourierLocationAndCenter(){&#10;        if (fused==null || gmap==null) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        fused.getCurrentLocation(Priority.PRIORITY_BALANCED_POWER_ACCURACY, null)&#10;                .addOnSuccessListener(loc -&gt; {&#10;                    if (loc==null) return;&#10;                    double lat = loc.getLatitude(); double lon = loc.getLongitude();&#10;                    lastLat = lat; lastLon = lon;&#10;                    LatLng courier = new LatLng(lat, lon);&#10;                    updateCourierMarker(courier);&#10;                    if (destinoLat!=null &amp;&amp; destinoLon!=null){&#10;                        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;                        try {&#10;                            gmap.moveCamera(CameraUpdateFactory.newLatLngBounds(new com.google.android.gms.maps.model.LatLngBounds.Builder().include(courier).include(dest).build(), 120));&#10;                        } catch (Exception ex){&#10;                            gmap.moveCamera(CameraUpdateFactory.newLatLngZoom(courier, 15f));&#10;                        }&#10;                        updateRoutePolylineSimple(courier);&#10;                        tryFetchDirectionsIfNeeded(lat, lon); // precargar ruta si hay API KEY&#10;                    } else {&#10;                        gmap.moveCamera(CameraUpdateFactory.newLatLngZoom(courier, 15f));&#10;                    }&#10;                });&#10;    }&#10;&#10;    // --- Cámara sigue al repartidor cada cierto tiempo ---&#10;    private void followCameraIfNeeded(LatLng pos){&#10;        if (gmap==null || pos==null) return;&#10;        long now = System.currentTimeMillis();&#10;        if (now - lastCameraFollow &lt; CAMERA_FOLLOW_INTERVAL_MS) return;&#10;        lastCameraFollow = now;&#10;        float zoom = gmap.getCameraPosition()!=null? gmap.getCameraPosition().zoom : 15f;&#10;        try { gmap.animateCamera(CameraUpdateFactory.newLatLngZoom(pos, zoom)); } catch (Exception ignore) {}&#10;    }&#10;&#10;    private void startLocationUpdates() {&#10;        if (locationUpdatesStarted) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        locationCallback = new com.google.android.gms.location.LocationCallback() {&#10;            @Override public void onLocationResult(@NonNull com.google.android.gms.location.LocationResult result) {&#10;                if (result.getLastLocation()==null) return;&#10;                double lat = result.getLastLocation().getLatitude();&#10;                double lon = result.getLastLocation().getLongitude();&#10;                lastLat = lat; lastLon = lon;&#10;                LatLng p = new LatLng(lat, lon);&#10;                updateCourierMarker(p);&#10;                recalcEta(lat, lon);&#10;                tryFetchDirectionsIfNeeded(lat, lon);&#10;            }&#10;        };&#10;        com.google.android.gms.location.LocationRequest req = new com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_BALANCED_POWER_ACCURACY, 12000)&#10;                .setMinUpdateIntervalMillis(6000)&#10;                .build();&#10;        fused.requestLocationUpdates(req, locationCallback, requireActivity().getMainLooper());&#10;        locationUpdatesStarted = true;&#10;    }&#10;&#10;    private void stopLocationUpdates(){&#10;        if (!locationUpdatesStarted || fused==null || locationCallback==null) return;&#10;        try { fused.removeLocationUpdates(locationCallback); } catch (Exception ignore) {}&#10;        locationUpdatesStarted = false;&#10;        locationCallback = null;&#10;    }&#10;&#10;    private void updateCourierMarker(LatLng p) {&#10;        if (gmap == null) return;&#10;        if (markerCourier == null) {&#10;            markerCourier = gmap.addMarker(new MarkerOptions().position(p).title(&quot;Repartidor&quot;).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));&#10;        } else {&#10;            markerCourier.setPosition(p);&#10;        }&#10;        followCameraIfNeeded(p);&#10;        updateRoutePolylineSimple(p);&#10;    }&#10;&#10;    private void addDestinoMarker(){&#10;        if (gmap==null || destinoLat==null || destinoLon==null) return;&#10;        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;        if (markerDestino==null){&#10;            markerDestino = gmap.addMarker(new MarkerOptions()&#10;                    .position(dest)&#10;                    .title(getString(R.string.destination_label))&#10;                    .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED))&#10;            );&#10;        } else {&#10;            markerDestino.setPosition(dest);&#10;        }&#10;    }&#10;&#10;    // --- Línea simple mientras no haya ruta real ---&#10;    private void updateRoutePolylineSimple(LatLng courier){&#10;        if (gmap==null || destinoLat==null || destinoLon==null || courier==null) return;&#10;        if (directionsRequested) return; // ya se mostró ruta detallada&#10;        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;        if (rutaPolyline==null){&#10;            rutaPolyline = gmap.addPolyline(new PolylineOptions().add(courier, dest).color(0xFF1565C0).width(8f));&#10;        } else {&#10;            rutaPolyline.setPoints(java.util.Arrays.asList(courier, dest));&#10;        }&#10;    }&#10;&#10;    // --- Descarga ruta de Directions con gradiente ---&#10;    private void tryFetchDirectionsIfNeeded(double origenLat, double origenLon){&#10;        if (destinoLat==null || destinoLon==null) return;&#10;        String apiKey = BuildConfig.MAPS_API_KEY;&#10;        if (TextUtils.isEmpty(apiKey)) return; // sin API KEY mantenemos línea simple&#10;        double moved = (lastRouteOriginLat!=null &amp;&amp; lastRouteOriginLon!=null) ? TrackingService.haversine(lastRouteOriginLat, lastRouteOriginLon, origenLat, origenLon) : Double.MAX_VALUE;&#10;        if (directionsRequested &amp;&amp; moved &lt; ROUTE_REFRESH_MIN_MOVEMENT_KM) return;&#10;        directionsRequested = true;&#10;        lastRouteOriginLat = origenLat; lastRouteOriginLon = origenLon;&#10;        final String url = &quot;https://maps.googleapis.com/maps/api/directions/json?origin=&quot;+origenLat+&quot;,&quot;+origenLon+&quot;&amp;destination=&quot;+destinoLat+&quot;,&quot;+destinoLon+&quot;&amp;mode=driving&amp;key=&quot;+apiKey;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                Request rq = new Request.Builder().url(url).build();&#10;                try (Response resp = httpClient.newCall(rq).execute()) {&#10;                    if (!resp.isSuccessful()) throw new RuntimeException(&quot;HTTP &quot;+resp.code());&#10;                    String body = resp.body()!=null? resp.body().string():null;&#10;                    if (body==null) throw new RuntimeException(&quot;Sin body&quot;);&#10;                    JSONObject json = new JSONObject(body);&#10;                    JSONArray routes = json.optJSONArray(&quot;routes&quot;);&#10;                    if (routes!=null &amp;&amp; routes.length()&gt;0){&#10;                        JSONObject r0 = routes.getJSONObject(0);&#10;                        JSONObject overview = r0.optJSONObject(&quot;overview_polyline&quot;);&#10;                        if (overview!=null){&#10;                            String pts = overview.optString(&quot;points&quot;);&#10;                            java.util.List&lt;LatLng&gt; decoded = decodePoly(pts);&#10;                            runOnUi(() -&gt; drawGradientRoute(decoded));&#10;                        }&#10;                    }&#10;                }&#10;            } catch (Exception ex){&#10;                runOnUi(() -&gt; directionsRequested = false); // permitir reintento&#10;            }&#10;        });&#10;    }&#10;&#10;    private void clearRouteSegments(){&#10;        for (Polyline p : routeSegments) try { p.remove(); } catch (Exception ignore) {}&#10;        routeSegments.clear();&#10;        if (rutaPolyline!=null){ try { rutaPolyline.remove(); } catch (Exception ignore) {} rutaPolyline=null; }&#10;    }&#10;&#10;    private void drawGradientRoute(java.util.List&lt;LatLng&gt; points){&#10;        if (gmap==null || points==null || points.size()&lt;2) return;&#10;        clearRouteSegments();&#10;        int maxPts=120;&#10;        if (points.size()&gt;maxPts){&#10;            java.util.List&lt;LatLng&gt; reduced = new java.util.ArrayList&lt;&gt;();&#10;            double step = (double)(points.size()-1)/(maxPts-1);&#10;            for (int i=0;i&lt;maxPts;i++) reduced.add(points.get((int)Math.round(i*step)));&#10;            points = reduced;&#10;        }&#10;        int n = points.size();&#10;        int startColor=0xFF1565C0, endColor=0xFF2E7D32;&#10;        for (int i=0;i&lt;n-1;i++){&#10;            LatLng a = points.get(i), b = points.get(i+1);&#10;            float f = (float)i/(float)(n-2);&#10;            int c = interpolateColor(startColor, endColor, f);&#10;            Polyline seg = gmap.addPolyline(new PolylineOptions().add(a,b).color(c).width(12f).zIndex(10f));&#10;            routeSegments.add(seg);&#10;        }&#10;    }&#10;&#10;    private int interpolateColor(int c1, int c2, float f){&#10;        int a1=(c1&gt;&gt;24)&amp;0xFF,r1=(c1&gt;&gt;16)&amp;0xFF,g1=(c1&gt;&gt;8)&amp;0xFF,b1=c1&amp;0xFF;&#10;        int a2=(c2&gt;&gt;24)&amp;0xFF,r2=(c2&gt;&gt;16)&amp;0xFF,g2=(c2&gt;&gt;8)&amp;0xFF,b2=c2&amp;0xFF;&#10;        int a=(int)(a1+(a2-a1)*f), r=(int)(r1+(r2-r1)*f), g=(int)(g1+(g2-g1)*f), b=(int)(b1+(b2-b1)*f);&#10;        return (a&lt;&lt;24)|(r&lt;&lt;16)|(g&lt;&lt;8)|b;&#10;    }&#10;&#10;    private java.util.List&lt;LatLng&gt; decodePoly(String encoded){&#10;        java.util.List&lt;LatLng&gt; poly = new java.util.ArrayList&lt;&gt;();&#10;        if (encoded==null) return poly;&#10;        int len=encoded.length(), index=0, lat=0, lng=0;&#10;        while (index &lt; len){&#10;            int b, shift=0, result=0;&#10;            do { b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20 &amp;&amp; index &lt; len);&#10;            int dlat = ((result &amp; 1)!=0 ? ~(result&gt;&gt;1) : (result&gt;&gt;1)); lat += dlat;&#10;            shift=0; result=0;&#10;            do { if (index&gt;=len) break; b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20 &amp;&amp; index &lt; len);&#10;            int dlng = ((result &amp; 1)!=0 ? ~(result&gt;&gt;1) : (result&gt;&gt;1)); lng += dlng;&#10;            double latD = lat/1E5; double lonD = lng/1E5; poly.add(new LatLng(latD, lonD));&#10;        }&#10;        return poly;&#10;    }&#10;&#10;    // === Método ETA restaurado ===&#10;    private void recalcEta(double olat, double olon) {&#10;        if (destinoLat == null || destinoLon == null) return;&#10;        double km;&#10;        try { km = TrackingService.haversine(olat, olon, destinoLat, destinoLon); } catch (Exception e) { km = 5; }&#10;        if (km &lt; 0) km = 0;&#10;        lastDistanceKm = km;&#10;        boolean isClose = km &lt;= CLOSE_DISTANCE_KM;&#10;        if (markerCourier != null) {&#10;            if (isClose &amp;&amp; !markerCloseApplied) {&#10;                markerCourier.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));&#10;                markerCloseApplied = true;&#10;            } else if (!isClose &amp;&amp; markerCloseApplied) {&#10;                markerCourier.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));&#10;                markerCloseApplied = false;&#10;            }&#10;        }&#10;        if (km &lt;= 0.05) { // llegada muy cercana&#10;            if (tvEta != null)&#10;                tvEta.setText(getString(R.string.eta_format_only, getString(R.string.minutes_sub_min)));&#10;            if (chipDistance != null) chipDistance.setText(&quot;&lt;50m&quot;);&#10;            return;&#10;        }&#10;        String etaIso = TrackingService.calcEtaIso(Math.max(0.3, km), 25);&#10;        lastEtaIso = etaIso;&#10;        String etaShort = shortTime(etaIso);&#10;        java.text.DecimalFormat df = new java.text.DecimalFormat(&quot;0.0&quot;);&#10;        if (tvEta != null)&#10;            tvEta.setText(getString(R.string.eta_with_distance_format, etaShort, df.format(km)));&#10;        if (chipDistance != null) {&#10;            if (km &gt;= 1) chipDistance.setText(String.format(Locale.getDefault(), &quot;%.1f km&quot;, km));&#10;            else chipDistance.setText(String.format(Locale.getDefault(), &quot;%d m&quot;, (int) Math.round(km * 1000)));&#10;        }&#10;    }&#10;&#10;    private String shortTime(String iso) {&#10;        if (iso == null) return &quot;—&quot;;&#10;        try {&#10;            SimpleDateFormat in = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;, Locale.getDefault());&#10;            Date d = in.parse(iso);&#10;            if (d == null) return iso;&#10;            return android.text.format.DateFormat.getTimeFormat(requireContext()).format(d);&#10;        } catch (Exception e) {&#10;            return iso;&#10;        }&#10;    }&#10;&#10;    // Helpers UI restaurados&#10;    private void runOnUi(Runnable r){ if(!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;    private void toast(String s){ if(!isAdded()) return; Toast.makeText(requireContext(), s, Toast.LENGTH_SHORT).show(); }&#10;&#10;    @Override public void onPause(){ super.onPause(); stopLocationUpdates(); }&#10;    @Override public void onDestroyView(){ stopLocationUpdates(); gmap=null; super.onDestroyView(); }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/LoginFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/LoginFragment.java" />
              <option name="originalContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.navigation.NavOptions;&#10;import androidx.navigation.fragment.NavHostFragment;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.PasswordUtils;&#10;import com.hfad.encomiendas.core.SessionManager;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.User;&#10;&#10;import java.util.concurrent.Executors;&#10;&#10;public class LoginFragment extends Fragment {&#10;&#10;    private TextInputLayout tilEmail, tilPass;&#10;    private TextInputEditText etEmail, etPass;&#10;    private MaterialButton btnLogin, btnIrARegistro;&#10;&#10;    public LoginFragment() {}&#10;&#10;    @Nullable @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_login, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;&#10;        tilEmail     = v.findViewById(R.id.tilEmail);&#10;        tilPass      = v.findViewById(R.id.tilPassword);&#10;        etEmail      = v.findViewById(R.id.etEmail);&#10;        etPass       = v.findViewById(R.id.etPassword);&#10;        btnLogin     = v.findViewById(R.id.btnLogin);&#10;        // &lt;&lt;&lt; OJO: el id real del XML es btnIrARegistro&#10;        btnIrARegistro = v.findViewById(R.id.btnIrARegistro);&#10;&#10;        if (btnLogin != null) {&#10;            btnLogin.setOnClickListener(view -&gt; doLogin());&#10;        }&#10;        if (btnIrARegistro != null) {&#10;            btnIrARegistro.setOnClickListener(view -&gt;&#10;                    NavHostFragment.findNavController(this)&#10;                            .navigate(R.id.action_login_to_registro));&#10;        }&#10;    }&#10;&#10;    private void doLogin() {&#10;        String email = etEmail != null &amp;&amp; etEmail.getText()!=null ? etEmail.getText().toString().trim() : &quot;&quot;;&#10;        String pass  = etPass  != null &amp;&amp; etPass.getText()!=null  ? etPass.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (TextUtils.isEmpty(email)) { if (tilEmail!=null) tilEmail.setError(&quot;Requerido&quot;); return; }&#10;        if (TextUtils.isEmpty(pass))  { if (tilPass !=null)  tilPass.setError(&quot;Requerido&quot;); return; }&#10;        if (tilEmail!=null) tilEmail.setError(null);&#10;        if (tilPass !=null)  tilPass.setError(null);&#10;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                User u = db.userDao().findByEmail(email);&#10;                String hash = PasswordUtils.sha256(pass);&#10;&#10;                if (u == null || u.passwordHash == null || !u.passwordHash.equals(hash)) {&#10;                    runOnUi(() -&gt; { if (tilPass!=null) tilPass.setError(&quot;Credenciales inválidas&quot;); });&#10;                    return;&#10;                }&#10;&#10;                // Guardar sesión con ROL&#10;                String role = (u.rol == null ? &quot;&quot; : u.rol.trim());&#10;                new SessionManager(requireContext()).login(email, role);&#10;&#10;                // Navegar por rol&#10;                int dest = R.id.homeDashboardFragment; // default REMITENTE&#10;                switch (role.toUpperCase()) {&#10;                    case &quot;OPERADOR&quot;:&#10;                    case &quot;OPERADOR_HUB&quot;:&#10;                        dest = R.id.hubDashboardFragment; break;&#10;                    case &quot;REPARTIDOR&quot;:&#10;                        dest = R.id.repartidorDashboardFragment; break;&#10;                    case &quot;ASIGNADOR&quot;:&#10;                        dest = R.id.asignadorFragment; break;&#10;                    case &quot;RECOLECTOR&quot;:&#10;                        dest = R.id.misAsignacionesFragment; break;&#10;                }&#10;                int finalDest = dest;&#10;                runOnUi(() -&gt; {&#10;                    NavOptions opts = new NavOptions.Builder()&#10;                            .setPopUpTo(R.id.loginFragment, true)&#10;                            .build();&#10;                    NavHostFragment.findNavController(this).navigate(finalDest, null, opts);&#10;                });&#10;&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; { if (tilPass!=null) tilPass.setError(&quot;Error: &quot; + e.getMessage()); });&#10;            }&#10;        });&#10;    }&#10;&#10;    private void runOnUi(Runnable r) { if (!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;}" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.text.TextUtils;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.annotation.Nullable;&#13;&#10;import androidx.fragment.app.Fragment;&#13;&#10;import androidx.navigation.NavOptions;&#13;&#10;import androidx.navigation.fragment.NavHostFragment;&#13;&#10;&#13;&#10;import com.google.android.material.button.MaterialButton;&#13;&#10;import com.google.android.material.textfield.TextInputEditText;&#13;&#10;import com.google.android.material.textfield.TextInputLayout;&#13;&#10;import com.hfad.encomiendas.R;&#13;&#10;import com.hfad.encomiendas.core.PasswordUtils;&#13;&#10;import com.hfad.encomiendas.core.SessionManager;&#13;&#10;import com.hfad.encomiendas.data.AppDatabase;&#13;&#10;import com.hfad.encomiendas.data.User;&#13;&#10;&#13;&#10;import java.util.concurrent.Executors;&#13;&#10;&#13;&#10;public class LoginFragment extends Fragment {&#13;&#10;&#13;&#10;    private TextInputLayout tilEmail, tilPass;&#13;&#10;    private TextInputEditText etEmail, etPass;&#13;&#10;    private MaterialButton btnLogin, btnIrARegistro;&#13;&#10;&#13;&#10;    public LoginFragment() {}&#13;&#10;&#13;&#10;    @Nullable @Override&#13;&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#13;&#10;        return inflater.inflate(R.layout.fragment_login, container, false);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#13;&#10;        super.onViewCreated(v, savedInstanceState);&#13;&#10;&#13;&#10;        tilEmail     = v.findViewById(R.id.tilEmail);&#13;&#10;        tilPass      = v.findViewById(R.id.tilPassword);&#13;&#10;        etEmail      = v.findViewById(R.id.etEmail);&#13;&#10;        etPass       = v.findViewById(R.id.etPassword);&#13;&#10;        btnLogin     = v.findViewById(R.id.btnLogin);&#13;&#10;        // &lt;&lt;&lt; OJO: el id real del XML es btnIrARegistro&#13;&#10;        btnIrARegistro = v.findViewById(R.id.btnIrARegistro);&#13;&#10;&#13;&#10;        if (btnLogin != null) {&#13;&#10;            btnLogin.setOnClickListener(view -&gt; doLogin());&#13;&#10;        }&#13;&#10;        if (btnIrARegistro != null) {&#13;&#10;            btnIrARegistro.setOnClickListener(view -&gt;&#13;&#10;                    NavHostFragment.findNavController(this)&#13;&#10;                            .navigate(R.id.action_login_to_registro));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void doLogin() {&#13;&#10;        String email = etEmail != null &amp;&amp; etEmail.getText()!=null ? etEmail.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String pass  = etPass  != null &amp;&amp; etPass.getText()!=null  ? etPass.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (TextUtils.isEmpty(email)) { if (tilEmail!=null) tilEmail.setError(&quot;Requerido&quot;); return; }&#13;&#10;        if (TextUtils.isEmpty(pass))  { if (tilPass !=null)  tilPass.setError(&quot;Requerido&quot;); return; }&#13;&#10;        if (tilEmail!=null) tilEmail.setError(null);&#13;&#10;        if (tilPass !=null)  tilPass.setError(null);&#13;&#10;&#13;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#13;&#10;            try {&#13;&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#13;&#10;                User u = db.userDao().findByEmail(email);&#13;&#10;                String hash = PasswordUtils.sha256(pass);&#13;&#10;&#13;&#10;                if (u == null || u.passwordHash == null || !u.passwordHash.equals(hash)) {&#13;&#10;                    runOnUi(() -&gt; { if (tilPass!=null) tilPass.setError(&quot;Credenciales inválidas&quot;); });&#13;&#10;                    return;&#13;&#10;                }&#13;&#10;&#13;&#10;                // Guardar sesión con ROL&#13;&#10;                String role = (u.rol == null ? &quot;&quot; : u.rol.trim());&#13;&#10;                new SessionManager(requireContext()).login(email, role);&#13;&#10;&#13;&#10;                // Navegar por rol&#13;&#10;                int dest = R.id.homeDashboardFragment; // default REMITENTE&#13;&#10;                switch (role.toUpperCase()) {&#13;&#10;                    case &quot;ADMIN&quot;:&#13;&#10;                        dest = R.id.adminFragment; break;&#13;&#10;                    case &quot;OPERADOR&quot;:&#13;&#10;                    case &quot;OPERADOR_HUB&quot;:&#13;&#10;                        dest = R.id.hubDashboardFragment; break;&#13;&#10;                    case &quot;REPARTIDOR&quot;:&#13;&#10;                        dest = R.id.repartidorDashboardFragment; break;&#13;&#10;                    case &quot;ASIGNADOR&quot;:&#13;&#10;                        dest = R.id.asignadorFragment; break;&#13;&#10;                    case &quot;RECOLECTOR&quot;:&#13;&#10;                        dest = R.id.misAsignacionesFragment; break;&#13;&#10;                }&#13;&#10;                int finalDest = dest;&#13;&#10;                runOnUi(() -&gt; {&#13;&#10;                    NavOptions opts = new NavOptions.Builder()&#13;&#10;                            .setPopUpTo(R.id.loginFragment, true)&#13;&#10;                            .build();&#13;&#10;                    NavHostFragment.findNavController(this).navigate(finalDest, null, opts);&#13;&#10;                });&#13;&#10;&#13;&#10;            } catch (Exception e) {&#13;&#10;                runOnUi(() -&gt; { if (tilPass!=null) tilPass.setError(&quot;Error: &quot; + e.getMessage()); });&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void runOnUi(Runnable r) { if (!isAdded()) return; requireActivity().runOnUiThread(r); }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_in_left.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_in_left.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_slow_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;-100%&quot;&#10;        android:toXDelta=&quot;0%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;0&quot; android:toAlpha=&quot;1&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_out_left.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_out_left.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_linear_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;0%&quot;&#10;        android:toXDelta=&quot;-100%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;1&quot; android:toAlpha=&quot;0&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_out_right.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_out_right.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_linear_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;0%&quot;&#10;        android:toXDelta=&quot;100%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;1&quot; android:toAlpha=&quot;0&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_admin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_admin.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M12,1L3,5v6c0,5.55 3.84,10.74 9,12 5.16,-1.26 9,-6.45 9,-12L21,5l-9,-4zM12,11.99h7c-0.53,4.12 -3.28,7.79 -7,8.94L12,12L5,12L5,6.3l7,-3.11v8.8z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_forward.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_arrow_forward.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:width=&quot;24dp&quot;&#13;&#10;    android:height=&quot;24dp&quot;&#13;&#10;    android:viewportWidth=&quot;24&quot;&#13;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#13;&#10;    &lt;path&#13;&#10;        android:fillColor=&quot;#000000&quot;&#13;&#10;        android:pathData=&quot;M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z&quot;/&gt;&#13;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_people.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_people.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M16,11c1.66,0 2.99,-1.34 2.99,-3S17.66,5 16,5c-1.66,0 -3,1.34 -3,3s1.34,3 3,3zM8,11c1.66,0 2.99,-1.34 2.99,-3S9.66,5 8,5C6.34,5 5,6.34 5,8s1.34,3 3,3zM8,13c-2.33,0 -7,1.17 -7,3.5L1,19h14v-2.5c0,-2.33 -4.67,-3.5 -7,-3.5zM16,13c-0.29,0 -0.62,0.02 -0.97,0.05 1.16,0.84 1.97,1.97 1.97,3.45L17,19h6v-2.5c0,-2.33 -4.67,-3.5 -7,-3.5z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94 0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87C2.62,9.08 2.66,9.34 2.86,9.48l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61L19.14,12.94zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6s3.6,1.62 3.6,3.6S13.98,15.6 12,15.6z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_stats.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_stats.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#000000&quot;&#10;        android:pathData=&quot;M19,3L5,3c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2L21,5c0,-1.1 -0.9,-2 -2,-2zM9,17L7,17v-7h2v7zM13,17h-2L11,7h2v10zM17,17h-2v-4h2v4z&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_admin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_admin.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@android:color/white&quot;&#10;    tools:context=&quot;.ui.AdminFragment&quot;&gt;&#10;&#10;    &lt;!-- Encabezado --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/headerLayout&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&#10;        android:background=&quot;@color/colorPrimary&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;80dp&quot;&#10;            android:layout_height=&quot;80dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:src=&quot;@drawable/ic_admin&quot;&#10;            android:contentDescription=&quot;Admin icon&quot;&#10;            app:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:text=&quot;Panel de Administrador&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvAdminEmail&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:text=&quot;admin@gmail.com&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- ScrollView para el contenido --&gt;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:fillViewport=&quot;true&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/headerLayout&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Card de Bienvenida --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Bienvenido, Administrador&quot;&#10;                        android:textColor=&quot;@color/colorPrimary&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginTop=&quot;8dp&quot;&#10;                        android:text=&quot;Tienes acceso completo al sistema de gestión de encomiendas. Desde aquí puedes gestionar usuarios, ver estadísticas y configurar el sistema.&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Opciones del Admin --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Opciones Disponibles&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;!-- Botón Estadísticas --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardEstadisticas&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;48dp&quot;&#10;                        android:layout_height=&quot;48dp&quot;&#10;                        android:src=&quot;@drawable/ic_stats&quot;&#10;                        android:contentDescription=&quot;Estadísticas&quot;&#10;                        app:tint=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&#10;                        android:layout_marginStart=&quot;16dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Estadísticas del Sistema&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@android:color/black&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Ver métricas y reportes generales&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:layout_gravity=&quot;center_vertical&quot;&#10;                        android:src=&quot;@drawable/ic_arrow_forward&quot;&#10;                        app:tint=&quot;@android:color/darker_gray&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Botón Gestión de Usuarios --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardGestionUsuarios&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;48dp&quot;&#10;                        android:layout_height=&quot;48dp&quot;&#10;                        android:src=&quot;@drawable/ic_people&quot;&#10;                        android:contentDescription=&quot;Usuarios&quot;&#10;                        app:tint=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&#10;                        android:layout_marginStart=&quot;16dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Gestión de Usuarios&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@android:color/black&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Administrar usuarios del sistema&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:layout_gravity=&quot;center_vertical&quot;&#10;                        android:src=&quot;@drawable/ic_arrow_forward&quot;&#10;                        app:tint=&quot;@android:color/darker_gray&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Botón Configuración del Sistema --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardConfiguracion&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;48dp&quot;&#10;                        android:layout_height=&quot;48dp&quot;&#10;                        android:src=&quot;@drawable/ic_settings&quot;&#10;                        android:contentDescription=&quot;Configuración&quot;&#10;                        app:tint=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:orientation=&quot;vertical&quot;&#10;                        android:layout_marginStart=&quot;16dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Configuración del Sistema&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@android:color/black&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Ajustes generales y parámetros&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;24dp&quot;&#10;                        android:layout_height=&quot;24dp&quot;&#10;                        android:layout_gravity=&quot;center_vertical&quot;&#10;                        android:src=&quot;@drawable/ic_arrow_forward&quot;&#10;                        app:tint=&quot;@android:color/darker_gray&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Información del Sistema --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Información del Sistema&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@android:color/black&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:text=&quot;Versión del Sistema:&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;1.0.0&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@android:color/black&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:text=&quot;Tipo de Acceso:&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Administrador&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@color/colorPrimary&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_entrega.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_entrega.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;Entrega&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEstado&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/map_container_entrega&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;/&gt;&#10;                &lt;com.google.android.material.chip.Chip&#10;                    android:id=&quot;@+id/chipDistance&quot;&#10;                    style=&quot;@style/Widget.Material3.Chip.Assist&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:padding=&quot;8dp&quot;&#10;                    android:text=&quot;ETA: —&quot;/&gt;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;/&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnIniciarRuta&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Iniciar ruta&quot;/&gt;&#10;                    &lt;Space android:layout_width=&quot;12dp&quot; android:layout_height=&quot;1dp&quot;/&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnMarcarEntregado&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.FilledTonalButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Entregado&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;Entrega&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEstado&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/map_container_entrega&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;/&gt;&#10;                &lt;com.google.android.material.chip.Chip&#10;                    android:id=&quot;@+id/chipDistance&quot;&#10;                    style=&quot;@style/Widget.Material3.Chip.Assist&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:padding=&quot;8dp&quot;&#10;                    android:text=&quot;ETA: —&quot;/&gt;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;/&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnIniciarRuta&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Iniciar ruta&quot;/&gt;&#10;                    &lt;Space android:layout_width=&quot;12dp&quot; android:layout_height=&quot;1dp&quot;/&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnMarcarEntregado&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Entregado&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_recoleccion_mapa.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_recoleccion_mapa.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;com.google.android.gms.maps.MapView&#10;        android:id=&quot;@+id/mapFullReco&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;#66000000&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnBackReco&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#10;            android:contentDescription=&quot;Cerrar&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvStatusReco&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:text=&quot;Cargando...&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabCenterReco&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Centrar&quot;&#10;        android:src=&quot;@android:drawable/ic_menu_mylocation&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_admin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_admin.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;    &lt;!-- Menú específico para ADMIN --&gt;&#10;&#10;    &lt;!-- Estadísticas --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_statistics&quot;&#10;        android:title=&quot;Estadísticas&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;    &lt;!-- Gestión de Usuarios --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_manage_users&quot;&#10;        android:title=&quot;Gestionar Usuarios&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;    &lt;!-- Perfil --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_profile&quot;&#10;        android:title=&quot;Mi Perfil&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;    &lt;!-- Ayuda --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_help&quot;&#10;        android:title=&quot;Ayuda&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;    &lt;item android:title=&quot;──────────&quot; android:enabled=&quot;false&quot; /&gt;&#10;&#10;    &lt;!-- Cerrar sesión --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_logout&quot;&#10;        android:title=&quot;Cerrar sesión&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/loginFragment&quot;&gt;&#10;&#10;    &lt;!-- LOGIN --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/loginFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.LoginFragment&quot;&#10;        android:label=&quot;Iniciar sesión&quot;&gt;&#10;        &lt;!-- Ir a registro --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_registro&quot;&#10;            app:destination=&quot;@id/registroRemitenteFragment&quot; /&gt;&#10;        &lt;!-- Entrar como REMITENTE --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_recoleccion&quot;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Entrar como ASIGNADOR --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_asignador&quot;&#10;            app:destination=&quot;@id/asignadorFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Entrar como RECOLECTOR --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_misAsignaciones&quot;&#10;            app:destination=&quot;@id/misAsignacionesFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Ir a HUB --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_hub&quot;&#10;            app:destination=&quot;@id/hubDashboardFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;        &lt;!-- Ir a Home (Remitente) --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_login_to_home&quot;&#10;            app:destination=&quot;@id/homeDashboardFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- REGISTRO (Remitente) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/registroRemitenteFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RegistroRemitenteFragment&quot;&#10;        android:label=&quot;Registro&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_registro_to_login&quot;&#10;            app:destination=&quot;@id/loginFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- REMITENTE: Solicitar recolección --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/solicitarRecoleccionFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.SolicitarRecoleccionFragment&quot;&#10;        android:label=&quot;Solicitar recolección&quot; /&gt;&#10;&#10;    &lt;!-- ASIGNADOR: Panel por zonas --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/asignadorFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.AsignadorFragment&quot;&#10;        android:label=&quot;Asignador&quot; &gt;&#10;        &lt;!-- Ver detalle de una zona concreta --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_asignador_to_zonaDetalle&quot;&#10;            app:destination=&quot;@id/zonaDetalleFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_asignador_to_gestionZonas&quot;&#10;            app:destination=&quot;@id/gestionZonasFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- NUEVO: Gestión de Zonas --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/gestionZonasFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.GestionZonasFragment&quot;&#10;        android:label=&quot;Zonas&quot; &gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_gestionZonas_to_zoneMapEditor&quot;&#10;            app:destination=&quot;@id/zoneMapEditorFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- Editor de polígono de zona --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/zoneMapEditorFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZoneMapEditorFragment&quot;&#10;        android:label=&quot;Editar Zona&quot;&gt;&#10;        &lt;argument android:name=&quot;zoneId&quot; app:argType=&quot;integer&quot; android:defaultValue=&quot;-1&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- Home Dashboard (remitente) con acciones a solicitar y mapa de solicitud --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/homeDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HomeDashboardFragment&quot;&#10;        android:label=&quot;Inicio&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_home_to_solicitar&quot;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_home_to_solicitudMapa&quot;&#10;            app:destination=&quot;@id/solicitudMapaFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- Ver una solicitud individual en mapa --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/solicitudMapaFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.SolicitudMapaFragment&quot;&#10;        android:label=&quot;Solicitud en mapa&quot; /&gt;&#10;&#10;    &lt;!-- Ver ruta / punto de recolección --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/recoleccionMapaFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RecoleccionMapaFragment&quot;&#10;        android:label=&quot;Recolección en mapa&quot; /&gt;&#10;&#10;    &lt;!-- Detalle recolección con acción al mapa --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/detalleRecoleccionFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.DetalleRecoleccionFragment&quot;&#10;        android:label=&quot;Detalle de recolección&quot;&gt;&#10;        &lt;argument android:name=&quot;asignacionId&quot; app:argType=&quot;integer&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_detalle_to_recoleccionMapa&quot;&#10;            app:destination=&quot;@id/recoleccionMapaFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- ASIGNADOR: Detalle de zona (pendientes/asignadas) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/zonaDetalleFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZonaDetalleFragment&quot;&#10;        android:label=&quot;Detalle de zona&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;fecha&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;zona&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;        &lt;argument&#10;            android:name=&quot;zoneId&quot;&#10;            app:argType=&quot;integer&quot;&#10;            android:defaultValue=&quot;-1&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- RECOLECTOR: Lista de asignaciones propias --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/misAsignacionesFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.MisAsignacionesFragment&quot;&#10;        android:label=&quot;Mis asignaciones&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_misAsignaciones_to_detalle&quot;&#10;            app:destination=&quot;@id/detalleRecoleccionFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- NUEVO: Dashboard HUB --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/hubDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HubDashboardFragment&quot;&#10;        android:label=&quot;HUB&quot; /&gt;&#10;&#10;    &lt;!-- NUEVO: Dashboard REPARTIDOR --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/repartidorDashboardFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RepartidorDashboardFragment&quot;&#10;        android:label=&quot;Repartidor&quot;&gt;&#10;        &lt;!-- Acción para navegar a las calificaciones --&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_repartidor_to_calificaciones&quot;&#10;            app:destination=&quot;@id/misCalificacionesFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- NUEVO: Mis Calificaciones --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/misCalificacionesFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.MisCalificacionesFragment&quot;&#10;        android:label=&quot;Mis Calificaciones&quot; /&gt;&#10;&#10;    &lt;!-- Fragment de Entrega (faltaba, añadido) --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/entregaFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.EntregaFragment&quot;&#10;        android:label=&quot;Entrega&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;manifiestoItemId&quot;&#10;            app:argType=&quot;integer&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- NUEVO: vista previa ruta polígono --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/poligonoRutaPreviewFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.PoligonoRutaPreviewFragment&quot;&#10;        android:label=&quot;Ruta (polígono)&quot;&gt;&#10;        &lt;argument android:name=&quot;zoneId&quot; app:argType=&quot;integer&quot; android:defaultValue=&quot;-1&quot; /&gt;&#10;        &lt;argument android:name=&quot;fecha&quot; app:argType=&quot;string&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- NUEVO: Mapa fullscreen de zona --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/zonaMapaFullFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZonaMapaFullFragment&quot;&#10;        android:label=&quot;Mapa de zona&quot;&gt;&#10;        &lt;argument android:name=&quot;fecha&quot; app:argType=&quot;string&quot; /&gt;&#10;        &lt;argument android:name=&quot;zona&quot; app:argType=&quot;string&quot; /&gt;&#10;        &lt;argument android:name=&quot;zoneId&quot; app:argType=&quot;integer&quot; android:defaultValue=&quot;-1&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;!-- ADMIN: Dashboard de Estadísticas --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/estadisticasFragment&quot;&#10;        android:name=&quot;com.hfad.encomiendas.ui.EstadisticasFragment&quot;&#10;        android:label=&quot;Estadísticas&quot; /&gt;&#10;&#10;&lt;/navigation&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:id=&quot;@+id/nav_graph&quot;&#13;&#10;    app:startDestination=&quot;@id/loginFragment&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- LOGIN --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/loginFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.LoginFragment&quot;&#13;&#10;        android:label=&quot;Iniciar sesión&quot;&gt;&#13;&#10;        &lt;!-- Ir a registro --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_login_to_registro&quot;&#13;&#10;            app:destination=&quot;@id/registroRemitenteFragment&quot; /&gt;&#13;&#10;        &lt;!-- Entrar como REMITENTE --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_login_to_recoleccion&quot;&#13;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot;&#13;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#13;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#13;&#10;        &lt;!-- Entrar como ASIGNADOR --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_login_to_asignador&quot;&#13;&#10;            app:destination=&quot;@id/asignadorFragment&quot;&#13;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#13;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#13;&#10;        &lt;!-- Entrar como RECOLECTOR --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_login_to_misAsignaciones&quot;&#13;&#10;            app:destination=&quot;@id/misAsignacionesFragment&quot;&#13;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#13;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#13;&#10;        &lt;!-- Ir a HUB --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_login_to_hub&quot;&#13;&#10;            app:destination=&quot;@id/hubDashboardFragment&quot;&#13;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#13;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#13;&#10;        &lt;!-- Ir a Home (Remitente) --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_login_to_home&quot;&#13;&#10;            app:destination=&quot;@id/homeDashboardFragment&quot;&#13;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#13;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#13;&#10;        &lt;!-- Entrar como ADMIN --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_login_to_admin&quot;&#13;&#10;            app:destination=&quot;@id/adminFragment&quot;&#13;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#13;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- REGISTRO (Remitente) --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/registroRemitenteFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RegistroRemitenteFragment&quot;&#13;&#10;        android:label=&quot;Registro&quot;&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_registro_to_login&quot;&#13;&#10;            app:destination=&quot;@id/loginFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- ADMIN: Panel de Administrador --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/adminFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.AdminFragment&quot;&#13;&#10;        android:label=&quot;Admin&quot; &gt;&#13;&#10;        &lt;!-- Acción para navegar a estadísticas --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_admin_to_estadisticas&quot;&#13;&#10;            app:destination=&quot;@id/estadisticasFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- ESTADÍSTICAS (para Admin y otros roles) --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/estadisticasFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.EstadisticasFragment&quot;&#13;&#10;        android:label=&quot;Estadísticas&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- REMITENTE: Solicitar recolección --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/solicitarRecoleccionFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.SolicitarRecoleccionFragment&quot;&#13;&#10;        android:label=&quot;Solicitar recolección&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- ASIGNADOR: Panel por zonas --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/asignadorFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.AsignadorFragment&quot;&#13;&#10;        android:label=&quot;Asignador&quot; &gt;&#13;&#10;        &lt;!-- Ver detalle de una zona concreta --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_asignador_to_zonaDetalle&quot;&#13;&#10;            app:destination=&quot;@id/zonaDetalleFragment&quot; /&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_asignador_to_gestionZonas&quot;&#13;&#10;            app:destination=&quot;@id/gestionZonasFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- NUEVO: Gestión de Zonas --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/gestionZonasFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.GestionZonasFragment&quot;&#13;&#10;        android:label=&quot;Zonas&quot; &gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_gestionZonas_to_zoneMapEditor&quot;&#13;&#10;            app:destination=&quot;@id/zoneMapEditorFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- Editor de polígono de zona --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/zoneMapEditorFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZoneMapEditorFragment&quot;&#13;&#10;        android:label=&quot;Editar Zona&quot;&gt;&#13;&#10;        &lt;argument android:name=&quot;zoneId&quot; app:argType=&quot;integer&quot; android:defaultValue=&quot;-1&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- Home Dashboard (remitente) con acciones a solicitar y mapa de solicitud --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/homeDashboardFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HomeDashboardFragment&quot;&#13;&#10;        android:label=&quot;Inicio&quot;&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_home_to_solicitar&quot;&#13;&#10;            app:destination=&quot;@id/solicitarRecoleccionFragment&quot; /&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_home_to_solicitudMapa&quot;&#13;&#10;            app:destination=&quot;@id/solicitudMapaFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- Ver una solicitud individual en mapa --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/solicitudMapaFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.SolicitudMapaFragment&quot;&#13;&#10;        android:label=&quot;Solicitud en mapa&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- Ver ruta / punto de recolección --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/recoleccionMapaFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RecoleccionMapaFragment&quot;&#13;&#10;        android:label=&quot;Recolección en mapa&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- Detalle recolección con acción al mapa --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/detalleRecoleccionFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.DetalleRecoleccionFragment&quot;&#13;&#10;        android:label=&quot;Detalle de recolección&quot;&gt;&#13;&#10;        &lt;argument android:name=&quot;asignacionId&quot; app:argType=&quot;integer&quot; /&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_detalle_to_recoleccionMapa&quot;&#13;&#10;            app:destination=&quot;@id/recoleccionMapaFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- ASIGNADOR: Detalle de zona (pendientes/asignadas) --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/zonaDetalleFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZonaDetalleFragment&quot;&#13;&#10;        android:label=&quot;Detalle de zona&quot;&gt;&#13;&#10;        &lt;argument&#13;&#10;            android:name=&quot;fecha&quot;&#13;&#10;            app:argType=&quot;string&quot; /&gt;&#13;&#10;        &lt;argument&#13;&#10;            android:name=&quot;zona&quot;&#13;&#10;            app:argType=&quot;string&quot; /&gt;&#13;&#10;        &lt;argument&#13;&#10;            android:name=&quot;zoneId&quot;&#13;&#10;            app:argType=&quot;integer&quot;&#13;&#10;            android:defaultValue=&quot;-1&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- RECOLECTOR: Lista de asignaciones propias --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/misAsignacionesFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.MisAsignacionesFragment&quot;&#13;&#10;        android:label=&quot;Mis asignaciones&quot;&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_misAsignaciones_to_detalle&quot;&#13;&#10;            app:destination=&quot;@id/detalleRecoleccionFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- NUEVO: Dashboard HUB --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/hubDashboardFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.HubDashboardFragment&quot;&#13;&#10;        android:label=&quot;HUB&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- NUEVO: Dashboard REPARTIDOR --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/repartidorDashboardFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.RepartidorDashboardFragment&quot;&#13;&#10;        android:label=&quot;Repartidor&quot;&gt;&#13;&#10;        &lt;!-- Acción para navegar a las calificaciones --&gt;&#13;&#10;        &lt;action&#13;&#10;            android:id=&quot;@+id/action_repartidor_to_calificaciones&quot;&#13;&#10;            app:destination=&quot;@id/misCalificacionesFragment&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- NUEVO: Mis Calificaciones --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/misCalificacionesFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.MisCalificacionesFragment&quot;&#13;&#10;        android:label=&quot;Mis Calificaciones&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- Fragment de Entrega (faltaba, añadido) --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/entregaFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.EntregaFragment&quot;&#13;&#10;        android:label=&quot;Entrega&quot;&gt;&#13;&#10;        &lt;argument&#13;&#10;            android:name=&quot;manifiestoItemId&quot;&#13;&#10;            app:argType=&quot;integer&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- NUEVO: vista previa ruta polígono --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/poligonoRutaPreviewFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.PoligonoRutaPreviewFragment&quot;&#13;&#10;        android:label=&quot;Ruta (polígono)&quot;&gt;&#13;&#10;        &lt;argument android:name=&quot;zoneId&quot; app:argType=&quot;integer&quot; android:defaultValue=&quot;-1&quot; /&gt;&#13;&#10;        &lt;argument android:name=&quot;fecha&quot; app:argType=&quot;string&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;    &lt;!-- NUEVO: Mapa fullscreen de zona --&gt;&#13;&#10;    &lt;fragment&#13;&#10;        android:id=&quot;@+id/zonaMapaFullFragment&quot;&#13;&#10;        android:name=&quot;com.hfad.encomiendas.ui.ZonaMapaFullFragment&quot;&#13;&#10;        android:label=&quot;Mapa de zona&quot;&gt;&#13;&#10;        &lt;argument android:name=&quot;fecha&quot; app:argType=&quot;string&quot; /&gt;&#13;&#10;        &lt;argument android:name=&quot;zona&quot; app:argType=&quot;string&quot; /&gt;&#13;&#10;        &lt;argument android:name=&quot;zoneId&quot; app:argType=&quot;integer&quot; android:defaultValue=&quot;-1&quot; /&gt;&#13;&#10;    &lt;/fragment&gt;&#13;&#10;&#13;&#10;&lt;/navigation&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/raw/map_dark.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/raw/map_dark.json" />
              <option name="updatedContent" value="[&#10;  {&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#212121&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.icon&quot;,&#10;    &quot;stylers&quot;: [ { &quot;visibility&quot;: &quot;off&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.text.stroke&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#212121&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;administrative&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#bdbdbd&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#181818&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#616161&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.stroke&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#1b1b1b&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road&quot;,&#10;    &quot;elementType&quot;: &quot;geometry.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#2c2c2c&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#8a8a8a&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.arterial&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#373737&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.highway&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#3c3c3c&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.highway.controlled_access&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#4e4e4e&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.local&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#616161&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;transit&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;water&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#000000&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;water&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#3d3d3d&quot; } ]&#10;  }&#10;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>