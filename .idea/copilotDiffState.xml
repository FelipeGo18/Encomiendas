<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleEntregaFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/DetalleEntregaFragment.java" />
              <option name="originalContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.pm.PackageManager;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.chip.Chip;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.DeliveryDispatcherService;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Asignacion;&#10;import com.hfad.encomiendas.data.AsignacionDao;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;public class DetalleEntregaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;    private int asignacionId;&#10;&#10;    private TextView tvTitulo, tvEstado, tvEta;&#10;    private Chip chipDistance;&#10;    private MaterialButton btnIniciarRuta, btnEntregado;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;&#10;    private TrackingService tracking;&#10;    private FusedLocationProviderClient fused;&#10;&#10;    private GoogleMap gmap;&#10;    private Marker markerCourier, markerDestino;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat, destinoLon;&#10;    private String estadoAsignacion = &quot;&quot;;&#10;&#10;    private String lastEtaIso = null;&#10;    private Double lastDistanceKm = null;&#10;    private Double lastLat = null, lastLon = null;&#10;&#10;    private boolean locationUpdatesStarted = false;&#10;    private com.google.android.gms.location.LocationCallback locationCallback;&#10;&#10;    public DetalleEntregaFragment() {}&#10;&#10;    @Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_entrega, container, false);&#10;    }&#10;&#10;    @Override public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;    }&#10;&#10;    @Override public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        chipDistance = v.findViewById(R.id.chipDistance);&#10;        btnIniciarRuta = v.findViewById(R.id.btnIniciarRuta);&#10;        btnEntregado = v.findViewById(R.id.btnMarcarEntregado);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        rvTimeline.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        trackingAdapter = new TrackingAdapter();&#10;        rvTimeline.setAdapter(trackingAdapter);&#10;&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map_container_entrega);&#10;        if (mapFragment == null) {&#10;            mapFragment = SupportMapFragment.newInstance();&#10;            getChildFragmentManager().beginTransaction().replace(R.id.map_container_entrega, mapFragment).commit();&#10;        }&#10;        mapFragment.getMapAsync(this);&#10;&#10;        btnIniciarRuta.setOnClickListener(v1 -&gt; iniciarRuta());&#10;        btnEntregado.setOnClickListener(v12 -&gt; marcarEntregado());&#10;&#10;        cargar();&#10;    }&#10;&#10;    private void cargar() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                Asignacion a = db.asignacionDao().getById(asignacionId);&#10;                if (a == null) { runOnUi(() -&gt; toast(&quot;Asignación no encontrada&quot;)); return; }&#10;                solicitudId = a.solicitudId;&#10;                estadoAsignacion = a.estado;&#10;&#10;                Solicitud s = db.solicitudDao().byId(solicitudId);&#10;                if (s != null) { destinoLat = s.lat; destinoLon = s.lon; }&#10;&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(&quot;Entrega #&quot; + asignacionId);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    refreshTimeline();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void refreshTimeline() {&#10;        if (solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (ev, eta) -&gt; {&#10;            if (trackingAdapter != null) trackingAdapter.submit(ev);&#10;            if (eta != null &amp;&amp; eta.eta != null) {&#10;                lastEtaIso = eta.eta;&#10;                tvEta.setText(&quot;ETA: &quot; + eta.eta);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void iniciarRuta() {&#10;        if (estadoAsignacion.startsWith(&quot;OUT_FOR_DELIVERY&quot;)) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().marcarOutForDelivery(asignacionId);&#10;                db.solicitudDao().marcarEnRutaEntrega(solicitudId);&#10;                estadoAsignacion = &quot;OUT_FOR_DELIVERY&quot;;&#10;                // Evento&#10;                tracking.logEvent(solicitudId, &quot;OUT_FOR_DELIVERY&quot;, &quot;Repartidor en ruta&quot;, null, null, null);&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Ruta iniciada&quot;);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    startLocationUpdates();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void marcarEntregado() {&#10;        if (!&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) &amp;&amp; !&quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) return;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar entrega&quot;)&#10;                .setMessage(&quot;¿Marcar como ENTREGADO?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                    try {&#10;                        AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                        db.asignacionDao().marcarEntregada(asignacionId);&#10;                        db.solicitudDao().marcarEntregada(solicitudId);&#10;                        tracking.logEvent(solicitudId, &quot;DELIVERED&quot;, &quot;Entrega confirmada&quot;, null, null, null);&#10;                        estadoAsignacion = &quot;DELIVERED&quot;;&#10;                        runOnUi(() -&gt; {&#10;                            toast(&quot;Entregado&quot;);&#10;                            tvEstado.setText(estadoAsignacion);&#10;                            stopLocationUpdates();&#10;                            actualizarBotones();&#10;                        });&#10;                    } catch (Exception ex) {&#10;                        runOnUi(() -&gt; toast(&quot;Error: &quot; + ex.getMessage()));&#10;                    }&#10;                }))&#10;                .show();&#10;    }&#10;&#10;    private void actualizarBotones() {&#10;        boolean delivered = &quot;DELIVERED&quot;.equals(estadoAsignacion);&#10;        boolean out = &quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion);&#10;        btnIniciarRuta.setEnabled(!delivered &amp;&amp; !out);&#10;        btnEntregado.setEnabled(out || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion));&#10;        float a1 = btnIniciarRuta.isEnabled()?1f:0.4f; btnIniciarRuta.setAlpha(a1);&#10;        float a2 = btnEntregado.isEnabled()?1f:0.4f; btnEntregado.setAlpha(a2);&#10;    }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        gmap = googleMap;&#10;        gmap.getUiSettings().setZoomControlsEnabled(true);&#10;        addDestinoMarker();&#10;        if (&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion)) startLocationUpdates();&#10;    }&#10;&#10;    private void addDestinoMarker() {&#10;        if (gmap == null || destinoLat == null || destinoLon == null) return;&#10;        if (markerDestino == null) {&#10;            markerDestino = gmap.addMarker(new MarkerOptions().position(new LatLng(destinoLat, destinoLon)).title(&quot;Destino&quot;));&#10;        }&#10;    }&#10;&#10;    private void startLocationUpdates() {&#10;        if (locationUpdatesStarted) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        locationCallback = new com.google.android.gms.location.LocationCallback() {&#10;            @Override public void onLocationResult(@NonNull com.google.android.gms.location.LocationResult result) {&#10;                if (result.getLastLocation()==null) return;&#10;                double lat = result.getLastLocation().getLatitude();&#10;                double lon = result.getLastLocation().getLongitude();&#10;                lastLat = lat; lastLon = lon;&#10;                updateCourierMarker(new LatLng(lat, lon));&#10;                recalcEta(lat, lon);&#10;            }&#10;        };&#10;        com.google.android.gms.location.LocationRequest req = new com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_BALANCED_POWER_ACCURACY, 15000)&#10;                .setMinUpdateIntervalMillis(8000)&#10;                .build();&#10;        fused.requestLocationUpdates(req, locationCallback, requireActivity().getMainLooper());&#10;        locationUpdatesStarted = true;&#10;    }ayu&#10;&#10;    private void stopLocationUpdates() {&#10;        if (!locationUpdatesStarted || locationCallback==null) return;&#10;        fused.removeLocationUpdates(locationCallback);&#10;        locationUpdatesStarted = false;&#10;    }&#10;&#10;    private void updateCourierMarker(LatLng p) {&#10;        if (gmap == null) return;&#10;        if (markerCourier == null) {&#10;            markerCourier = gmap.addMarker(new MarkerOptions().position(p).title(&quot;Repartidor&quot;).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));&#10;            gmap.animateCamera(CameraUpdateFactory.newLatLngZoom(p, 15f));&#10;        } else {&#10;            markerCourier.setPosition(p);&#10;        }&#10;    }&#10;&#10;    private void recalcEta(double olat, double olon) {&#10;        if (destinoLat == null || destinoLon == null) return;&#10;        double km;&#10;        try { km = TrackingService.haversine(olat, olon, destinoLat, destinoLon); } catch (Exception e) { km = 5; }&#10;        if (km &lt; 0) km = 0;&#10;        lastDistanceKm = km;&#10;        if (km &lt;= 0.05) {&#10;            tvEta.setText(&quot;ETA: Arribo&quot;);&#10;            chipDistance.setText(&quot;&lt;50m&quot;);&#10;            return;&#10;        }&#10;        String etaIso = TrackingService.calcEtaIso(Math.max(0.3, km), 25);&#10;        lastEtaIso = etaIso;&#10;        String distStr = km &gt;=1 ? String.format(Locale.getDefault(),&quot;%.1f km&quot;, km) : ((int)Math.round(km*1000))+&quot; m&quot;;&#10;        tvEta.setText(&quot;ETA: &quot; + shortTime(etaIso) + &quot; (&quot; + distStr + &quot;)&quot;);&#10;        chipDistance.setText(distStr);&#10;    }&#10;&#10;    private String shortTime(String iso) {&#10;        if (iso == null) return &quot;—&quot;;&#10;        try {&#10;            SimpleDateFormat in = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;, Locale.getDefault());&#10;            Date d = in.parse(iso);&#10;            if (d == null) return iso;&#10;            return android.text.format.DateFormat.getTimeFormat(requireContext()).format(d);&#10;        } catch (Exception e) { return iso; }&#10;    }&#10;&#10;    private void runOnUi(Runnable r){ if(!isAdded())return; requireActivity().runOnUiThread(r);}    private void toast(String s){ if(!isAdded())return; Toast.makeText(requireContext(), s, Toast.LENGTH_SHORT).show(); }&#10;&#10;    @Override public void onPause(){ super.onPause(); stopLocationUpdates(); }&#10;    @Override public void onDestroyView(){ stopLocationUpdates(); gmap=null; super.onDestroyView(); }&#10;}&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.pm.PackageManager;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.gms.maps.model.MapStyleOptions;&#10;import com.google.android.gms.maps.model.Polyline;&#10;import com.google.android.gms.maps.model.PolylineOptions;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.chip.Chip;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.core.TrackingService;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import com.hfad.encomiendas.ui.adapters.TrackingAdapter;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.concurrent.Executors;&#10;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.Request;&#10;import okhttp3.Response;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;import com.hfad.encomiendas.BuildConfig;&#10;&#10;public class DetalleEntregaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_ID = &quot;asignacionId&quot;;&#10;    private int asignacionId;&#10;&#10;    private TextView tvTitulo, tvEstado, tvEta;&#10;    private Chip chipDistance;&#10;    private MaterialButton btnIniciarRuta, btnEntregado;&#10;    private RecyclerView rvTimeline;&#10;    private TrackingAdapter trackingAdapter;&#10;&#10;    private TrackingService tracking;&#10;    private FusedLocationProviderClient fused;&#10;&#10;    private GoogleMap gmap;&#10;    private Marker markerCourier, markerDestino;&#10;&#10;    private long solicitudId = -1;&#10;    private Double destinoLat, destinoLon;&#10;    private String estadoAsignacion = &quot;&quot;;&#10;&#10;    private String lastEtaIso = null;&#10;    private Double lastDistanceKm = null;&#10;    private Double lastLat = null, lastLon = null;&#10;&#10;    private boolean locationUpdatesStarted = false;&#10;    private com.google.android.gms.location.LocationCallback locationCallback;&#10;&#10;    // --- Campos añadidos para ruta/estilo ---&#10;    private Polyline rutaPolyline;&#10;    private java.util.List&lt;Polyline&gt; routeSegments = new java.util.ArrayList&lt;&gt;();&#10;    private boolean directionsRequested = false;&#10;    private Double lastRouteOriginLat = null, lastRouteOriginLon = null;&#10;    private long lastCameraFollow = 0L;&#10;    private static final long CAMERA_FOLLOW_INTERVAL_MS = 5000L;&#10;    private static final double ROUTE_REFRESH_MIN_MOVEMENT_KM = 0.5; // 500 m&#10;    private static final double CLOSE_DISTANCE_KM = 0.2; // 200 m&#10;    private boolean markerCloseApplied = false;&#10;    private final OkHttpClient httpClient = new OkHttpClient();&#10;&#10;    public DetalleEntregaFragment() {}&#10;&#10;    @Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_detalle_entrega, container, false);&#10;    }&#10;&#10;    @Override public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        asignacionId = getArguments() != null ? getArguments().getInt(ARG_ID, -1) : -1;&#10;    }&#10;&#10;    @Override public void onViewCreated(@NonNull View v, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(v, savedInstanceState);&#10;        tvTitulo = v.findViewById(R.id.tvTitulo);&#10;        tvEstado = v.findViewById(R.id.tvEstado);&#10;        tvEta = v.findViewById(R.id.tvEta);&#10;        chipDistance = v.findViewById(R.id.chipDistance);&#10;        btnIniciarRuta = v.findViewById(R.id.btnIniciarRuta);&#10;        btnEntregado = v.findViewById(R.id.btnMarcarEntregado);&#10;        rvTimeline = v.findViewById(R.id.rvTimeline);&#10;        rvTimeline.setLayoutManager(new LinearLayoutManager(requireContext()));&#10;        trackingAdapter = new TrackingAdapter();&#10;        rvTimeline.setAdapter(trackingAdapter);&#10;&#10;        tracking = new TrackingService(AppDatabase.getInstance(requireContext()));&#10;        fused = LocationServices.getFusedLocationProviderClient(requireContext());&#10;&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map_container_entrega);&#10;        if (mapFragment == null) {&#10;            mapFragment = SupportMapFragment.newInstance();&#10;            getChildFragmentManager().beginTransaction().replace(R.id.map_container_entrega, mapFragment).commit();&#10;        }&#10;        mapFragment.getMapAsync(this);&#10;&#10;        btnIniciarRuta.setOnClickListener(v1 -&gt; iniciarRuta());&#10;        btnEntregado.setOnClickListener(v12 -&gt; marcarEntregado());&#10;&#10;        cargar();&#10;    }&#10;&#10;    private void cargar() {&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                // Recuperar asignación principal&#10;                com.hfad.encomiendas.data.Asignacion a = db.asignacionDao().getById(asignacionId);&#10;                if (a != null) {&#10;                    solicitudId = a.solicitudId;&#10;                    estadoAsignacion = a.estado != null ? a.estado : &quot;&quot;;&#10;                }&#10;                // Recuperar solicitud para coords&#10;                if (solicitudId &gt; 0) {&#10;                    Solicitud s = db.solicitudDao().byId(solicitudId);&#10;                    if (s != null) { destinoLat = s.lat; destinoLon = s.lon; }&#10;                }&#10;                runOnUi(() -&gt; {&#10;                    tvTitulo.setText(getString(R.string.title_format, asignacionId, estadoAsignacion));&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    refreshTimeline();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void refreshTimeline() {&#10;        if (solicitudId &lt;= 0) return;&#10;        tracking.loadTimelineAndEta(solicitudId, (ev, eta) -&gt; {&#10;            if (trackingAdapter != null) trackingAdapter.submit(ev);&#10;            if (eta != null &amp;&amp; eta.eta != null) {&#10;                lastEtaIso = eta.eta;&#10;                String shortT = shortTime(eta.eta);&#10;                tvEta.setText(getString(R.string.eta_format_only, shortT));&#10;            } else {&#10;                tvEta.setText(getString(R.string.eta_unknown));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void iniciarRuta() {&#10;        if (estadoAsignacion.startsWith(&quot;OUT_FOR_DELIVERY&quot;)) return;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                db.asignacionDao().marcarOutForDelivery(asignacionId);&#10;                db.solicitudDao().marcarEnRutaEntrega(solicitudId);&#10;                estadoAsignacion = &quot;OUT_FOR_DELIVERY&quot;;&#10;                // Evento&#10;                tracking.logEvent(solicitudId, &quot;OUT_FOR_DELIVERY&quot;, &quot;Repartidor en ruta&quot;, null, null, null);&#10;                runOnUi(() -&gt; {&#10;                    toast(&quot;Ruta iniciada&quot;);&#10;                    tvEstado.setText(estadoAsignacion);&#10;                    actualizarBotones();&#10;                    startLocationUpdates();&#10;                });&#10;            } catch (Exception e) {&#10;                runOnUi(() -&gt; toast(&quot;Error: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void marcarEntregado() {&#10;        if (!&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) &amp;&amp; !&quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) return;&#10;        new AlertDialog.Builder(requireContext())&#10;                .setTitle(&quot;Confirmar entrega&quot;)&#10;                .setMessage(&quot;¿Marcar como ENTREGADO?&quot;)&#10;                .setNegativeButton(&quot;Cancelar&quot;, null)&#10;                .setPositiveButton(&quot;Sí&quot;, (d,w) -&gt; Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;                    try {&#10;                        AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                        db.asignacionDao().marcarEntregada(asignacionId);&#10;                        db.solicitudDao().marcarEntregada(solicitudId);&#10;                        tracking.logEvent(solicitudId, &quot;DELIVERED&quot;, &quot;Entrega confirmada&quot;, null, null, null);&#10;                        estadoAsignacion = &quot;DELIVERED&quot;;&#10;                        runOnUi(() -&gt; {&#10;                            toast(&quot;Entregado&quot;); // reutilizamos literal para evitar nuevos resources&#10;                            tvEstado.setText(estadoAsignacion);&#10;                            stopLocationUpdates();&#10;                            actualizarBotones();&#10;                        });&#10;                    } catch (Exception ex) {&#10;                        runOnUi(() -&gt; toast(&quot;Error: &quot; + ex.getMessage()));&#10;                    }&#10;                }))&#10;                .show();&#10;    }&#10;&#10;    private void actualizarBotones() {&#10;        boolean delivered = &quot;DELIVERED&quot;.equals(estadoAsignacion);&#10;        boolean out = &quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion);&#10;        btnIniciarRuta.setEnabled(!delivered &amp;&amp; !out);&#10;        btnEntregado.setEnabled(out || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion));&#10;        float a1 = btnIniciarRuta.isEnabled()?1f:0.4f; btnIniciarRuta.setAlpha(a1);&#10;        float a2 = btnEntregado.isEnabled()?1f:0.4f; btnEntregado.setAlpha(a2);&#10;    }&#10;&#10;    @Override public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        gmap = googleMap;&#10;        gmap.getUiSettings().setZoomControlsEnabled(true);&#10;        gmap.getUiSettings().setCompassEnabled(true);&#10;        applyDarkStyleIfNeeded();&#10;        addDestinoMarker();&#10;        requestSingleCourierLocationAndCenter();&#10;        if (&quot;OUT_FOR_DELIVERY&quot;.equals(estadoAsignacion) || &quot;DISPATCHED_LAST_MILE&quot;.equals(estadoAsignacion)) startLocationUpdates();&#10;    }&#10;&#10;    // --- Estilo nocturno ---&#10;    private void applyDarkStyleIfNeeded(){&#10;        if (gmap==null) return;&#10;        int nightMask = getResources().getConfiguration().uiMode &amp; android.content.res.Configuration.UI_MODE_NIGHT_MASK;&#10;        if (nightMask == android.content.res.Configuration.UI_MODE_NIGHT_YES) {&#10;            try { gmap.setMapStyle(MapStyleOptions.loadRawResourceStyle(requireContext(), R.raw.map_dark)); } catch (Exception ignore) {}&#10;        }&#10;    }&#10;&#10;    // --- Ubicación única para centrar cámara y dibujar línea simple inicial ---&#10;    private void requestSingleCourierLocationAndCenter(){&#10;        if (fused==null || gmap==null) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        fused.getCurrentLocation(Priority.PRIORITY_BALANCED_POWER_ACCURACY, null)&#10;                .addOnSuccessListener(loc -&gt; {&#10;                    if (loc==null) return;&#10;                    double lat = loc.getLatitude(); double lon = loc.getLongitude();&#10;                    lastLat = lat; lastLon = lon;&#10;                    LatLng courier = new LatLng(lat, lon);&#10;                    updateCourierMarker(courier);&#10;                    if (destinoLat!=null &amp;&amp; destinoLon!=null){&#10;                        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;                        try {&#10;                            gmap.moveCamera(CameraUpdateFactory.newLatLngBounds(new com.google.android.gms.maps.model.LatLngBounds.Builder().include(courier).include(dest).build(), 120));&#10;                        } catch (Exception ex){&#10;                            gmap.moveCamera(CameraUpdateFactory.newLatLngZoom(courier, 15f));&#10;                        }&#10;                        updateRoutePolylineSimple(courier);&#10;                        tryFetchDirectionsIfNeeded(lat, lon); // precargar ruta si hay API KEY&#10;                    } else {&#10;                        gmap.moveCamera(CameraUpdateFactory.newLatLngZoom(courier, 15f));&#10;                    }&#10;                });&#10;    }&#10;&#10;    // --- Cámara sigue al repartidor cada cierto tiempo ---&#10;    private void followCameraIfNeeded(LatLng pos){&#10;        if (gmap==null || pos==null) return;&#10;        long now = System.currentTimeMillis();&#10;        if (now - lastCameraFollow &lt; CAMERA_FOLLOW_INTERVAL_MS) return;&#10;        lastCameraFollow = now;&#10;        float zoom = gmap.getCameraPosition()!=null? gmap.getCameraPosition().zoom : 15f;&#10;        try { gmap.animateCamera(CameraUpdateFactory.newLatLngZoom(pos, zoom)); } catch (Exception ignore) {}&#10;    }&#10;&#10;    private void startLocationUpdates() {&#10;        if (locationUpdatesStarted) return;&#10;        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) return;&#10;        locationCallback = new com.google.android.gms.location.LocationCallback() {&#10;            @Override public void onLocationResult(@NonNull com.google.android.gms.location.LocationResult result) {&#10;                if (result.getLastLocation()==null) return;&#10;                double lat = result.getLastLocation().getLatitude();&#10;                double lon = result.getLastLocation().getLongitude();&#10;                lastLat = lat; lastLon = lon;&#10;                LatLng p = new LatLng(lat, lon);&#10;                updateCourierMarker(p);&#10;                recalcEta(lat, lon);&#10;                tryFetchDirectionsIfNeeded(lat, lon);&#10;            }&#10;        };&#10;        com.google.android.gms.location.LocationRequest req = new com.google.android.gms.location.LocationRequest.Builder(Priority.PRIORITY_BALANCED_POWER_ACCURACY, 12000)&#10;                .setMinUpdateIntervalMillis(6000)&#10;                .build();&#10;        fused.requestLocationUpdates(req, locationCallback, requireActivity().getMainLooper());&#10;        locationUpdatesStarted = true;&#10;    }&#10;&#10;    private void stopLocationUpdates(){&#10;        if (!locationUpdatesStarted || fused==null || locationCallback==null) return;&#10;        try { fused.removeLocationUpdates(locationCallback); } catch (Exception ignore) {}&#10;        locationUpdatesStarted = false;&#10;        locationCallback = null;&#10;    }&#10;&#10;    private void updateCourierMarker(LatLng p) {&#10;        if (gmap == null) return;&#10;        if (markerCourier == null) {&#10;            markerCourier = gmap.addMarker(new MarkerOptions().position(p).title(&quot;Repartidor&quot;).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));&#10;        } else {&#10;            markerCourier.setPosition(p);&#10;        }&#10;        followCameraIfNeeded(p);&#10;        updateRoutePolylineSimple(p);&#10;    }&#10;&#10;    private void addDestinoMarker(){&#10;        if (gmap==null || destinoLat==null || destinoLon==null) return;&#10;        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;        if (markerDestino==null){&#10;            markerDestino = gmap.addMarker(new MarkerOptions()&#10;                    .position(dest)&#10;                    .title(getString(R.string.destination_label))&#10;                    .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED))&#10;            );&#10;        } else {&#10;            markerDestino.setPosition(dest);&#10;        }&#10;    }&#10;&#10;    // --- Línea simple mientras no haya ruta real ---&#10;    private void updateRoutePolylineSimple(LatLng courier){&#10;        if (gmap==null || destinoLat==null || destinoLon==null || courier==null) return;&#10;        if (directionsRequested) return; // ya se mostró ruta detallada&#10;        LatLng dest = new LatLng(destinoLat, destinoLon);&#10;        if (rutaPolyline==null){&#10;            rutaPolyline = gmap.addPolyline(new PolylineOptions().add(courier, dest).color(0xFF1565C0).width(8f));&#10;        } else {&#10;            rutaPolyline.setPoints(java.util.Arrays.asList(courier, dest));&#10;        }&#10;    }&#10;&#10;    // --- Descarga ruta de Directions con gradiente ---&#10;    private void tryFetchDirectionsIfNeeded(double origenLat, double origenLon){&#10;        if (destinoLat==null || destinoLon==null) return;&#10;        String apiKey = BuildConfig.MAPS_API_KEY;&#10;        if (TextUtils.isEmpty(apiKey)) return; // sin API KEY mantenemos línea simple&#10;        double moved = (lastRouteOriginLat!=null &amp;&amp; lastRouteOriginLon!=null) ? TrackingService.haversine(lastRouteOriginLat, lastRouteOriginLon, origenLat, origenLon) : Double.MAX_VALUE;&#10;        if (directionsRequested &amp;&amp; moved &lt; ROUTE_REFRESH_MIN_MOVEMENT_KM) return;&#10;        directionsRequested = true;&#10;        lastRouteOriginLat = origenLat; lastRouteOriginLon = origenLon;&#10;        final String url = &quot;https://maps.googleapis.com/maps/api/directions/json?origin=&quot;+origenLat+&quot;,&quot;+origenLon+&quot;&amp;destination=&quot;+destinoLat+&quot;,&quot;+destinoLon+&quot;&amp;mode=driving&amp;key=&quot;+apiKey;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                Request rq = new Request.Builder().url(url).build();&#10;                try (Response resp = httpClient.newCall(rq).execute()) {&#10;                    if (!resp.isSuccessful()) throw new RuntimeException(&quot;HTTP &quot;+resp.code());&#10;                    String body = resp.body()!=null? resp.body().string():null;&#10;                    if (body==null) throw new RuntimeException(&quot;Sin body&quot;);&#10;                    JSONObject json = new JSONObject(body);&#10;                    JSONArray routes = json.optJSONArray(&quot;routes&quot;);&#10;                    if (routes!=null &amp;&amp; routes.length()&gt;0){&#10;                        JSONObject r0 = routes.getJSONObject(0);&#10;                        JSONObject overview = r0.optJSONObject(&quot;overview_polyline&quot;);&#10;                        if (overview!=null){&#10;                            String pts = overview.optString(&quot;points&quot;);&#10;                            java.util.List&lt;LatLng&gt; decoded = decodePoly(pts);&#10;                            runOnUi(() -&gt; drawGradientRoute(decoded));&#10;                        }&#10;                    }&#10;                }&#10;            } catch (Exception ex){&#10;                runOnUi(() -&gt; directionsRequested = false); // permitir reintento&#10;            }&#10;        });&#10;    }&#10;&#10;    private void clearRouteSegments(){&#10;        for (Polyline p : routeSegments) try { p.remove(); } catch (Exception ignore) {}&#10;        routeSegments.clear();&#10;        if (rutaPolyline!=null){ try { rutaPolyline.remove(); } catch (Exception ignore) {} rutaPolyline=null; }&#10;    }&#10;&#10;    private void drawGradientRoute(java.util.List&lt;LatLng&gt; points){&#10;        if (gmap==null || points==null || points.size()&lt;2) return;&#10;        clearRouteSegments();&#10;        int maxPts=120;&#10;        if (points.size()&gt;maxPts){&#10;            java.util.List&lt;LatLng&gt; reduced = new java.util.ArrayList&lt;&gt;();&#10;            double step = (double)(points.size()-1)/(maxPts-1);&#10;            for (int i=0;i&lt;maxPts;i++) reduced.add(points.get((int)Math.round(i*step)));&#10;            points = reduced;&#10;        }&#10;        int n = points.size();&#10;        int startColor=0xFF1565C0, endColor=0xFF2E7D32;&#10;        for (int i=0;i&lt;n-1;i++){&#10;            LatLng a = points.get(i), b = points.get(i+1);&#10;            float f = (float)i/(float)(n-2);&#10;            int c = interpolateColor(startColor, endColor, f);&#10;            Polyline seg = gmap.addPolyline(new PolylineOptions().add(a,b).color(c).width(12f).zIndex(10f));&#10;            routeSegments.add(seg);&#10;        }&#10;    }&#10;&#10;    private int interpolateColor(int c1, int c2, float f){&#10;        int a1=(c1&gt;&gt;24)&amp;0xFF,r1=(c1&gt;&gt;16)&amp;0xFF,g1=(c1&gt;&gt;8)&amp;0xFF,b1=c1&amp;0xFF;&#10;        int a2=(c2&gt;&gt;24)&amp;0xFF,r2=(c2&gt;&gt;16)&amp;0xFF,g2=(c2&gt;&gt;8)&amp;0xFF,b2=c2&amp;0xFF;&#10;        int a=(int)(a1+(a2-a1)*f), r=(int)(r1+(r2-r1)*f), g=(int)(g1+(g2-g1)*f), b=(int)(b1+(b2-b1)*f);&#10;        return (a&lt;&lt;24)|(r&lt;&lt;16)|(g&lt;&lt;8)|b;&#10;    }&#10;&#10;    private java.util.List&lt;LatLng&gt; decodePoly(String encoded){&#10;        java.util.List&lt;LatLng&gt; poly = new java.util.ArrayList&lt;&gt;();&#10;        if (encoded==null) return poly;&#10;        int len=encoded.length(), index=0, lat=0, lng=0;&#10;        while (index &lt; len){&#10;            int b, shift=0, result=0;&#10;            do { b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20 &amp;&amp; index &lt; len);&#10;            int dlat = ((result &amp; 1)!=0 ? ~(result&gt;&gt;1) : (result&gt;&gt;1)); lat += dlat;&#10;            shift=0; result=0;&#10;            do { if (index&gt;=len) break; b = encoded.charAt(index++) - 63; result |= (b &amp; 0x1f) &lt;&lt; shift; shift += 5; } while (b &gt;= 0x20 &amp;&amp; index &lt; len);&#10;            int dlng = ((result &amp; 1)!=0 ? ~(result&gt;&gt;1) : (result&gt;&gt;1)); lng += dlng;&#10;            double latD = lat/1E5; double lonD = lng/1E5; poly.add(new LatLng(latD, lonD));&#10;        }&#10;        return poly;&#10;    }&#10;&#10;    // === Método ETA restaurado ===&#10;    private void recalcEta(double olat, double olon) {&#10;        if (destinoLat == null || destinoLon == null) return;&#10;        double km;&#10;        try { km = TrackingService.haversine(olat, olon, destinoLat, destinoLon); } catch (Exception e) { km = 5; }&#10;        if (km &lt; 0) km = 0;&#10;        lastDistanceKm = km;&#10;        boolean isClose = km &lt;= CLOSE_DISTANCE_KM;&#10;        if (markerCourier != null) {&#10;            if (isClose &amp;&amp; !markerCloseApplied) {&#10;                markerCourier.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));&#10;                markerCloseApplied = true;&#10;            } else if (!isClose &amp;&amp; markerCloseApplied) {&#10;                markerCourier.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));&#10;                markerCloseApplied = false;&#10;            }&#10;        }&#10;        if (km &lt;= 0.05) { // llegada muy cercana&#10;            if (tvEta != null)&#10;                tvEta.setText(getString(R.string.eta_format_only, getString(R.string.minutes_sub_min)));&#10;            if (chipDistance != null) chipDistance.setText(&quot;&lt;50m&quot;);&#10;            return;&#10;        }&#10;        String etaIso = TrackingService.calcEtaIso(Math.max(0.3, km), 25);&#10;        lastEtaIso = etaIso;&#10;        String etaShort = shortTime(etaIso);&#10;        java.text.DecimalFormat df = new java.text.DecimalFormat(&quot;0.0&quot;);&#10;        if (tvEta != null)&#10;            tvEta.setText(getString(R.string.eta_with_distance_format, etaShort, df.format(km)));&#10;        if (chipDistance != null) {&#10;            if (km &gt;= 1) chipDistance.setText(String.format(Locale.getDefault(), &quot;%.1f km&quot;, km));&#10;            else chipDistance.setText(String.format(Locale.getDefault(), &quot;%d m&quot;, (int) Math.round(km * 1000)));&#10;        }&#10;    }&#10;&#10;    private String shortTime(String iso) {&#10;        if (iso == null) return &quot;—&quot;;&#10;        try {&#10;            SimpleDateFormat in = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ssXXX&quot;, Locale.getDefault());&#10;            Date d = in.parse(iso);&#10;            if (d == null) return iso;&#10;            return android.text.format.DateFormat.getTimeFormat(requireContext()).format(d);&#10;        } catch (Exception e) {&#10;            return iso;&#10;        }&#10;    }&#10;&#10;    // Helpers UI restaurados&#10;    private void runOnUi(Runnable r){ if(!isAdded()) return; requireActivity().runOnUiThread(r); }&#10;    private void toast(String s){ if(!isAdded()) return; Toast.makeText(requireContext(), s, Toast.LENGTH_SHORT).show(); }&#10;&#10;    @Override public void onPause(){ super.onPause(); stopLocationUpdates(); }&#10;    @Override public void onDestroyView(){ stopLocationUpdates(); gmap=null; super.onDestroyView(); }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/SolicitudMapaFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/hfad/encomiendas/ui/SolicitudMapaFragment.java" />
              <option name="originalContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import java.util.concurrent.Executors;&#10;&#10;/**&#10; * Fragmento para mostrar una solicitud específica en el mapa&#10; */&#10;public class SolicitudMapaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_SOLICITUD_ID = &quot;solicitud_id&quot;;&#10;&#10;    private GoogleMap mMap;&#10;    private TextView tvInfo;&#10;    private long solicitudId;&#10;    private Solicitud solicitud;&#10;&#10;    public static SolicitudMapaFragment newInstance(long solicitudId) {&#10;        SolicitudMapaFragment fragment = new SolicitudMapaFragment();&#10;        Bundle args = new Bundle();&#10;        args.putLong(ARG_SOLICITUD_ID, solicitudId);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        if (getArguments() != null) {&#10;            solicitudId = getArguments().getLong(ARG_SOLICITUD_ID);&#10;        }&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                           @Nullable Bundle savedInstanceState) {&#10;        View view = inflater.inflate(R.layout.fragment_solicitud_mapa, container, false);&#10;&#10;        tvInfo = view.findViewById(R.id.tvInfo);&#10;&#10;        // Obtener el fragmento del mapa&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager()&#10;                .findFragmentById(R.id.map);&#10;        if (mapFragment != null) {&#10;            mapFragment.getMapAsync(this);&#10;        }&#10;&#10;        cargarSolicitud();&#10;&#10;        return view;&#10;    }&#10;&#10;    @Override&#10;    public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        mMap = googleMap;&#10;&#10;        // Configurar el mapa&#10;        mMap.getUiSettings().setZoomControlsEnabled(true);&#10;        mMap.getUiSettings().setMyLocationButtonEnabled(true);&#10;&#10;        // Si ya tenemos la solicitud, mostrarla en el mapa&#10;        if (solicitud != null) {&#10;            mostrarSolicitudEnMapa();&#10;        }&#10;    }&#10;&#10;    private void cargarSolicitud() {&#10;        android.util.Log.d(&quot;SolicitudMapaFragment&quot;, &quot;cargarSolicitud iniciado - solicitudId: &quot; + solicitudId);&#10;&#10;        if (solicitudId &lt;= 0) {&#10;            android.util.Log.e(&quot;SolicitudMapaFragment&quot;, &quot;ID de solicitud inválido: &quot; + solicitudId);&#10;            if (tvInfo != null) {&#10;                tvInfo.setText(&quot;ID de solicitud inválido&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                solicitud = db.solicitudDao().byId(solicitudId);&#10;&#10;                android.util.Log.d(&quot;SolicitudMapaFragment&quot;, &quot;Solicitud cargada: &quot; +&#10;                    (solicitud != null ? &quot;ID=&quot; + solicitud.id + &quot;, Estado=&quot; + solicitud.estado : &quot;NULL&quot;));&#10;&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        if (solicitud != null) {&#10;                            android.util.Log.d(&quot;SolicitudMapaFragment&quot;, &quot;Actualizando UI con solicitud: &quot; + solicitud.id);&#10;                            actualizarInfo();&#10;                            if (mMap != null) {&#10;                                mostrarSolicitudEnMapa();&#10;                            }&#10;                        } else {&#10;                            android.util.Log.w(&quot;SolicitudMapaFragment&quot;, &quot;Solicitud no encontrada en BD para ID: &quot; + solicitudId);&#10;                            if (tvInfo != null) {&#10;                                tvInfo.setText(&quot;Solicitud no encontrada (ID: &quot; + solicitudId + &quot;)&quot;);&#10;                            }&#10;                        }&#10;                    });&#10;                }&#10;&#10;            } catch (Exception e) {&#10;                android.util.Log.e(&quot;SolicitudMapaFragment&quot;, &quot;Error cargando solicitud ID &quot; + solicitudId, e);&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        if (tvInfo != null) {&#10;                            tvInfo.setText(&quot;Error al cargar la solicitud: &quot; + e.getMessage() + &quot; (ID: &quot; + solicitudId + &quot;)&quot;);&#10;                        }&#10;                    });&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void actualizarInfo() {&#10;        if (solicitud != null) {&#10;            String info = String.format(&quot;Guía: %s\nDirección: %s\nEstado: %s&quot;,&#10;                    solicitud.guia != null ? solicitud.guia : &quot;—&quot;,&#10;                    solicitud.direccion != null ? solicitud.direccion : &quot;—&quot;,&#10;                    solicitud.estado != null ? solicitud.estado : &quot;—&quot;);&#10;            tvInfo.setText(info);&#10;        }&#10;    }&#10;&#10;    private void mostrarSolicitudEnMapa() {&#10;        if (solicitud != null &amp;&amp; solicitud.lat != null &amp;&amp; solicitud.lon != null) {&#10;            LatLng ubicacion = new LatLng(solicitud.lat, solicitud.lon);&#10;&#10;            // Agregar marcador&#10;            mMap.addMarker(new MarkerOptions()&#10;                    .position(ubicacion)&#10;                    .title(solicitud.guia != null ? solicitud.guia : &quot;Solicitud&quot;)&#10;                    .snippet(solicitud.direccion));&#10;&#10;            // Mover la cámara&#10;            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(ubicacion, 15));&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.hfad.encomiendas.ui;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.hfad.encomiendas.R;&#10;import com.hfad.encomiendas.data.AppDatabase;&#10;import com.hfad.encomiendas.data.Solicitud;&#10;import java.util.concurrent.Executors;&#10;&#10;/**&#10; * Fragmento para mostrar una solicitud específica en el mapa&#10; */&#10;public class SolicitudMapaFragment extends Fragment implements OnMapReadyCallback {&#10;&#10;    private static final String ARG_SOLICITUD_ID = &quot;solicitud_id&quot;;&#10;&#10;    private GoogleMap mMap;&#10;    private TextView tvInfo;&#10;    private long solicitudId;&#10;    private Solicitud solicitud;&#10;&#10;    public static SolicitudMapaFragment newInstance(long solicitudId) {&#10;        SolicitudMapaFragment fragment = new SolicitudMapaFragment();&#10;        Bundle args = new Bundle();&#10;        args.putLong(ARG_SOLICITUD_ID, solicitudId);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        if (getArguments() != null) {&#10;            // Intentar primero con la clave original&#10;            solicitudId = getArguments().getLong(ARG_SOLICITUD_ID, 0);&#10;            &#10;            // Si no se encontró, intentar con la clave de navegación&#10;            if (solicitudId == 0) {&#10;                solicitudId = getArguments().getLong(&quot;solicitudId&quot;, 0);&#10;            }&#10;            &#10;            android.util.Log.d(&quot;SolicitudMapaFragment&quot;, &quot;onCreate - ID recibido: &quot; + solicitudId);&#10;        }&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                           @Nullable Bundle savedInstanceState) {&#10;        View view = inflater.inflate(R.layout.fragment_solicitud_mapa, container, false);&#10;&#10;        tvInfo = view.findViewById(R.id.tvInfo);&#10;&#10;        // Obtener el fragmento del mapa&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getChildFragmentManager()&#10;                .findFragmentById(R.id.map);&#10;        if (mapFragment != null) {&#10;            mapFragment.getMapAsync(this);&#10;        }&#10;&#10;        cargarSolicitud();&#10;&#10;        return view;&#10;    }&#10;&#10;    @Override&#10;    public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        mMap = googleMap;&#10;&#10;        // Configurar el mapa&#10;        mMap.getUiSettings().setZoomControlsEnabled(true);&#10;        mMap.getUiSettings().setMyLocationButtonEnabled(true);&#10;&#10;        // Si ya tenemos la solicitud, mostrarla en el mapa&#10;        if (solicitud != null) {&#10;            mostrarSolicitudEnMapa();&#10;        }&#10;    }&#10;&#10;    private void cargarSolicitud() {&#10;        android.util.Log.d(&quot;SolicitudMapaFragment&quot;, &quot;cargarSolicitud iniciado - solicitudId: &quot; + solicitudId);&#10;&#10;        if (solicitudId &lt;= 0) {&#10;            android.util.Log.e(&quot;SolicitudMapaFragment&quot;, &quot;ID de solicitud inválido: &quot; + solicitudId);&#10;            if (tvInfo != null) {&#10;                tvInfo.setText(&quot;ID de solicitud inválido&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        Executors.newSingleThreadExecutor().execute(() -&gt; {&#10;            try {&#10;                AppDatabase db = AppDatabase.getInstance(requireContext());&#10;                solicitud = db.solicitudDao().byId(solicitudId);&#10;&#10;                android.util.Log.d(&quot;SolicitudMapaFragment&quot;, &quot;Solicitud cargada: &quot; +&#10;                    (solicitud != null ? &quot;ID=&quot; + solicitud.id + &quot;, Estado=&quot; + solicitud.estado : &quot;NULL&quot;));&#10;&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        if (solicitud != null) {&#10;                            android.util.Log.d(&quot;SolicitudMapaFragment&quot;, &quot;Actualizando UI con solicitud: &quot; + solicitud.id);&#10;                            actualizarInfo();&#10;                            if (mMap != null) {&#10;                                mostrarSolicitudEnMapa();&#10;                            }&#10;                        } else {&#10;                            android.util.Log.w(&quot;SolicitudMapaFragment&quot;, &quot;Solicitud no encontrada en BD para ID: &quot; + solicitudId);&#10;                            if (tvInfo != null) {&#10;                                tvInfo.setText(&quot;Solicitud no encontrada (ID: &quot; + solicitudId + &quot;)&quot;);&#10;                            }&#10;                        }&#10;                    });&#10;                }&#10;&#10;            } catch (Exception e) {&#10;                android.util.Log.e(&quot;SolicitudMapaFragment&quot;, &quot;Error cargando solicitud ID &quot; + solicitudId, e);&#10;                if (getActivity() != null) {&#10;                    getActivity().runOnUiThread(() -&gt; {&#10;                        if (tvInfo != null) {&#10;                            tvInfo.setText(&quot;Error al cargar la solicitud: &quot; + e.getMessage() + &quot; (ID: &quot; + solicitudId + &quot;)&quot;);&#10;                        }&#10;                    });&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void actualizarInfo() {&#10;        if (solicitud != null) {&#10;            String info = String.format(&quot;Guía: %s\nDirección: %s\nEstado: %s&quot;,&#10;                    solicitud.guia != null ? solicitud.guia : &quot;—&quot;,&#10;                    solicitud.direccion != null ? solicitud.direccion : &quot;—&quot;,&#10;                    solicitud.estado != null ? solicitud.estado : &quot;—&quot;);&#10;            tvInfo.setText(info);&#10;        }&#10;    }&#10;&#10;    private void mostrarSolicitudEnMapa() {&#10;        if (solicitud != null &amp;&amp; solicitud.lat != null &amp;&amp; solicitud.lon != null) {&#10;            LatLng ubicacion = new LatLng(solicitud.lat, solicitud.lon);&#10;&#10;            // Agregar marcador&#10;            mMap.addMarker(new MarkerOptions()&#10;                    .position(ubicacion)&#10;                    .title(solicitud.guia != null ? solicitud.guia : &quot;Solicitud&quot;)&#10;                    .snippet(solicitud.direccion));&#10;&#10;            // Mover la cámara&#10;            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(ubicacion, 15));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_in_left.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_in_left.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_slow_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;-100%&quot;&#10;        android:toXDelta=&quot;0%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;0&quot; android:toAlpha=&quot;1&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_in_right.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_in_right.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_slow_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;100%&quot;&#10;        android:toXDelta=&quot;0%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;0&quot; android:toAlpha=&quot;1&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_out_left.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_out_left.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_linear_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;0%&quot;&#10;        android:toXDelta=&quot;-100%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;1&quot; android:toAlpha=&quot;0&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/anim/slide_out_right.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/anim/slide_out_right.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:interpolator=&quot;@android:interpolator/fast_out_linear_in&quot;&gt;&#10;    &lt;translate&#10;        android:fromXDelta=&quot;0%&quot;&#10;        android:toXDelta=&quot;100%&quot;&#10;        android:duration=&quot;250&quot; /&gt;&#10;    &lt;alpha android:fromAlpha=&quot;1&quot; android:toAlpha=&quot;0&quot; android:duration=&quot;250&quot;/&gt;&#10;&lt;/set&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_entrega.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_detalle_entrega.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;Entrega&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEstado&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/map_container_entrega&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;/&gt;&#10;                &lt;com.google.android.material.chip.Chip&#10;                    android:id=&quot;@+id/chipDistance&quot;&#10;                    style=&quot;@style/Widget.Material3.Chip.Assist&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:padding=&quot;8dp&quot;&#10;                    android:text=&quot;ETA: —&quot;/&gt;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;/&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnIniciarRuta&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Iniciar ruta&quot;/&gt;&#10;                    &lt;Space android:layout_width=&quot;12dp&quot; android:layout_height=&quot;1dp&quot;/&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnMarcarEntregado&quot;&#10;                        style=&quot;@style/Widget.Material3.Button.FilledTonalButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Entregado&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTitulo&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;Entrega&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEstado&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:strokeWidth=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;            &lt;LinearLayout&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&gt;&#10;                &lt;FrameLayout&#10;                    android:id=&quot;@+id/map_container_entrega&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;220dp&quot;/&gt;&#10;                &lt;com.google.android.material.chip.Chip&#10;                    android:id=&quot;@+id/chipDistance&quot;&#10;                    style=&quot;@style/Widget.Material3.Chip.Assist&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;—&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvEta&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:padding=&quot;8dp&quot;&#10;                    android:text=&quot;ETA: —&quot;/&gt;&#10;                &lt;androidx.recyclerview.widget.RecyclerView&#10;                    android:id=&quot;@+id/rvTimeline&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:nestedScrollingEnabled=&quot;false&quot;/&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginTop=&quot;12dp&quot;&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnIniciarRuta&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Iniciar ruta&quot;/&gt;&#10;                    &lt;Space android:layout_width=&quot;12dp&quot; android:layout_height=&quot;1dp&quot;/&gt;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btnMarcarEntregado&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Entregado&quot;/&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_recoleccion_mapa.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_recoleccion_mapa.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;com.google.android.gms.maps.MapView&#10;        android:id=&quot;@+id/mapFullReco&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;#66000000&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnBackReco&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:src=&quot;@android:drawable/ic_menu_close_clear_cancel&quot;&#10;            android:contentDescription=&quot;Cerrar&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvStatusReco&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:text=&quot;Cargando...&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fabCenterReco&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Centrar&quot;&#10;        android:src=&quot;@android:drawable/ic_menu_mylocation&quot;/&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/raw/map_dark.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/raw/map_dark.json" />
              <option name="updatedContent" value="[&#10;  {&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#212121&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.icon&quot;,&#10;    &quot;stylers&quot;: [ { &quot;visibility&quot;: &quot;off&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;elementType&quot;: &quot;labels.text.stroke&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#212121&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;administrative&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#bdbdbd&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#181818&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#616161&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;poi.park&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.stroke&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#1b1b1b&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road&quot;,&#10;    &quot;elementType&quot;: &quot;geometry.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#2c2c2c&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#8a8a8a&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.arterial&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#373737&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.highway&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#3c3c3c&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.highway.controlled_access&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#4e4e4e&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;road.local&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#616161&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;transit&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#757575&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;water&quot;,&#10;    &quot;elementType&quot;: &quot;geometry&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#000000&quot; } ]&#10;  },&#10;  {&#10;    &quot;featureType&quot;: &quot;water&quot;,&#10;    &quot;elementType&quot;: &quot;labels.text.fill&quot;,&#10;    &quot;stylers&quot;: [ { &quot;color&quot;: &quot;#3d3d3d&quot; } ]&#10;  }&#10;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>